// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/type/string_match.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Type {

  /// <summary>Holder for reflection information generated from envoy/type/string_match.proto</summary>
  public static partial class StringMatchReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/type/string_match.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StringMatchReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1lbnZveS90eXBlL3N0cmluZ19tYXRjaC5wcm90bxIKZW52b3kudHlwZRoU",
            "Z29nb3Byb3RvL2dvZ28ucHJvdG8iZQoLU3RyaW5nTWF0Y2gSEAoGc2ltcGxl",
            "GAEgASgJSAASEAoGcHJlZml4GAIgASgJSAASEAoGc3VmZml4GAMgASgJSAAS",
            "DwoFcmVnZXgYBCABKAlIAEIPCg1tYXRjaF9wYXR0ZXJuQhBaCmVudm95X3R5",
            "cGWo4h4BYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Gogoproto.GogoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Type.StringMatch), global::Envoy.Type.StringMatch.Parser, new[]{ "Simple", "Prefix", "Suffix", "Regex" }, new[]{ "MatchPattern" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Specifies the way to match a string.
  /// </summary>
  public sealed partial class StringMatch : pb::IMessage<StringMatch> {
    private static readonly pb::MessageParser<StringMatch> _parser = new pb::MessageParser<StringMatch>(() => new StringMatch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StringMatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Type.StringMatchReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringMatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringMatch(StringMatch other) : this() {
      switch (other.MatchPatternCase) {
        case MatchPatternOneofCase.Simple:
          Simple = other.Simple;
          break;
        case MatchPatternOneofCase.Prefix:
          Prefix = other.Prefix;
          break;
        case MatchPatternOneofCase.Suffix:
          Suffix = other.Suffix;
          break;
        case MatchPatternOneofCase.Regex:
          Regex = other.Regex;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringMatch Clone() {
      return new StringMatch(this);
    }

    /// <summary>Field number for the "simple" field.</summary>
    public const int SimpleFieldNumber = 1;
    /// <summary>
    /// The input string must match exactly the string specified here.
    /// Or it is a "*", which means that it matches any string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Simple {
      get { return matchPatternCase_ == MatchPatternOneofCase.Simple ? (string) matchPattern_ : ""; }
      set {
        matchPattern_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        matchPatternCase_ = MatchPatternOneofCase.Simple;
      }
    }

    /// <summary>Field number for the "prefix" field.</summary>
    public const int PrefixFieldNumber = 2;
    /// <summary>
    /// The input string must have the prefix specified here.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Prefix {
      get { return matchPatternCase_ == MatchPatternOneofCase.Prefix ? (string) matchPattern_ : ""; }
      set {
        matchPattern_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        matchPatternCase_ = MatchPatternOneofCase.Prefix;
      }
    }

    /// <summary>Field number for the "suffix" field.</summary>
    public const int SuffixFieldNumber = 3;
    /// <summary>
    /// The input string must have the suffix specified here.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Suffix {
      get { return matchPatternCase_ == MatchPatternOneofCase.Suffix ? (string) matchPattern_ : ""; }
      set {
        matchPattern_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        matchPatternCase_ = MatchPatternOneofCase.Suffix;
      }
    }

    /// <summary>Field number for the "regex" field.</summary>
    public const int RegexFieldNumber = 4;
    /// <summary>
    /// The input string must match the regular expression specified here.
    /// The regex grammar is defined `here
    /// &lt;http://en.cppreference.com/w/cpp/regex/ecmascript>`_.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Regex {
      get { return matchPatternCase_ == MatchPatternOneofCase.Regex ? (string) matchPattern_ : ""; }
      set {
        matchPattern_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        matchPatternCase_ = MatchPatternOneofCase.Regex;
      }
    }

    private object matchPattern_;
    /// <summary>Enum of possible cases for the "match_pattern" oneof.</summary>
    public enum MatchPatternOneofCase {
      None = 0,
      Simple = 1,
      Prefix = 2,
      Suffix = 3,
      Regex = 4,
    }
    private MatchPatternOneofCase matchPatternCase_ = MatchPatternOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPatternOneofCase MatchPatternCase {
      get { return matchPatternCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchPattern() {
      matchPatternCase_ = MatchPatternOneofCase.None;
      matchPattern_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StringMatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StringMatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Simple != other.Simple) return false;
      if (Prefix != other.Prefix) return false;
      if (Suffix != other.Suffix) return false;
      if (Regex != other.Regex) return false;
      if (MatchPatternCase != other.MatchPatternCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (matchPatternCase_ == MatchPatternOneofCase.Simple) hash ^= Simple.GetHashCode();
      if (matchPatternCase_ == MatchPatternOneofCase.Prefix) hash ^= Prefix.GetHashCode();
      if (matchPatternCase_ == MatchPatternOneofCase.Suffix) hash ^= Suffix.GetHashCode();
      if (matchPatternCase_ == MatchPatternOneofCase.Regex) hash ^= Regex.GetHashCode();
      hash ^= (int) matchPatternCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (matchPatternCase_ == MatchPatternOneofCase.Simple) {
        output.WriteRawTag(10);
        output.WriteString(Simple);
      }
      if (matchPatternCase_ == MatchPatternOneofCase.Prefix) {
        output.WriteRawTag(18);
        output.WriteString(Prefix);
      }
      if (matchPatternCase_ == MatchPatternOneofCase.Suffix) {
        output.WriteRawTag(26);
        output.WriteString(Suffix);
      }
      if (matchPatternCase_ == MatchPatternOneofCase.Regex) {
        output.WriteRawTag(34);
        output.WriteString(Regex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (matchPatternCase_ == MatchPatternOneofCase.Simple) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Simple);
      }
      if (matchPatternCase_ == MatchPatternOneofCase.Prefix) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Prefix);
      }
      if (matchPatternCase_ == MatchPatternOneofCase.Suffix) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Suffix);
      }
      if (matchPatternCase_ == MatchPatternOneofCase.Regex) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Regex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StringMatch other) {
      if (other == null) {
        return;
      }
      switch (other.MatchPatternCase) {
        case MatchPatternOneofCase.Simple:
          Simple = other.Simple;
          break;
        case MatchPatternOneofCase.Prefix:
          Prefix = other.Prefix;
          break;
        case MatchPatternOneofCase.Suffix:
          Suffix = other.Suffix;
          break;
        case MatchPatternOneofCase.Regex:
          Regex = other.Regex;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Simple = input.ReadString();
            break;
          }
          case 18: {
            Prefix = input.ReadString();
            break;
          }
          case 26: {
            Suffix = input.ReadString();
            break;
          }
          case 34: {
            Regex = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
