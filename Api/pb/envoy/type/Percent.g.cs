// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/type/percent.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Type {

  /// <summary>Holder for reflection information generated from envoy/type/percent.proto</summary>
  public static partial class PercentReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/type/percent.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PercentReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhlbnZveS90eXBlL3BlcmNlbnQucHJvdG8SCmVudm95LnR5cGUaF3ZhbGlk",
            "YXRlL3ZhbGlkYXRlLnByb3RvGhRnb2dvcHJvdG8vZ29nby5wcm90byIqCgdQ",
            "ZXJjZW50Eh8KBXZhbHVlGAEgASgBQhC66cADCxIJGQAAAAAAAFlAIrUBChFG",
            "cmFjdGlvbmFsUGVyY2VudBIRCgludW1lcmF0b3IYASABKA0STgoLZGVub21p",
            "bmF0b3IYAiABKA4yLS5lbnZveS50eXBlLkZyYWN0aW9uYWxQZXJjZW50LkRl",
            "bm9taW5hdG9yVHlwZUIKuunAAwWCAQIQASI9Cg9EZW5vbWluYXRvclR5cGUS",
            "CwoHSFVORFJFRBAAEhAKDFRFTl9USE9VU0FORBABEgsKB01JTExJT04QAkIE",
            "qOIeAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Validate.ValidateReflection.Descriptor, global::Gogoproto.GogoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Type.Percent), global::Envoy.Type.Percent.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Type.FractionalPercent), global::Envoy.Type.FractionalPercent.Parser, new[]{ "Numerator", "Denominator" }, null, new[]{ typeof(global::Envoy.Type.FractionalPercent.Types.DenominatorType) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Identifies a percentage, in the range [0.0, 100.0].
  /// </summary>
  public sealed partial class Percent : pb::IMessage<Percent> {
    private static readonly pb::MessageParser<Percent> _parser = new pb::MessageParser<Percent>(() => new Percent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Percent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Type.PercentReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Percent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Percent(Percent other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Percent Clone() {
      return new Percent(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private double value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Percent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Percent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Value);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Percent other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0D) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Value = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A fractional percentage is used in cases in which for performance reasons performing floating
  /// point to integer conversions during randomness calculations is undesirable. The message includes
  /// both a numerator and denominator that together determine the final fractional value.
  ///
  /// * **Example**: 1/100 = 1%.
  /// * **Example**: 3/10000 = 0.03%.
  /// </summary>
  public sealed partial class FractionalPercent : pb::IMessage<FractionalPercent> {
    private static readonly pb::MessageParser<FractionalPercent> _parser = new pb::MessageParser<FractionalPercent>(() => new FractionalPercent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FractionalPercent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Type.PercentReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FractionalPercent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FractionalPercent(FractionalPercent other) : this() {
      numerator_ = other.numerator_;
      denominator_ = other.denominator_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FractionalPercent Clone() {
      return new FractionalPercent(this);
    }

    /// <summary>Field number for the "numerator" field.</summary>
    public const int NumeratorFieldNumber = 1;
    private uint numerator_;
    /// <summary>
    /// Specifies the numerator. Defaults to 0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Numerator {
      get { return numerator_; }
      set {
        numerator_ = value;
      }
    }

    /// <summary>Field number for the "denominator" field.</summary>
    public const int DenominatorFieldNumber = 2;
    private global::Envoy.Type.FractionalPercent.Types.DenominatorType denominator_ = 0;
    /// <summary>
    /// Specifies the denominator. If the denominator specified is less than the numerator, the final
    /// fractional percentage is capped at 1 (100%).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Type.FractionalPercent.Types.DenominatorType Denominator {
      get { return denominator_; }
      set {
        denominator_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FractionalPercent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FractionalPercent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Numerator != other.Numerator) return false;
      if (Denominator != other.Denominator) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Numerator != 0) hash ^= Numerator.GetHashCode();
      if (Denominator != 0) hash ^= Denominator.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Numerator != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Numerator);
      }
      if (Denominator != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Denominator);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Numerator != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Numerator);
      }
      if (Denominator != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Denominator);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FractionalPercent other) {
      if (other == null) {
        return;
      }
      if (other.Numerator != 0) {
        Numerator = other.Numerator;
      }
      if (other.Denominator != 0) {
        Denominator = other.Denominator;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Numerator = input.ReadUInt32();
            break;
          }
          case 16: {
            denominator_ = (global::Envoy.Type.FractionalPercent.Types.DenominatorType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the FractionalPercent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Fraction percentages support several fixed denominator values.
      /// </summary>
      public enum DenominatorType {
        /// <summary>
        /// 100.
        ///
        /// **Example**: 1/100 = 1%.
        /// </summary>
        [pbr::OriginalName("HUNDRED")] Hundred = 0,
        /// <summary>
        /// 10,000.
        ///
        /// **Example**: 1/10000 = 0.01%.
        /// </summary>
        [pbr::OriginalName("TEN_THOUSAND")] TenThousand = 1,
        /// <summary>
        /// 1,000,000.
        ///
        /// **Example**: 1/1000000 = 0.0001%.
        /// </summary>
        [pbr::OriginalName("MILLION")] Million = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
