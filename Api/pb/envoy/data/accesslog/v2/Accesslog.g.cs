// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/data/accesslog/v2/accesslog.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Data.Accesslog.V2 {

  /// <summary>Holder for reflection information generated from envoy/data/accesslog/v2/accesslog.proto</summary>
  public static partial class AccesslogReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/data/accesslog/v2/accesslog.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AccesslogReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CidlbnZveS9kYXRhL2FjY2Vzc2xvZy92Mi9hY2Nlc3Nsb2cucHJvdG8SF2Vu",
            "dm95LmRhdGEuYWNjZXNzbG9nLnYyGh9lbnZveS9hcGkvdjIvY29yZS9hZGRy",
            "ZXNzLnByb3RvGhxlbnZveS9hcGkvdjIvY29yZS9iYXNlLnByb3RvGh5nb29n",
            "bGUvcHJvdG9idWYvZHVyYXRpb24ucHJvdG8aH2dvb2dsZS9wcm90b2J1Zi90",
            "aW1lc3RhbXAucHJvdG8aHmdvb2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90",
            "bxoUZ29nb3Byb3RvL2dvZ28ucHJvdG8aF3ZhbGlkYXRlL3ZhbGlkYXRlLnBy",
            "b3RvIlgKEVRDUEFjY2Vzc0xvZ0VudHJ5EkMKEWNvbW1vbl9wcm9wZXJ0aWVz",
            "GAEgASgLMiguZW52b3kuZGF0YS5hY2Nlc3Nsb2cudjIuQWNjZXNzTG9nQ29t",
            "bW9uIvwCChJIVFRQQWNjZXNzTG9nRW50cnkSQwoRY29tbW9uX3Byb3BlcnRp",
            "ZXMYASABKAsyKC5lbnZveS5kYXRhLmFjY2Vzc2xvZy52Mi5BY2Nlc3NMb2dD",
            "b21tb24SUQoQcHJvdG9jb2xfdmVyc2lvbhgCIAEoDjI3LmVudm95LmRhdGEu",
            "YWNjZXNzbG9nLnYyLkhUVFBBY2Nlc3NMb2dFbnRyeS5IVFRQVmVyc2lvbhI/",
            "CgdyZXF1ZXN0GAMgASgLMi4uZW52b3kuZGF0YS5hY2Nlc3Nsb2cudjIuSFRU",
            "UFJlcXVlc3RQcm9wZXJ0aWVzEkEKCHJlc3BvbnNlGAQgASgLMi8uZW52b3ku",
            "ZGF0YS5hY2Nlc3Nsb2cudjIuSFRUUFJlc3BvbnNlUHJvcGVydGllcyJKCgtI",
            "VFRQVmVyc2lvbhIYChRQUk9UT0NPTF9VTlNQRUNJRklFRBAAEgoKBkhUVFAx",
            "MBABEgoKBkhUVFAxMRACEgkKBUhUVFAyEAMiswgKD0FjY2Vzc0xvZ0NvbW1v",
            "bhI1CgtzYW1wbGVfcmF0ZRgBIAEoAUIguunAAwsSCSEAAAAAAAAAALrpwAML",
            "EgkZAAAAAAAA8D8SPQoZZG93bnN0cmVhbV9yZW1vdGVfYWRkcmVzcxgCIAEo",
            "CzIaLmVudm95LmFwaS52Mi5jb3JlLkFkZHJlc3MSPAoYZG93bnN0cmVhbV9s",
            "b2NhbF9hZGRyZXNzGAMgASgLMhouZW52b3kuYXBpLnYyLmNvcmUuQWRkcmVz",
            "cxI+Cg50bHNfcHJvcGVydGllcxgEIAEoCzImLmVudm95LmRhdGEuYWNjZXNz",
            "bG9nLnYyLlRMU1Byb3BlcnRpZXMSNAoKc3RhcnRfdGltZRgFIAEoCzIaLmdv",
            "b2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCBJDfHwESPQoUdGltZV90b19sYXN0",
            "X3J4X2J5dGUYBiABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb25CBJjf",
            "HwESRwoedGltZV90b19maXJzdF91cHN0cmVhbV90eF9ieXRlGAcgASgLMhku",
            "Z29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uQgSY3x8BEkYKHXRpbWVfdG9fbGFz",
            "dF91cHN0cmVhbV90eF9ieXRlGAggASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1",
            "cmF0aW9uQgSY3x8BEkcKHnRpbWVfdG9fZmlyc3RfdXBzdHJlYW1fcnhfYnl0",
            "ZRgJIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbkIEmN8fARJGCh10",
            "aW1lX3RvX2xhc3RfdXBzdHJlYW1fcnhfYnl0ZRgKIAEoCzIZLmdvb2dsZS5w",
            "cm90b2J1Zi5EdXJhdGlvbkIEmN8fARJJCiB0aW1lX3RvX2ZpcnN0X2Rvd25z",
            "dHJlYW1fdHhfYnl0ZRgLIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlv",
            "bkIEmN8fARJICh90aW1lX3RvX2xhc3RfZG93bnN0cmVhbV90eF9ieXRlGAwg",
            "ASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uQgSY3x8BEjsKF3Vwc3Ry",
            "ZWFtX3JlbW90ZV9hZGRyZXNzGA0gASgLMhouZW52b3kuYXBpLnYyLmNvcmUu",
            "QWRkcmVzcxI6ChZ1cHN0cmVhbV9sb2NhbF9hZGRyZXNzGA4gASgLMhouZW52",
            "b3kuYXBpLnYyLmNvcmUuQWRkcmVzcxIYChB1cHN0cmVhbV9jbHVzdGVyGA8g",
            "ASgJEj4KDnJlc3BvbnNlX2ZsYWdzGBAgASgLMiYuZW52b3kuZGF0YS5hY2Nl",
            "c3Nsb2cudjIuUmVzcG9uc2VGbGFncxItCghtZXRhZGF0YRgRIAEoCzIbLmVu",
            "dm95LmFwaS52Mi5jb3JlLk1ldGFkYXRhItMECg1SZXNwb25zZUZsYWdzEiAK",
            "GGZhaWxlZF9sb2NhbF9oZWFsdGhjaGVjaxgBIAEoCBIbChNub19oZWFsdGh5",
            "X3Vwc3RyZWFtGAIgASgIEiAKGHVwc3RyZWFtX3JlcXVlc3RfdGltZW91dBgD",
            "IAEoCBITCgtsb2NhbF9yZXNldBgEIAEoCBIdChV1cHN0cmVhbV9yZW1vdGVf",
            "cmVzZXQYBSABKAgSIwobdXBzdHJlYW1fY29ubmVjdGlvbl9mYWlsdXJlGAYg",
            "ASgIEicKH3Vwc3RyZWFtX2Nvbm5lY3Rpb25fdGVybWluYXRpb24YByABKAgS",
            "GQoRdXBzdHJlYW1fb3ZlcmZsb3cYCCABKAgSFgoObm9fcm91dGVfZm91bmQY",
            "CSABKAgSFgoOZGVsYXlfaW5qZWN0ZWQYCiABKAgSFgoOZmF1bHRfaW5qZWN0",
            "ZWQYCyABKAgSFAoMcmF0ZV9saW1pdGVkGAwgASgIElEKFHVuYXV0aG9yaXpl",
            "ZF9kZXRhaWxzGA0gASgLMjMuZW52b3kuZGF0YS5hY2Nlc3Nsb2cudjIuUmVz",
            "cG9uc2VGbGFncy5VbmF1dGhvcml6ZWQakgEKDFVuYXV0aG9yaXplZBJKCgZy",
            "ZWFzb24YASABKA4yOi5lbnZveS5kYXRhLmFjY2Vzc2xvZy52Mi5SZXNwb25z",
            "ZUZsYWdzLlVuYXV0aG9yaXplZC5SZWFzb24iNgoGUmVhc29uEhYKElJFQVNP",
            "Tl9VTlNQRUNJRklFRBAAEhQKEEVYVEVSTkFMX1NFUlZJQ0UQASKCAgoNVExT",
            "UHJvcGVydGllcxJGCgt0bHNfdmVyc2lvbhgBIAEoDjIxLmVudm95LmRhdGEu",
            "YWNjZXNzbG9nLnYyLlRMU1Byb3BlcnRpZXMuVExTVmVyc2lvbhI2ChB0bHNf",
            "Y2lwaGVyX3N1aXRlGAIgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlVJbnQzMlZh",
            "bHVlEhgKEHRsc19zbmlfaG9zdG5hbWUYAyABKAkiVwoKVExTVmVyc2lvbhIX",
            "ChNWRVJTSU9OX1VOU1BFQ0lGSUVEEAASCQoFVExTdjEQARILCgdUTFN2MV8x",
            "EAISCwoHVExTdjFfMhADEgsKB1RMU3YxXzMQBCLkAwoVSFRUUFJlcXVlc3RQ",
            "cm9wZXJ0aWVzEjgKDnJlcXVlc3RfbWV0aG9kGAEgASgOMiAuZW52b3kuYXBp",
            "LnYyLmNvcmUuUmVxdWVzdE1ldGhvZBIOCgZzY2hlbWUYAiABKAkSEQoJYXV0",
            "aG9yaXR5GAMgASgJEioKBHBvcnQYBCABKAsyHC5nb29nbGUucHJvdG9idWYu",
            "VUludDMyVmFsdWUSDAoEcGF0aBgFIAEoCRISCgp1c2VyX2FnZW50GAYgASgJ",
            "Eg8KB3JlZmVyZXIYByABKAkSFQoNZm9yd2FyZGVkX2ZvchgIIAEoCRISCgpy",
            "ZXF1ZXN0X2lkGAkgASgJEhUKDW9yaWdpbmFsX3BhdGgYCiABKAkSHQoVcmVx",
            "dWVzdF9oZWFkZXJzX2J5dGVzGAsgASgEEhoKEnJlcXVlc3RfYm9keV9ieXRl",
            "cxgMIAEoBBJbCg9yZXF1ZXN0X2hlYWRlcnMYDSADKAsyQi5lbnZveS5kYXRh",
            "LmFjY2Vzc2xvZy52Mi5IVFRQUmVxdWVzdFByb3BlcnRpZXMuUmVxdWVzdEhl",
            "YWRlcnNFbnRyeRo1ChNSZXF1ZXN0SGVhZGVyc0VudHJ5EgsKA2tleRgBIAEo",
            "CRINCgV2YWx1ZRgCIAEoCToCOAEivQMKFkhUVFBSZXNwb25zZVByb3BlcnRp",
            "ZXMSMwoNcmVzcG9uc2VfY29kZRgBIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5V",
            "SW50MzJWYWx1ZRIeChZyZXNwb25zZV9oZWFkZXJzX2J5dGVzGAIgASgEEhsK",
            "E3Jlc3BvbnNlX2JvZHlfYnl0ZXMYAyABKAQSXgoQcmVzcG9uc2VfaGVhZGVy",
            "cxgEIAMoCzJELmVudm95LmRhdGEuYWNjZXNzbG9nLnYyLkhUVFBSZXNwb25z",
            "ZVByb3BlcnRpZXMuUmVzcG9uc2VIZWFkZXJzRW50cnkSYAoRcmVzcG9uc2Vf",
            "dHJhaWxlcnMYBSADKAsyRS5lbnZveS5kYXRhLmFjY2Vzc2xvZy52Mi5IVFRQ",
            "UmVzcG9uc2VQcm9wZXJ0aWVzLlJlc3BvbnNlVHJhaWxlcnNFbnRyeRo2ChRS",
            "ZXNwb25zZUhlYWRlcnNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiAB",
            "KAk6AjgBGjcKFVJlc3BvbnNlVHJhaWxlcnNFbnRyeRILCgNrZXkYASABKAkS",
            "DQoFdmFsdWUYAiABKAk6AjgBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Api.V2.Core.AddressReflection.Descriptor, global::Envoy.Api.V2.Core.BaseReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Gogoproto.GogoReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Data.Accesslog.V2.TCPAccessLogEntry), global::Envoy.Data.Accesslog.V2.TCPAccessLogEntry.Parser, new[]{ "CommonProperties" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Data.Accesslog.V2.HTTPAccessLogEntry), global::Envoy.Data.Accesslog.V2.HTTPAccessLogEntry.Parser, new[]{ "CommonProperties", "ProtocolVersion", "Request", "Response" }, null, new[]{ typeof(global::Envoy.Data.Accesslog.V2.HTTPAccessLogEntry.Types.HTTPVersion) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Data.Accesslog.V2.AccessLogCommon), global::Envoy.Data.Accesslog.V2.AccessLogCommon.Parser, new[]{ "SampleRate", "DownstreamRemoteAddress", "DownstreamLocalAddress", "TlsProperties", "StartTime", "TimeToLastRxByte", "TimeToFirstUpstreamTxByte", "TimeToLastUpstreamTxByte", "TimeToFirstUpstreamRxByte", "TimeToLastUpstreamRxByte", "TimeToFirstDownstreamTxByte", "TimeToLastDownstreamTxByte", "UpstreamRemoteAddress", "UpstreamLocalAddress", "UpstreamCluster", "ResponseFlags", "Metadata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Data.Accesslog.V2.ResponseFlags), global::Envoy.Data.Accesslog.V2.ResponseFlags.Parser, new[]{ "FailedLocalHealthcheck", "NoHealthyUpstream", "UpstreamRequestTimeout", "LocalReset", "UpstreamRemoteReset", "UpstreamConnectionFailure", "UpstreamConnectionTermination", "UpstreamOverflow", "NoRouteFound", "DelayInjected", "FaultInjected", "RateLimited", "UnauthorizedDetails" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Data.Accesslog.V2.ResponseFlags.Types.Unauthorized), global::Envoy.Data.Accesslog.V2.ResponseFlags.Types.Unauthorized.Parser, new[]{ "Reason" }, null, new[]{ typeof(global::Envoy.Data.Accesslog.V2.ResponseFlags.Types.Unauthorized.Types.Reason) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Data.Accesslog.V2.TLSProperties), global::Envoy.Data.Accesslog.V2.TLSProperties.Parser, new[]{ "TlsVersion", "TlsCipherSuite", "TlsSniHostname" }, null, new[]{ typeof(global::Envoy.Data.Accesslog.V2.TLSProperties.Types.TLSVersion) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Data.Accesslog.V2.HTTPRequestProperties), global::Envoy.Data.Accesslog.V2.HTTPRequestProperties.Parser, new[]{ "RequestMethod", "Scheme", "Authority", "Port", "Path", "UserAgent", "Referer", "ForwardedFor", "RequestId", "OriginalPath", "RequestHeadersBytes", "RequestBodyBytes", "RequestHeaders" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Data.Accesslog.V2.HTTPResponseProperties), global::Envoy.Data.Accesslog.V2.HTTPResponseProperties.Parser, new[]{ "ResponseCode", "ResponseHeadersBytes", "ResponseBodyBytes", "ResponseHeaders", "ResponseTrailers" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// [#not-implemented-hide:]
  /// </summary>
  public sealed partial class TCPAccessLogEntry : pb::IMessage<TCPAccessLogEntry> {
    private static readonly pb::MessageParser<TCPAccessLogEntry> _parser = new pb::MessageParser<TCPAccessLogEntry>(() => new TCPAccessLogEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TCPAccessLogEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Data.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TCPAccessLogEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TCPAccessLogEntry(TCPAccessLogEntry other) : this() {
      CommonProperties = other.commonProperties_ != null ? other.CommonProperties.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TCPAccessLogEntry Clone() {
      return new TCPAccessLogEntry(this);
    }

    /// <summary>Field number for the "common_properties" field.</summary>
    public const int CommonPropertiesFieldNumber = 1;
    private global::Envoy.Data.Accesslog.V2.AccessLogCommon commonProperties_;
    /// <summary>
    /// Common properties shared by all Envoy access logs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Data.Accesslog.V2.AccessLogCommon CommonProperties {
      get { return commonProperties_; }
      set {
        commonProperties_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TCPAccessLogEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TCPAccessLogEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CommonProperties, other.CommonProperties)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (commonProperties_ != null) hash ^= CommonProperties.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (commonProperties_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CommonProperties);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (commonProperties_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommonProperties);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TCPAccessLogEntry other) {
      if (other == null) {
        return;
      }
      if (other.commonProperties_ != null) {
        if (commonProperties_ == null) {
          commonProperties_ = new global::Envoy.Data.Accesslog.V2.AccessLogCommon();
        }
        CommonProperties.MergeFrom(other.CommonProperties);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (commonProperties_ == null) {
              commonProperties_ = new global::Envoy.Data.Accesslog.V2.AccessLogCommon();
            }
            input.ReadMessage(commonProperties_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HTTPAccessLogEntry : pb::IMessage<HTTPAccessLogEntry> {
    private static readonly pb::MessageParser<HTTPAccessLogEntry> _parser = new pb::MessageParser<HTTPAccessLogEntry>(() => new HTTPAccessLogEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HTTPAccessLogEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Data.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTTPAccessLogEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTTPAccessLogEntry(HTTPAccessLogEntry other) : this() {
      CommonProperties = other.commonProperties_ != null ? other.CommonProperties.Clone() : null;
      protocolVersion_ = other.protocolVersion_;
      Request = other.request_ != null ? other.Request.Clone() : null;
      Response = other.response_ != null ? other.Response.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTTPAccessLogEntry Clone() {
      return new HTTPAccessLogEntry(this);
    }

    /// <summary>Field number for the "common_properties" field.</summary>
    public const int CommonPropertiesFieldNumber = 1;
    private global::Envoy.Data.Accesslog.V2.AccessLogCommon commonProperties_;
    /// <summary>
    /// Common properties shared by all Envoy access logs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Data.Accesslog.V2.AccessLogCommon CommonProperties {
      get { return commonProperties_; }
      set {
        commonProperties_ = value;
      }
    }

    /// <summary>Field number for the "protocol_version" field.</summary>
    public const int ProtocolVersionFieldNumber = 2;
    private global::Envoy.Data.Accesslog.V2.HTTPAccessLogEntry.Types.HTTPVersion protocolVersion_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Data.Accesslog.V2.HTTPAccessLogEntry.Types.HTTPVersion ProtocolVersion {
      get { return protocolVersion_; }
      set {
        protocolVersion_ = value;
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 3;
    private global::Envoy.Data.Accesslog.V2.HTTPRequestProperties request_;
    /// <summary>
    /// Description of the incoming HTTP request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Data.Accesslog.V2.HTTPRequestProperties Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 4;
    private global::Envoy.Data.Accesslog.V2.HTTPResponseProperties response_;
    /// <summary>
    /// Description of the outgoing HTTP response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Data.Accesslog.V2.HTTPResponseProperties Response {
      get { return response_; }
      set {
        response_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HTTPAccessLogEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HTTPAccessLogEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CommonProperties, other.CommonProperties)) return false;
      if (ProtocolVersion != other.ProtocolVersion) return false;
      if (!object.Equals(Request, other.Request)) return false;
      if (!object.Equals(Response, other.Response)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (commonProperties_ != null) hash ^= CommonProperties.GetHashCode();
      if (ProtocolVersion != 0) hash ^= ProtocolVersion.GetHashCode();
      if (request_ != null) hash ^= Request.GetHashCode();
      if (response_ != null) hash ^= Response.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (commonProperties_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CommonProperties);
      }
      if (ProtocolVersion != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ProtocolVersion);
      }
      if (request_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Request);
      }
      if (response_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (commonProperties_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommonProperties);
      }
      if (ProtocolVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ProtocolVersion);
      }
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      if (response_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Response);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HTTPAccessLogEntry other) {
      if (other == null) {
        return;
      }
      if (other.commonProperties_ != null) {
        if (commonProperties_ == null) {
          commonProperties_ = new global::Envoy.Data.Accesslog.V2.AccessLogCommon();
        }
        CommonProperties.MergeFrom(other.CommonProperties);
      }
      if (other.ProtocolVersion != 0) {
        ProtocolVersion = other.ProtocolVersion;
      }
      if (other.request_ != null) {
        if (request_ == null) {
          request_ = new global::Envoy.Data.Accesslog.V2.HTTPRequestProperties();
        }
        Request.MergeFrom(other.Request);
      }
      if (other.response_ != null) {
        if (response_ == null) {
          response_ = new global::Envoy.Data.Accesslog.V2.HTTPResponseProperties();
        }
        Response.MergeFrom(other.Response);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (commonProperties_ == null) {
              commonProperties_ = new global::Envoy.Data.Accesslog.V2.AccessLogCommon();
            }
            input.ReadMessage(commonProperties_);
            break;
          }
          case 16: {
            protocolVersion_ = (global::Envoy.Data.Accesslog.V2.HTTPAccessLogEntry.Types.HTTPVersion) input.ReadEnum();
            break;
          }
          case 26: {
            if (request_ == null) {
              request_ = new global::Envoy.Data.Accesslog.V2.HTTPRequestProperties();
            }
            input.ReadMessage(request_);
            break;
          }
          case 34: {
            if (response_ == null) {
              response_ = new global::Envoy.Data.Accesslog.V2.HTTPResponseProperties();
            }
            input.ReadMessage(response_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the HTTPAccessLogEntry message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// HTTP version
      /// </summary>
      public enum HTTPVersion {
        [pbr::OriginalName("PROTOCOL_UNSPECIFIED")] ProtocolUnspecified = 0,
        [pbr::OriginalName("HTTP10")] Http10 = 1,
        [pbr::OriginalName("HTTP11")] Http11 = 2,
        [pbr::OriginalName("HTTP2")] Http2 = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// Defines fields that are shared by all Envoy access logs.
  /// </summary>
  public sealed partial class AccessLogCommon : pb::IMessage<AccessLogCommon> {
    private static readonly pb::MessageParser<AccessLogCommon> _parser = new pb::MessageParser<AccessLogCommon>(() => new AccessLogCommon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessLogCommon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Data.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogCommon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogCommon(AccessLogCommon other) : this() {
      sampleRate_ = other.sampleRate_;
      DownstreamRemoteAddress = other.downstreamRemoteAddress_ != null ? other.DownstreamRemoteAddress.Clone() : null;
      DownstreamLocalAddress = other.downstreamLocalAddress_ != null ? other.DownstreamLocalAddress.Clone() : null;
      TlsProperties = other.tlsProperties_ != null ? other.TlsProperties.Clone() : null;
      StartTime = other.startTime_ != null ? other.StartTime.Clone() : null;
      TimeToLastRxByte = other.timeToLastRxByte_ != null ? other.TimeToLastRxByte.Clone() : null;
      TimeToFirstUpstreamTxByte = other.timeToFirstUpstreamTxByte_ != null ? other.TimeToFirstUpstreamTxByte.Clone() : null;
      TimeToLastUpstreamTxByte = other.timeToLastUpstreamTxByte_ != null ? other.TimeToLastUpstreamTxByte.Clone() : null;
      TimeToFirstUpstreamRxByte = other.timeToFirstUpstreamRxByte_ != null ? other.TimeToFirstUpstreamRxByte.Clone() : null;
      TimeToLastUpstreamRxByte = other.timeToLastUpstreamRxByte_ != null ? other.TimeToLastUpstreamRxByte.Clone() : null;
      TimeToFirstDownstreamTxByte = other.timeToFirstDownstreamTxByte_ != null ? other.TimeToFirstDownstreamTxByte.Clone() : null;
      TimeToLastDownstreamTxByte = other.timeToLastDownstreamTxByte_ != null ? other.TimeToLastDownstreamTxByte.Clone() : null;
      UpstreamRemoteAddress = other.upstreamRemoteAddress_ != null ? other.UpstreamRemoteAddress.Clone() : null;
      UpstreamLocalAddress = other.upstreamLocalAddress_ != null ? other.UpstreamLocalAddress.Clone() : null;
      upstreamCluster_ = other.upstreamCluster_;
      ResponseFlags = other.responseFlags_ != null ? other.ResponseFlags.Clone() : null;
      Metadata = other.metadata_ != null ? other.Metadata.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogCommon Clone() {
      return new AccessLogCommon(this);
    }

    /// <summary>Field number for the "sample_rate" field.</summary>
    public const int SampleRateFieldNumber = 1;
    private double sampleRate_;
    /// <summary>
    /// [#not-implemented-hide:]
    /// This field indicates the rate at which this log entry was sampled.
    /// Valid range is (0.0, 1.0].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SampleRate {
      get { return sampleRate_; }
      set {
        sampleRate_ = value;
      }
    }

    /// <summary>Field number for the "downstream_remote_address" field.</summary>
    public const int DownstreamRemoteAddressFieldNumber = 2;
    private global::Envoy.Api.V2.Core.Address downstreamRemoteAddress_;
    /// <summary>
    /// This field is the remote/origin address on which the request from the user was received.
    /// Note: This may not be the physical peer. E.g, if the remote address is inferred from for
    /// example the x-forwarder-for header, proxy protocol, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.Address DownstreamRemoteAddress {
      get { return downstreamRemoteAddress_; }
      set {
        downstreamRemoteAddress_ = value;
      }
    }

    /// <summary>Field number for the "downstream_local_address" field.</summary>
    public const int DownstreamLocalAddressFieldNumber = 3;
    private global::Envoy.Api.V2.Core.Address downstreamLocalAddress_;
    /// <summary>
    /// This field is the local/destination address on which the request from the user was received.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.Address DownstreamLocalAddress {
      get { return downstreamLocalAddress_; }
      set {
        downstreamLocalAddress_ = value;
      }
    }

    /// <summary>Field number for the "tls_properties" field.</summary>
    public const int TlsPropertiesFieldNumber = 4;
    private global::Envoy.Data.Accesslog.V2.TLSProperties tlsProperties_;
    /// <summary>
    /// [#not-implemented-hide:]
    /// If the connection is secure,S this field will contain TLS properties.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Data.Accesslog.V2.TLSProperties TlsProperties {
      get { return tlsProperties_; }
      set {
        tlsProperties_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startTime_;
    /// <summary>
    /// The time that Envoy started servicing this request. This is effectively the time that the first
    /// downstream byte is received.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "time_to_last_rx_byte" field.</summary>
    public const int TimeToLastRxByteFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Duration timeToLastRxByte_;
    /// <summary>
    /// Interval between the first downstream byte received and the last
    /// downstream byte received (i.e. time it takes to receive a request).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration TimeToLastRxByte {
      get { return timeToLastRxByte_; }
      set {
        timeToLastRxByte_ = value;
      }
    }

    /// <summary>Field number for the "time_to_first_upstream_tx_byte" field.</summary>
    public const int TimeToFirstUpstreamTxByteFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Duration timeToFirstUpstreamTxByte_;
    /// <summary>
    /// Interval between the first downstream byte received and the first upstream byte sent. There may
    /// by considerable delta between *time_to_last_rx_byte* and this value due to filters.
    /// Additionally, the same caveats apply as documented in *time_to_last_downstream_tx_byte* about
    /// not accounting for kernel socket buffer time, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration TimeToFirstUpstreamTxByte {
      get { return timeToFirstUpstreamTxByte_; }
      set {
        timeToFirstUpstreamTxByte_ = value;
      }
    }

    /// <summary>Field number for the "time_to_last_upstream_tx_byte" field.</summary>
    public const int TimeToLastUpstreamTxByteFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Duration timeToLastUpstreamTxByte_;
    /// <summary>
    /// Interval between the first downstream byte received and the last upstream byte sent. There may
    /// by considerable delta between *time_to_last_rx_byte* and this value due to filters.
    /// Additionally, the same caveats apply as documented in *time_to_last_downstream_tx_byte* about
    /// not accounting for kernel socket buffer time, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration TimeToLastUpstreamTxByte {
      get { return timeToLastUpstreamTxByte_; }
      set {
        timeToLastUpstreamTxByte_ = value;
      }
    }

    /// <summary>Field number for the "time_to_first_upstream_rx_byte" field.</summary>
    public const int TimeToFirstUpstreamRxByteFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Duration timeToFirstUpstreamRxByte_;
    /// <summary>
    /// Interval between the first downstream byte received and the first upstream
    /// byte received (i.e. time it takes to start receiving a response).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration TimeToFirstUpstreamRxByte {
      get { return timeToFirstUpstreamRxByte_; }
      set {
        timeToFirstUpstreamRxByte_ = value;
      }
    }

    /// <summary>Field number for the "time_to_last_upstream_rx_byte" field.</summary>
    public const int TimeToLastUpstreamRxByteFieldNumber = 10;
    private global::Google.Protobuf.WellKnownTypes.Duration timeToLastUpstreamRxByte_;
    /// <summary>
    /// Interval between the first downstream byte received and the last upstream
    /// byte received (i.e. time it takes to receive a complete response).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration TimeToLastUpstreamRxByte {
      get { return timeToLastUpstreamRxByte_; }
      set {
        timeToLastUpstreamRxByte_ = value;
      }
    }

    /// <summary>Field number for the "time_to_first_downstream_tx_byte" field.</summary>
    public const int TimeToFirstDownstreamTxByteFieldNumber = 11;
    private global::Google.Protobuf.WellKnownTypes.Duration timeToFirstDownstreamTxByte_;
    /// <summary>
    /// Interval between the first downstream byte received and the first downstream byte sent.
    /// There may be a considerable delta between the *time_to_first_upstream_rx_byte* and this field
    /// due to filters. Additionally, the same caveats apply as documented in
    /// *time_to_last_downstream_tx_byte* about not accounting for kernel socket buffer time, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration TimeToFirstDownstreamTxByte {
      get { return timeToFirstDownstreamTxByte_; }
      set {
        timeToFirstDownstreamTxByte_ = value;
      }
    }

    /// <summary>Field number for the "time_to_last_downstream_tx_byte" field.</summary>
    public const int TimeToLastDownstreamTxByteFieldNumber = 12;
    private global::Google.Protobuf.WellKnownTypes.Duration timeToLastDownstreamTxByte_;
    /// <summary>
    /// Interval between the first downstream byte received and the last downstream byte sent.
    /// Depending on protocol, buffering, windowing, filters, etc. there may be a considerable delta
    /// between *time_to_last_upstream_rx_byte* and this field. Note also that this is an approximate
    /// time. In the current implementation it does not include kernel socket buffer time. In the
    /// current implementation it also does not include send window buffering inside the HTTP/2 codec.
    /// In the future it is likely that work will be done to make this duration more accurate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration TimeToLastDownstreamTxByte {
      get { return timeToLastDownstreamTxByte_; }
      set {
        timeToLastDownstreamTxByte_ = value;
      }
    }

    /// <summary>Field number for the "upstream_remote_address" field.</summary>
    public const int UpstreamRemoteAddressFieldNumber = 13;
    private global::Envoy.Api.V2.Core.Address upstreamRemoteAddress_;
    /// <summary>
    /// The upstream remote/destination address that handles this exchange. This does not include
    /// retries.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.Address UpstreamRemoteAddress {
      get { return upstreamRemoteAddress_; }
      set {
        upstreamRemoteAddress_ = value;
      }
    }

    /// <summary>Field number for the "upstream_local_address" field.</summary>
    public const int UpstreamLocalAddressFieldNumber = 14;
    private global::Envoy.Api.V2.Core.Address upstreamLocalAddress_;
    /// <summary>
    /// The upstream local/origin address that handles this exchange. This does not include retries.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.Address UpstreamLocalAddress {
      get { return upstreamLocalAddress_; }
      set {
        upstreamLocalAddress_ = value;
      }
    }

    /// <summary>Field number for the "upstream_cluster" field.</summary>
    public const int UpstreamClusterFieldNumber = 15;
    private string upstreamCluster_ = "";
    /// <summary>
    /// The upstream cluster that *upstream_remote_address* belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpstreamCluster {
      get { return upstreamCluster_; }
      set {
        upstreamCluster_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "response_flags" field.</summary>
    public const int ResponseFlagsFieldNumber = 16;
    private global::Envoy.Data.Accesslog.V2.ResponseFlags responseFlags_;
    /// <summary>
    /// Flags indicating occurrences during request/response processing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Data.Accesslog.V2.ResponseFlags ResponseFlags {
      get { return responseFlags_; }
      set {
        responseFlags_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 17;
    private global::Envoy.Api.V2.Core.Metadata metadata_;
    /// <summary>
    /// All metadata encountered during request processing, including endpoint
    /// selection.
    ///
    /// This can be used to associate IDs attached to the various configurations
    /// used to process this request with the access log entry. For example, a
    /// route created from a higher level forwarding rule with some ID can place
    /// that ID in this field and cross reference later. It can also be used to
    /// determine if a canary endpoint was used or not.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.Metadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessLogCommon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessLogCommon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SampleRate, other.SampleRate)) return false;
      if (!object.Equals(DownstreamRemoteAddress, other.DownstreamRemoteAddress)) return false;
      if (!object.Equals(DownstreamLocalAddress, other.DownstreamLocalAddress)) return false;
      if (!object.Equals(TlsProperties, other.TlsProperties)) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(TimeToLastRxByte, other.TimeToLastRxByte)) return false;
      if (!object.Equals(TimeToFirstUpstreamTxByte, other.TimeToFirstUpstreamTxByte)) return false;
      if (!object.Equals(TimeToLastUpstreamTxByte, other.TimeToLastUpstreamTxByte)) return false;
      if (!object.Equals(TimeToFirstUpstreamRxByte, other.TimeToFirstUpstreamRxByte)) return false;
      if (!object.Equals(TimeToLastUpstreamRxByte, other.TimeToLastUpstreamRxByte)) return false;
      if (!object.Equals(TimeToFirstDownstreamTxByte, other.TimeToFirstDownstreamTxByte)) return false;
      if (!object.Equals(TimeToLastDownstreamTxByte, other.TimeToLastDownstreamTxByte)) return false;
      if (!object.Equals(UpstreamRemoteAddress, other.UpstreamRemoteAddress)) return false;
      if (!object.Equals(UpstreamLocalAddress, other.UpstreamLocalAddress)) return false;
      if (UpstreamCluster != other.UpstreamCluster) return false;
      if (!object.Equals(ResponseFlags, other.ResponseFlags)) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SampleRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SampleRate);
      if (downstreamRemoteAddress_ != null) hash ^= DownstreamRemoteAddress.GetHashCode();
      if (downstreamLocalAddress_ != null) hash ^= DownstreamLocalAddress.GetHashCode();
      if (tlsProperties_ != null) hash ^= TlsProperties.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (timeToLastRxByte_ != null) hash ^= TimeToLastRxByte.GetHashCode();
      if (timeToFirstUpstreamTxByte_ != null) hash ^= TimeToFirstUpstreamTxByte.GetHashCode();
      if (timeToLastUpstreamTxByte_ != null) hash ^= TimeToLastUpstreamTxByte.GetHashCode();
      if (timeToFirstUpstreamRxByte_ != null) hash ^= TimeToFirstUpstreamRxByte.GetHashCode();
      if (timeToLastUpstreamRxByte_ != null) hash ^= TimeToLastUpstreamRxByte.GetHashCode();
      if (timeToFirstDownstreamTxByte_ != null) hash ^= TimeToFirstDownstreamTxByte.GetHashCode();
      if (timeToLastDownstreamTxByte_ != null) hash ^= TimeToLastDownstreamTxByte.GetHashCode();
      if (upstreamRemoteAddress_ != null) hash ^= UpstreamRemoteAddress.GetHashCode();
      if (upstreamLocalAddress_ != null) hash ^= UpstreamLocalAddress.GetHashCode();
      if (UpstreamCluster.Length != 0) hash ^= UpstreamCluster.GetHashCode();
      if (responseFlags_ != null) hash ^= ResponseFlags.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SampleRate != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(SampleRate);
      }
      if (downstreamRemoteAddress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DownstreamRemoteAddress);
      }
      if (downstreamLocalAddress_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DownstreamLocalAddress);
      }
      if (tlsProperties_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TlsProperties);
      }
      if (startTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(StartTime);
      }
      if (timeToLastRxByte_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TimeToLastRxByte);
      }
      if (timeToFirstUpstreamTxByte_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(TimeToFirstUpstreamTxByte);
      }
      if (timeToLastUpstreamTxByte_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(TimeToLastUpstreamTxByte);
      }
      if (timeToFirstUpstreamRxByte_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(TimeToFirstUpstreamRxByte);
      }
      if (timeToLastUpstreamRxByte_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(TimeToLastUpstreamRxByte);
      }
      if (timeToFirstDownstreamTxByte_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(TimeToFirstDownstreamTxByte);
      }
      if (timeToLastDownstreamTxByte_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(TimeToLastDownstreamTxByte);
      }
      if (upstreamRemoteAddress_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(UpstreamRemoteAddress);
      }
      if (upstreamLocalAddress_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(UpstreamLocalAddress);
      }
      if (UpstreamCluster.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(UpstreamCluster);
      }
      if (responseFlags_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(ResponseFlags);
      }
      if (metadata_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Metadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SampleRate != 0D) {
        size += 1 + 8;
      }
      if (downstreamRemoteAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DownstreamRemoteAddress);
      }
      if (downstreamLocalAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DownstreamLocalAddress);
      }
      if (tlsProperties_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TlsProperties);
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (timeToLastRxByte_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeToLastRxByte);
      }
      if (timeToFirstUpstreamTxByte_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeToFirstUpstreamTxByte);
      }
      if (timeToLastUpstreamTxByte_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeToLastUpstreamTxByte);
      }
      if (timeToFirstUpstreamRxByte_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeToFirstUpstreamRxByte);
      }
      if (timeToLastUpstreamRxByte_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeToLastUpstreamRxByte);
      }
      if (timeToFirstDownstreamTxByte_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeToFirstDownstreamTxByte);
      }
      if (timeToLastDownstreamTxByte_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeToLastDownstreamTxByte);
      }
      if (upstreamRemoteAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpstreamRemoteAddress);
      }
      if (upstreamLocalAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpstreamLocalAddress);
      }
      if (UpstreamCluster.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UpstreamCluster);
      }
      if (responseFlags_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ResponseFlags);
      }
      if (metadata_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessLogCommon other) {
      if (other == null) {
        return;
      }
      if (other.SampleRate != 0D) {
        SampleRate = other.SampleRate;
      }
      if (other.downstreamRemoteAddress_ != null) {
        if (downstreamRemoteAddress_ == null) {
          downstreamRemoteAddress_ = new global::Envoy.Api.V2.Core.Address();
        }
        DownstreamRemoteAddress.MergeFrom(other.DownstreamRemoteAddress);
      }
      if (other.downstreamLocalAddress_ != null) {
        if (downstreamLocalAddress_ == null) {
          downstreamLocalAddress_ = new global::Envoy.Api.V2.Core.Address();
        }
        DownstreamLocalAddress.MergeFrom(other.DownstreamLocalAddress);
      }
      if (other.tlsProperties_ != null) {
        if (tlsProperties_ == null) {
          tlsProperties_ = new global::Envoy.Data.Accesslog.V2.TLSProperties();
        }
        TlsProperties.MergeFrom(other.TlsProperties);
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          startTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.timeToLastRxByte_ != null) {
        if (timeToLastRxByte_ == null) {
          timeToLastRxByte_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        TimeToLastRxByte.MergeFrom(other.TimeToLastRxByte);
      }
      if (other.timeToFirstUpstreamTxByte_ != null) {
        if (timeToFirstUpstreamTxByte_ == null) {
          timeToFirstUpstreamTxByte_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        TimeToFirstUpstreamTxByte.MergeFrom(other.TimeToFirstUpstreamTxByte);
      }
      if (other.timeToLastUpstreamTxByte_ != null) {
        if (timeToLastUpstreamTxByte_ == null) {
          timeToLastUpstreamTxByte_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        TimeToLastUpstreamTxByte.MergeFrom(other.TimeToLastUpstreamTxByte);
      }
      if (other.timeToFirstUpstreamRxByte_ != null) {
        if (timeToFirstUpstreamRxByte_ == null) {
          timeToFirstUpstreamRxByte_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        TimeToFirstUpstreamRxByte.MergeFrom(other.TimeToFirstUpstreamRxByte);
      }
      if (other.timeToLastUpstreamRxByte_ != null) {
        if (timeToLastUpstreamRxByte_ == null) {
          timeToLastUpstreamRxByte_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        TimeToLastUpstreamRxByte.MergeFrom(other.TimeToLastUpstreamRxByte);
      }
      if (other.timeToFirstDownstreamTxByte_ != null) {
        if (timeToFirstDownstreamTxByte_ == null) {
          timeToFirstDownstreamTxByte_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        TimeToFirstDownstreamTxByte.MergeFrom(other.TimeToFirstDownstreamTxByte);
      }
      if (other.timeToLastDownstreamTxByte_ != null) {
        if (timeToLastDownstreamTxByte_ == null) {
          timeToLastDownstreamTxByte_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        TimeToLastDownstreamTxByte.MergeFrom(other.TimeToLastDownstreamTxByte);
      }
      if (other.upstreamRemoteAddress_ != null) {
        if (upstreamRemoteAddress_ == null) {
          upstreamRemoteAddress_ = new global::Envoy.Api.V2.Core.Address();
        }
        UpstreamRemoteAddress.MergeFrom(other.UpstreamRemoteAddress);
      }
      if (other.upstreamLocalAddress_ != null) {
        if (upstreamLocalAddress_ == null) {
          upstreamLocalAddress_ = new global::Envoy.Api.V2.Core.Address();
        }
        UpstreamLocalAddress.MergeFrom(other.UpstreamLocalAddress);
      }
      if (other.UpstreamCluster.Length != 0) {
        UpstreamCluster = other.UpstreamCluster;
      }
      if (other.responseFlags_ != null) {
        if (responseFlags_ == null) {
          responseFlags_ = new global::Envoy.Data.Accesslog.V2.ResponseFlags();
        }
        ResponseFlags.MergeFrom(other.ResponseFlags);
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::Envoy.Api.V2.Core.Metadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            SampleRate = input.ReadDouble();
            break;
          }
          case 18: {
            if (downstreamRemoteAddress_ == null) {
              downstreamRemoteAddress_ = new global::Envoy.Api.V2.Core.Address();
            }
            input.ReadMessage(downstreamRemoteAddress_);
            break;
          }
          case 26: {
            if (downstreamLocalAddress_ == null) {
              downstreamLocalAddress_ = new global::Envoy.Api.V2.Core.Address();
            }
            input.ReadMessage(downstreamLocalAddress_);
            break;
          }
          case 34: {
            if (tlsProperties_ == null) {
              tlsProperties_ = new global::Envoy.Data.Accesslog.V2.TLSProperties();
            }
            input.ReadMessage(tlsProperties_);
            break;
          }
          case 42: {
            if (startTime_ == null) {
              startTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(startTime_);
            break;
          }
          case 50: {
            if (timeToLastRxByte_ == null) {
              timeToLastRxByte_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(timeToLastRxByte_);
            break;
          }
          case 58: {
            if (timeToFirstUpstreamTxByte_ == null) {
              timeToFirstUpstreamTxByte_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(timeToFirstUpstreamTxByte_);
            break;
          }
          case 66: {
            if (timeToLastUpstreamTxByte_ == null) {
              timeToLastUpstreamTxByte_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(timeToLastUpstreamTxByte_);
            break;
          }
          case 74: {
            if (timeToFirstUpstreamRxByte_ == null) {
              timeToFirstUpstreamRxByte_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(timeToFirstUpstreamRxByte_);
            break;
          }
          case 82: {
            if (timeToLastUpstreamRxByte_ == null) {
              timeToLastUpstreamRxByte_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(timeToLastUpstreamRxByte_);
            break;
          }
          case 90: {
            if (timeToFirstDownstreamTxByte_ == null) {
              timeToFirstDownstreamTxByte_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(timeToFirstDownstreamTxByte_);
            break;
          }
          case 98: {
            if (timeToLastDownstreamTxByte_ == null) {
              timeToLastDownstreamTxByte_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(timeToLastDownstreamTxByte_);
            break;
          }
          case 106: {
            if (upstreamRemoteAddress_ == null) {
              upstreamRemoteAddress_ = new global::Envoy.Api.V2.Core.Address();
            }
            input.ReadMessage(upstreamRemoteAddress_);
            break;
          }
          case 114: {
            if (upstreamLocalAddress_ == null) {
              upstreamLocalAddress_ = new global::Envoy.Api.V2.Core.Address();
            }
            input.ReadMessage(upstreamLocalAddress_);
            break;
          }
          case 122: {
            UpstreamCluster = input.ReadString();
            break;
          }
          case 130: {
            if (responseFlags_ == null) {
              responseFlags_ = new global::Envoy.Data.Accesslog.V2.ResponseFlags();
            }
            input.ReadMessage(responseFlags_);
            break;
          }
          case 138: {
            if (metadata_ == null) {
              metadata_ = new global::Envoy.Api.V2.Core.Metadata();
            }
            input.ReadMessage(metadata_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Flags indicating occurrences during request/response processing.
  /// </summary>
  public sealed partial class ResponseFlags : pb::IMessage<ResponseFlags> {
    private static readonly pb::MessageParser<ResponseFlags> _parser = new pb::MessageParser<ResponseFlags>(() => new ResponseFlags());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseFlags> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Data.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseFlags() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseFlags(ResponseFlags other) : this() {
      failedLocalHealthcheck_ = other.failedLocalHealthcheck_;
      noHealthyUpstream_ = other.noHealthyUpstream_;
      upstreamRequestTimeout_ = other.upstreamRequestTimeout_;
      localReset_ = other.localReset_;
      upstreamRemoteReset_ = other.upstreamRemoteReset_;
      upstreamConnectionFailure_ = other.upstreamConnectionFailure_;
      upstreamConnectionTermination_ = other.upstreamConnectionTermination_;
      upstreamOverflow_ = other.upstreamOverflow_;
      noRouteFound_ = other.noRouteFound_;
      delayInjected_ = other.delayInjected_;
      faultInjected_ = other.faultInjected_;
      rateLimited_ = other.rateLimited_;
      UnauthorizedDetails = other.unauthorizedDetails_ != null ? other.UnauthorizedDetails.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseFlags Clone() {
      return new ResponseFlags(this);
    }

    /// <summary>Field number for the "failed_local_healthcheck" field.</summary>
    public const int FailedLocalHealthcheckFieldNumber = 1;
    private bool failedLocalHealthcheck_;
    /// <summary>
    /// Indicates local server healthcheck failed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FailedLocalHealthcheck {
      get { return failedLocalHealthcheck_; }
      set {
        failedLocalHealthcheck_ = value;
      }
    }

    /// <summary>Field number for the "no_healthy_upstream" field.</summary>
    public const int NoHealthyUpstreamFieldNumber = 2;
    private bool noHealthyUpstream_;
    /// <summary>
    /// Indicates there was no healthy upstream.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NoHealthyUpstream {
      get { return noHealthyUpstream_; }
      set {
        noHealthyUpstream_ = value;
      }
    }

    /// <summary>Field number for the "upstream_request_timeout" field.</summary>
    public const int UpstreamRequestTimeoutFieldNumber = 3;
    private bool upstreamRequestTimeout_;
    /// <summary>
    /// Indicates an there was an upstream request timeout.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpstreamRequestTimeout {
      get { return upstreamRequestTimeout_; }
      set {
        upstreamRequestTimeout_ = value;
      }
    }

    /// <summary>Field number for the "local_reset" field.</summary>
    public const int LocalResetFieldNumber = 4;
    private bool localReset_;
    /// <summary>
    /// Indicates local codec level reset was sent on the stream.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LocalReset {
      get { return localReset_; }
      set {
        localReset_ = value;
      }
    }

    /// <summary>Field number for the "upstream_remote_reset" field.</summary>
    public const int UpstreamRemoteResetFieldNumber = 5;
    private bool upstreamRemoteReset_;
    /// <summary>
    /// Indicates remote codec level reset was received on the stream.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpstreamRemoteReset {
      get { return upstreamRemoteReset_; }
      set {
        upstreamRemoteReset_ = value;
      }
    }

    /// <summary>Field number for the "upstream_connection_failure" field.</summary>
    public const int UpstreamConnectionFailureFieldNumber = 6;
    private bool upstreamConnectionFailure_;
    /// <summary>
    /// Indicates there was a local reset by a connection pool due to an initial connection failure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpstreamConnectionFailure {
      get { return upstreamConnectionFailure_; }
      set {
        upstreamConnectionFailure_ = value;
      }
    }

    /// <summary>Field number for the "upstream_connection_termination" field.</summary>
    public const int UpstreamConnectionTerminationFieldNumber = 7;
    private bool upstreamConnectionTermination_;
    /// <summary>
    /// Indicates the stream was reset locally due to connection termination.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpstreamConnectionTermination {
      get { return upstreamConnectionTermination_; }
      set {
        upstreamConnectionTermination_ = value;
      }
    }

    /// <summary>Field number for the "upstream_overflow" field.</summary>
    public const int UpstreamOverflowFieldNumber = 8;
    private bool upstreamOverflow_;
    /// <summary>
    /// Indicates the stream was reset because of a resource overflow.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpstreamOverflow {
      get { return upstreamOverflow_; }
      set {
        upstreamOverflow_ = value;
      }
    }

    /// <summary>Field number for the "no_route_found" field.</summary>
    public const int NoRouteFoundFieldNumber = 9;
    private bool noRouteFound_;
    /// <summary>
    /// Indicates no route was found for the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NoRouteFound {
      get { return noRouteFound_; }
      set {
        noRouteFound_ = value;
      }
    }

    /// <summary>Field number for the "delay_injected" field.</summary>
    public const int DelayInjectedFieldNumber = 10;
    private bool delayInjected_;
    /// <summary>
    /// Indicates that the request was delayed before proxying.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DelayInjected {
      get { return delayInjected_; }
      set {
        delayInjected_ = value;
      }
    }

    /// <summary>Field number for the "fault_injected" field.</summary>
    public const int FaultInjectedFieldNumber = 11;
    private bool faultInjected_;
    /// <summary>
    /// Indicates that the request was aborted with an injected error code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FaultInjected {
      get { return faultInjected_; }
      set {
        faultInjected_ = value;
      }
    }

    /// <summary>Field number for the "rate_limited" field.</summary>
    public const int RateLimitedFieldNumber = 12;
    private bool rateLimited_;
    /// <summary>
    /// Indicates that the request was rate-limited locally.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RateLimited {
      get { return rateLimited_; }
      set {
        rateLimited_ = value;
      }
    }

    /// <summary>Field number for the "unauthorized_details" field.</summary>
    public const int UnauthorizedDetailsFieldNumber = 13;
    private global::Envoy.Data.Accesslog.V2.ResponseFlags.Types.Unauthorized unauthorizedDetails_;
    /// <summary>
    /// Indicates if the request was deemed unauthorized and the reason for it.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Data.Accesslog.V2.ResponseFlags.Types.Unauthorized UnauthorizedDetails {
      get { return unauthorizedDetails_; }
      set {
        unauthorizedDetails_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseFlags);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseFlags other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FailedLocalHealthcheck != other.FailedLocalHealthcheck) return false;
      if (NoHealthyUpstream != other.NoHealthyUpstream) return false;
      if (UpstreamRequestTimeout != other.UpstreamRequestTimeout) return false;
      if (LocalReset != other.LocalReset) return false;
      if (UpstreamRemoteReset != other.UpstreamRemoteReset) return false;
      if (UpstreamConnectionFailure != other.UpstreamConnectionFailure) return false;
      if (UpstreamConnectionTermination != other.UpstreamConnectionTermination) return false;
      if (UpstreamOverflow != other.UpstreamOverflow) return false;
      if (NoRouteFound != other.NoRouteFound) return false;
      if (DelayInjected != other.DelayInjected) return false;
      if (FaultInjected != other.FaultInjected) return false;
      if (RateLimited != other.RateLimited) return false;
      if (!object.Equals(UnauthorizedDetails, other.UnauthorizedDetails)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FailedLocalHealthcheck != false) hash ^= FailedLocalHealthcheck.GetHashCode();
      if (NoHealthyUpstream != false) hash ^= NoHealthyUpstream.GetHashCode();
      if (UpstreamRequestTimeout != false) hash ^= UpstreamRequestTimeout.GetHashCode();
      if (LocalReset != false) hash ^= LocalReset.GetHashCode();
      if (UpstreamRemoteReset != false) hash ^= UpstreamRemoteReset.GetHashCode();
      if (UpstreamConnectionFailure != false) hash ^= UpstreamConnectionFailure.GetHashCode();
      if (UpstreamConnectionTermination != false) hash ^= UpstreamConnectionTermination.GetHashCode();
      if (UpstreamOverflow != false) hash ^= UpstreamOverflow.GetHashCode();
      if (NoRouteFound != false) hash ^= NoRouteFound.GetHashCode();
      if (DelayInjected != false) hash ^= DelayInjected.GetHashCode();
      if (FaultInjected != false) hash ^= FaultInjected.GetHashCode();
      if (RateLimited != false) hash ^= RateLimited.GetHashCode();
      if (unauthorizedDetails_ != null) hash ^= UnauthorizedDetails.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FailedLocalHealthcheck != false) {
        output.WriteRawTag(8);
        output.WriteBool(FailedLocalHealthcheck);
      }
      if (NoHealthyUpstream != false) {
        output.WriteRawTag(16);
        output.WriteBool(NoHealthyUpstream);
      }
      if (UpstreamRequestTimeout != false) {
        output.WriteRawTag(24);
        output.WriteBool(UpstreamRequestTimeout);
      }
      if (LocalReset != false) {
        output.WriteRawTag(32);
        output.WriteBool(LocalReset);
      }
      if (UpstreamRemoteReset != false) {
        output.WriteRawTag(40);
        output.WriteBool(UpstreamRemoteReset);
      }
      if (UpstreamConnectionFailure != false) {
        output.WriteRawTag(48);
        output.WriteBool(UpstreamConnectionFailure);
      }
      if (UpstreamConnectionTermination != false) {
        output.WriteRawTag(56);
        output.WriteBool(UpstreamConnectionTermination);
      }
      if (UpstreamOverflow != false) {
        output.WriteRawTag(64);
        output.WriteBool(UpstreamOverflow);
      }
      if (NoRouteFound != false) {
        output.WriteRawTag(72);
        output.WriteBool(NoRouteFound);
      }
      if (DelayInjected != false) {
        output.WriteRawTag(80);
        output.WriteBool(DelayInjected);
      }
      if (FaultInjected != false) {
        output.WriteRawTag(88);
        output.WriteBool(FaultInjected);
      }
      if (RateLimited != false) {
        output.WriteRawTag(96);
        output.WriteBool(RateLimited);
      }
      if (unauthorizedDetails_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(UnauthorizedDetails);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FailedLocalHealthcheck != false) {
        size += 1 + 1;
      }
      if (NoHealthyUpstream != false) {
        size += 1 + 1;
      }
      if (UpstreamRequestTimeout != false) {
        size += 1 + 1;
      }
      if (LocalReset != false) {
        size += 1 + 1;
      }
      if (UpstreamRemoteReset != false) {
        size += 1 + 1;
      }
      if (UpstreamConnectionFailure != false) {
        size += 1 + 1;
      }
      if (UpstreamConnectionTermination != false) {
        size += 1 + 1;
      }
      if (UpstreamOverflow != false) {
        size += 1 + 1;
      }
      if (NoRouteFound != false) {
        size += 1 + 1;
      }
      if (DelayInjected != false) {
        size += 1 + 1;
      }
      if (FaultInjected != false) {
        size += 1 + 1;
      }
      if (RateLimited != false) {
        size += 1 + 1;
      }
      if (unauthorizedDetails_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnauthorizedDetails);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseFlags other) {
      if (other == null) {
        return;
      }
      if (other.FailedLocalHealthcheck != false) {
        FailedLocalHealthcheck = other.FailedLocalHealthcheck;
      }
      if (other.NoHealthyUpstream != false) {
        NoHealthyUpstream = other.NoHealthyUpstream;
      }
      if (other.UpstreamRequestTimeout != false) {
        UpstreamRequestTimeout = other.UpstreamRequestTimeout;
      }
      if (other.LocalReset != false) {
        LocalReset = other.LocalReset;
      }
      if (other.UpstreamRemoteReset != false) {
        UpstreamRemoteReset = other.UpstreamRemoteReset;
      }
      if (other.UpstreamConnectionFailure != false) {
        UpstreamConnectionFailure = other.UpstreamConnectionFailure;
      }
      if (other.UpstreamConnectionTermination != false) {
        UpstreamConnectionTermination = other.UpstreamConnectionTermination;
      }
      if (other.UpstreamOverflow != false) {
        UpstreamOverflow = other.UpstreamOverflow;
      }
      if (other.NoRouteFound != false) {
        NoRouteFound = other.NoRouteFound;
      }
      if (other.DelayInjected != false) {
        DelayInjected = other.DelayInjected;
      }
      if (other.FaultInjected != false) {
        FaultInjected = other.FaultInjected;
      }
      if (other.RateLimited != false) {
        RateLimited = other.RateLimited;
      }
      if (other.unauthorizedDetails_ != null) {
        if (unauthorizedDetails_ == null) {
          unauthorizedDetails_ = new global::Envoy.Data.Accesslog.V2.ResponseFlags.Types.Unauthorized();
        }
        UnauthorizedDetails.MergeFrom(other.UnauthorizedDetails);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FailedLocalHealthcheck = input.ReadBool();
            break;
          }
          case 16: {
            NoHealthyUpstream = input.ReadBool();
            break;
          }
          case 24: {
            UpstreamRequestTimeout = input.ReadBool();
            break;
          }
          case 32: {
            LocalReset = input.ReadBool();
            break;
          }
          case 40: {
            UpstreamRemoteReset = input.ReadBool();
            break;
          }
          case 48: {
            UpstreamConnectionFailure = input.ReadBool();
            break;
          }
          case 56: {
            UpstreamConnectionTermination = input.ReadBool();
            break;
          }
          case 64: {
            UpstreamOverflow = input.ReadBool();
            break;
          }
          case 72: {
            NoRouteFound = input.ReadBool();
            break;
          }
          case 80: {
            DelayInjected = input.ReadBool();
            break;
          }
          case 88: {
            FaultInjected = input.ReadBool();
            break;
          }
          case 96: {
            RateLimited = input.ReadBool();
            break;
          }
          case 106: {
            if (unauthorizedDetails_ == null) {
              unauthorizedDetails_ = new global::Envoy.Data.Accesslog.V2.ResponseFlags.Types.Unauthorized();
            }
            input.ReadMessage(unauthorizedDetails_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ResponseFlags message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Unauthorized : pb::IMessage<Unauthorized> {
        private static readonly pb::MessageParser<Unauthorized> _parser = new pb::MessageParser<Unauthorized>(() => new Unauthorized());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Unauthorized> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Data.Accesslog.V2.ResponseFlags.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Unauthorized() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Unauthorized(Unauthorized other) : this() {
          reason_ = other.reason_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Unauthorized Clone() {
          return new Unauthorized(this);
        }

        /// <summary>Field number for the "reason" field.</summary>
        public const int ReasonFieldNumber = 1;
        private global::Envoy.Data.Accesslog.V2.ResponseFlags.Types.Unauthorized.Types.Reason reason_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Envoy.Data.Accesslog.V2.ResponseFlags.Types.Unauthorized.Types.Reason Reason {
          get { return reason_; }
          set {
            reason_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Unauthorized);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Unauthorized other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Reason != other.Reason) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Reason != 0) hash ^= Reason.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Reason != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Reason);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Reason != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Unauthorized other) {
          if (other == null) {
            return;
          }
          if (other.Reason != 0) {
            Reason = other.Reason;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                reason_ = (global::Envoy.Data.Accesslog.V2.ResponseFlags.Types.Unauthorized.Types.Reason) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Unauthorized message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Reasons why the request was unauthorized
          /// </summary>
          public enum Reason {
            [pbr::OriginalName("REASON_UNSPECIFIED")] Unspecified = 0,
            /// <summary>
            /// The request was denied by the external authorization service.
            /// </summary>
            [pbr::OriginalName("EXTERNAL_SERVICE")] ExternalService = 1,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// [#not-implemented-hide:]
  /// Properties of a negotiated TLS connection.
  /// </summary>
  public sealed partial class TLSProperties : pb::IMessage<TLSProperties> {
    private static readonly pb::MessageParser<TLSProperties> _parser = new pb::MessageParser<TLSProperties>(() => new TLSProperties());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TLSProperties> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Data.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLSProperties() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLSProperties(TLSProperties other) : this() {
      tlsVersion_ = other.tlsVersion_;
      TlsCipherSuite = other.TlsCipherSuite;
      tlsSniHostname_ = other.tlsSniHostname_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLSProperties Clone() {
      return new TLSProperties(this);
    }

    /// <summary>Field number for the "tls_version" field.</summary>
    public const int TlsVersionFieldNumber = 1;
    private global::Envoy.Data.Accesslog.V2.TLSProperties.Types.TLSVersion tlsVersion_ = 0;
    /// <summary>
    /// Version of TLS that was negotiated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Data.Accesslog.V2.TLSProperties.Types.TLSVersion TlsVersion {
      get { return tlsVersion_; }
      set {
        tlsVersion_ = value;
      }
    }

    /// <summary>Field number for the "tls_cipher_suite" field.</summary>
    public const int TlsCipherSuiteFieldNumber = 2;
    private static readonly pb::FieldCodec<uint?> _single_tlsCipherSuite_codec = pb::FieldCodec.ForStructWrapper<uint>(18);
    private uint? tlsCipherSuite_;
    /// <summary>
    /// TLS cipher suite negotiated during handshake. The value is a
    /// four-digit hex code defined by the IANA TLS Cipher Suite Registry
    /// (e.g. ``009C`` for ``TLS_RSA_WITH_AES_128_GCM_SHA256``).
    ///
    /// Here it is expressed as an integer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? TlsCipherSuite {
      get { return tlsCipherSuite_; }
      set {
        tlsCipherSuite_ = value;
      }
    }

    /// <summary>Field number for the "tls_sni_hostname" field.</summary>
    public const int TlsSniHostnameFieldNumber = 3;
    private string tlsSniHostname_ = "";
    /// <summary>
    /// SNI hostname from handshake.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TlsSniHostname {
      get { return tlsSniHostname_; }
      set {
        tlsSniHostname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TLSProperties);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TLSProperties other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TlsVersion != other.TlsVersion) return false;
      if (TlsCipherSuite != other.TlsCipherSuite) return false;
      if (TlsSniHostname != other.TlsSniHostname) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TlsVersion != 0) hash ^= TlsVersion.GetHashCode();
      if (tlsCipherSuite_ != null) hash ^= TlsCipherSuite.GetHashCode();
      if (TlsSniHostname.Length != 0) hash ^= TlsSniHostname.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TlsVersion != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TlsVersion);
      }
      if (tlsCipherSuite_ != null) {
        _single_tlsCipherSuite_codec.WriteTagAndValue(output, TlsCipherSuite);
      }
      if (TlsSniHostname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TlsSniHostname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TlsVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TlsVersion);
      }
      if (tlsCipherSuite_ != null) {
        size += _single_tlsCipherSuite_codec.CalculateSizeWithTag(TlsCipherSuite);
      }
      if (TlsSniHostname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TlsSniHostname);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TLSProperties other) {
      if (other == null) {
        return;
      }
      if (other.TlsVersion != 0) {
        TlsVersion = other.TlsVersion;
      }
      if (other.tlsCipherSuite_ != null) {
        if (tlsCipherSuite_ == null || other.TlsCipherSuite != 0) {
          TlsCipherSuite = other.TlsCipherSuite;
        }
      }
      if (other.TlsSniHostname.Length != 0) {
        TlsSniHostname = other.TlsSniHostname;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            tlsVersion_ = (global::Envoy.Data.Accesslog.V2.TLSProperties.Types.TLSVersion) input.ReadEnum();
            break;
          }
          case 18: {
            uint? value = _single_tlsCipherSuite_codec.Read(input);
            if (tlsCipherSuite_ == null || value != 0) {
              TlsCipherSuite = value;
            }
            break;
          }
          case 26: {
            TlsSniHostname = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TLSProperties message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TLSVersion {
        [pbr::OriginalName("VERSION_UNSPECIFIED")] VersionUnspecified = 0,
        [pbr::OriginalName("TLSv1")] Tlsv1 = 1,
        [pbr::OriginalName("TLSv1_1")] Tlsv11 = 2,
        [pbr::OriginalName("TLSv1_2")] Tlsv12 = 3,
        [pbr::OriginalName("TLSv1_3")] Tlsv13 = 4,
      }

    }
    #endregion

  }

  public sealed partial class HTTPRequestProperties : pb::IMessage<HTTPRequestProperties> {
    private static readonly pb::MessageParser<HTTPRequestProperties> _parser = new pb::MessageParser<HTTPRequestProperties>(() => new HTTPRequestProperties());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HTTPRequestProperties> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Data.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTTPRequestProperties() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTTPRequestProperties(HTTPRequestProperties other) : this() {
      requestMethod_ = other.requestMethod_;
      scheme_ = other.scheme_;
      authority_ = other.authority_;
      Port = other.Port;
      path_ = other.path_;
      userAgent_ = other.userAgent_;
      referer_ = other.referer_;
      forwardedFor_ = other.forwardedFor_;
      requestId_ = other.requestId_;
      originalPath_ = other.originalPath_;
      requestHeadersBytes_ = other.requestHeadersBytes_;
      requestBodyBytes_ = other.requestBodyBytes_;
      requestHeaders_ = other.requestHeaders_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTTPRequestProperties Clone() {
      return new HTTPRequestProperties(this);
    }

    /// <summary>Field number for the "request_method" field.</summary>
    public const int RequestMethodFieldNumber = 1;
    private global::Envoy.Api.V2.Core.RequestMethod requestMethod_ = 0;
    /// <summary>
    /// The request method (RFC 7231/2616).
    /// [#comment:TODO(htuch): add (validate.rules).enum.defined_only = true once
    /// https://github.com/lyft/protoc-gen-validate/issues/42 is resolved.]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.RequestMethod RequestMethod {
      get { return requestMethod_; }
      set {
        requestMethod_ = value;
      }
    }

    /// <summary>Field number for the "scheme" field.</summary>
    public const int SchemeFieldNumber = 2;
    private string scheme_ = "";
    /// <summary>
    /// The scheme portion of the incoming request URI.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Scheme {
      get { return scheme_; }
      set {
        scheme_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authority" field.</summary>
    public const int AuthorityFieldNumber = 3;
    private string authority_ = "";
    /// <summary>
    /// HTTP/2 ``:authority`` or HTTP/1.1 ``Host`` header value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Authority {
      get { return authority_; }
      set {
        authority_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 4;
    private static readonly pb::FieldCodec<uint?> _single_port_codec = pb::FieldCodec.ForStructWrapper<uint>(34);
    private uint? port_;
    /// <summary>
    /// The port of the incoming request URI
    /// (unused currently, as port is composed onto authority).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 5;
    private string path_ = "";
    /// <summary>
    /// The path portion from the incoming request URI.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_agent" field.</summary>
    public const int UserAgentFieldNumber = 6;
    private string userAgent_ = "";
    /// <summary>
    /// Value of the ``User-Agent`` request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserAgent {
      get { return userAgent_; }
      set {
        userAgent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "referer" field.</summary>
    public const int RefererFieldNumber = 7;
    private string referer_ = "";
    /// <summary>
    /// Value of the ``Referer`` request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Referer {
      get { return referer_; }
      set {
        referer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "forwarded_for" field.</summary>
    public const int ForwardedForFieldNumber = 8;
    private string forwardedFor_ = "";
    /// <summary>
    /// Value of the ``X-Forwarded-For`` request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ForwardedFor {
      get { return forwardedFor_; }
      set {
        forwardedFor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 9;
    private string requestId_ = "";
    /// <summary>
    /// Value of the ``X-Request-Id`` request header
    ///
    /// This header is used by Envoy to uniquely identify a request.
    /// It will be generated for all external requests and internal requests that
    /// do not already have a request ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestId {
      get { return requestId_; }
      set {
        requestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "original_path" field.</summary>
    public const int OriginalPathFieldNumber = 10;
    private string originalPath_ = "";
    /// <summary>
    /// Value of the ``X-Envoy-Original-Path`` request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OriginalPath {
      get { return originalPath_; }
      set {
        originalPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "request_headers_bytes" field.</summary>
    public const int RequestHeadersBytesFieldNumber = 11;
    private ulong requestHeadersBytes_;
    /// <summary>
    /// Size of the HTTP request headers in bytes.
    ///
    /// This value is captured from the OSI layer 7 perspective, i.e. it does not
    /// include overhead from framing or encoding at other networking layers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestHeadersBytes {
      get { return requestHeadersBytes_; }
      set {
        requestHeadersBytes_ = value;
      }
    }

    /// <summary>Field number for the "request_body_bytes" field.</summary>
    public const int RequestBodyBytesFieldNumber = 12;
    private ulong requestBodyBytes_;
    /// <summary>
    /// Size of the HTTP request body in bytes.
    ///
    /// This value is captured from the OSI layer 7 perspective, i.e. it does not
    /// include overhead from framing or encoding at other networking layers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestBodyBytes {
      get { return requestBodyBytes_; }
      set {
        requestBodyBytes_ = value;
      }
    }

    /// <summary>Field number for the "request_headers" field.</summary>
    public const int RequestHeadersFieldNumber = 13;
    private static readonly pbc::MapField<string, string>.Codec _map_requestHeaders_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 106);
    private readonly pbc::MapField<string, string> requestHeaders_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Map of additional headers that have been configured to be logged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> RequestHeaders {
      get { return requestHeaders_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HTTPRequestProperties);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HTTPRequestProperties other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestMethod != other.RequestMethod) return false;
      if (Scheme != other.Scheme) return false;
      if (Authority != other.Authority) return false;
      if (Port != other.Port) return false;
      if (Path != other.Path) return false;
      if (UserAgent != other.UserAgent) return false;
      if (Referer != other.Referer) return false;
      if (ForwardedFor != other.ForwardedFor) return false;
      if (RequestId != other.RequestId) return false;
      if (OriginalPath != other.OriginalPath) return false;
      if (RequestHeadersBytes != other.RequestHeadersBytes) return false;
      if (RequestBodyBytes != other.RequestBodyBytes) return false;
      if (!RequestHeaders.Equals(other.RequestHeaders)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestMethod != 0) hash ^= RequestMethod.GetHashCode();
      if (Scheme.Length != 0) hash ^= Scheme.GetHashCode();
      if (Authority.Length != 0) hash ^= Authority.GetHashCode();
      if (port_ != null) hash ^= Port.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (UserAgent.Length != 0) hash ^= UserAgent.GetHashCode();
      if (Referer.Length != 0) hash ^= Referer.GetHashCode();
      if (ForwardedFor.Length != 0) hash ^= ForwardedFor.GetHashCode();
      if (RequestId.Length != 0) hash ^= RequestId.GetHashCode();
      if (OriginalPath.Length != 0) hash ^= OriginalPath.GetHashCode();
      if (RequestHeadersBytes != 0UL) hash ^= RequestHeadersBytes.GetHashCode();
      if (RequestBodyBytes != 0UL) hash ^= RequestBodyBytes.GetHashCode();
      hash ^= RequestHeaders.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestMethod != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RequestMethod);
      }
      if (Scheme.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Scheme);
      }
      if (Authority.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Authority);
      }
      if (port_ != null) {
        _single_port_codec.WriteTagAndValue(output, Port);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Path);
      }
      if (UserAgent.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(UserAgent);
      }
      if (Referer.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Referer);
      }
      if (ForwardedFor.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ForwardedFor);
      }
      if (RequestId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(RequestId);
      }
      if (OriginalPath.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(OriginalPath);
      }
      if (RequestHeadersBytes != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(RequestHeadersBytes);
      }
      if (RequestBodyBytes != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(RequestBodyBytes);
      }
      requestHeaders_.WriteTo(output, _map_requestHeaders_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestMethod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequestMethod);
      }
      if (Scheme.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Scheme);
      }
      if (Authority.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Authority);
      }
      if (port_ != null) {
        size += _single_port_codec.CalculateSizeWithTag(Port);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (UserAgent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserAgent);
      }
      if (Referer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Referer);
      }
      if (ForwardedFor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ForwardedFor);
      }
      if (RequestId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestId);
      }
      if (OriginalPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OriginalPath);
      }
      if (RequestHeadersBytes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestHeadersBytes);
      }
      if (RequestBodyBytes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestBodyBytes);
      }
      size += requestHeaders_.CalculateSize(_map_requestHeaders_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HTTPRequestProperties other) {
      if (other == null) {
        return;
      }
      if (other.RequestMethod != 0) {
        RequestMethod = other.RequestMethod;
      }
      if (other.Scheme.Length != 0) {
        Scheme = other.Scheme;
      }
      if (other.Authority.Length != 0) {
        Authority = other.Authority;
      }
      if (other.port_ != null) {
        if (port_ == null || other.Port != 0) {
          Port = other.Port;
        }
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.UserAgent.Length != 0) {
        UserAgent = other.UserAgent;
      }
      if (other.Referer.Length != 0) {
        Referer = other.Referer;
      }
      if (other.ForwardedFor.Length != 0) {
        ForwardedFor = other.ForwardedFor;
      }
      if (other.RequestId.Length != 0) {
        RequestId = other.RequestId;
      }
      if (other.OriginalPath.Length != 0) {
        OriginalPath = other.OriginalPath;
      }
      if (other.RequestHeadersBytes != 0UL) {
        RequestHeadersBytes = other.RequestHeadersBytes;
      }
      if (other.RequestBodyBytes != 0UL) {
        RequestBodyBytes = other.RequestBodyBytes;
      }
      requestHeaders_.Add(other.requestHeaders_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            requestMethod_ = (global::Envoy.Api.V2.Core.RequestMethod) input.ReadEnum();
            break;
          }
          case 18: {
            Scheme = input.ReadString();
            break;
          }
          case 26: {
            Authority = input.ReadString();
            break;
          }
          case 34: {
            uint? value = _single_port_codec.Read(input);
            if (port_ == null || value != 0) {
              Port = value;
            }
            break;
          }
          case 42: {
            Path = input.ReadString();
            break;
          }
          case 50: {
            UserAgent = input.ReadString();
            break;
          }
          case 58: {
            Referer = input.ReadString();
            break;
          }
          case 66: {
            ForwardedFor = input.ReadString();
            break;
          }
          case 74: {
            RequestId = input.ReadString();
            break;
          }
          case 82: {
            OriginalPath = input.ReadString();
            break;
          }
          case 88: {
            RequestHeadersBytes = input.ReadUInt64();
            break;
          }
          case 96: {
            RequestBodyBytes = input.ReadUInt64();
            break;
          }
          case 106: {
            requestHeaders_.AddEntriesFrom(input, _map_requestHeaders_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HTTPResponseProperties : pb::IMessage<HTTPResponseProperties> {
    private static readonly pb::MessageParser<HTTPResponseProperties> _parser = new pb::MessageParser<HTTPResponseProperties>(() => new HTTPResponseProperties());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HTTPResponseProperties> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Data.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTTPResponseProperties() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTTPResponseProperties(HTTPResponseProperties other) : this() {
      ResponseCode = other.ResponseCode;
      responseHeadersBytes_ = other.responseHeadersBytes_;
      responseBodyBytes_ = other.responseBodyBytes_;
      responseHeaders_ = other.responseHeaders_.Clone();
      responseTrailers_ = other.responseTrailers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTTPResponseProperties Clone() {
      return new HTTPResponseProperties(this);
    }

    /// <summary>Field number for the "response_code" field.</summary>
    public const int ResponseCodeFieldNumber = 1;
    private static readonly pb::FieldCodec<uint?> _single_responseCode_codec = pb::FieldCodec.ForStructWrapper<uint>(10);
    private uint? responseCode_;
    /// <summary>
    /// The HTTP response code returned by Envoy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? ResponseCode {
      get { return responseCode_; }
      set {
        responseCode_ = value;
      }
    }

    /// <summary>Field number for the "response_headers_bytes" field.</summary>
    public const int ResponseHeadersBytesFieldNumber = 2;
    private ulong responseHeadersBytes_;
    /// <summary>
    /// Size of the HTTP response headers in bytes.
    ///
    /// This value is captured from the OSI layer 7 perspective, i.e. it does not
    /// include overhead from framing or encoding at other networking layers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ResponseHeadersBytes {
      get { return responseHeadersBytes_; }
      set {
        responseHeadersBytes_ = value;
      }
    }

    /// <summary>Field number for the "response_body_bytes" field.</summary>
    public const int ResponseBodyBytesFieldNumber = 3;
    private ulong responseBodyBytes_;
    /// <summary>
    /// Size of the HTTP response body in bytes.
    ///
    /// This value is captured from the OSI layer 7 perspective, i.e. it does not
    /// include overhead from framing or encoding at other networking layers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ResponseBodyBytes {
      get { return responseBodyBytes_; }
      set {
        responseBodyBytes_ = value;
      }
    }

    /// <summary>Field number for the "response_headers" field.</summary>
    public const int ResponseHeadersFieldNumber = 4;
    private static readonly pbc::MapField<string, string>.Codec _map_responseHeaders_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 34);
    private readonly pbc::MapField<string, string> responseHeaders_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Map of additional headers configured to be logged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> ResponseHeaders {
      get { return responseHeaders_; }
    }

    /// <summary>Field number for the "response_trailers" field.</summary>
    public const int ResponseTrailersFieldNumber = 5;
    private static readonly pbc::MapField<string, string>.Codec _map_responseTrailers_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 42);
    private readonly pbc::MapField<string, string> responseTrailers_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Map of trailers configured to be logged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> ResponseTrailers {
      get { return responseTrailers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HTTPResponseProperties);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HTTPResponseProperties other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResponseCode != other.ResponseCode) return false;
      if (ResponseHeadersBytes != other.ResponseHeadersBytes) return false;
      if (ResponseBodyBytes != other.ResponseBodyBytes) return false;
      if (!ResponseHeaders.Equals(other.ResponseHeaders)) return false;
      if (!ResponseTrailers.Equals(other.ResponseTrailers)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (responseCode_ != null) hash ^= ResponseCode.GetHashCode();
      if (ResponseHeadersBytes != 0UL) hash ^= ResponseHeadersBytes.GetHashCode();
      if (ResponseBodyBytes != 0UL) hash ^= ResponseBodyBytes.GetHashCode();
      hash ^= ResponseHeaders.GetHashCode();
      hash ^= ResponseTrailers.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (responseCode_ != null) {
        _single_responseCode_codec.WriteTagAndValue(output, ResponseCode);
      }
      if (ResponseHeadersBytes != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ResponseHeadersBytes);
      }
      if (ResponseBodyBytes != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ResponseBodyBytes);
      }
      responseHeaders_.WriteTo(output, _map_responseHeaders_codec);
      responseTrailers_.WriteTo(output, _map_responseTrailers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (responseCode_ != null) {
        size += _single_responseCode_codec.CalculateSizeWithTag(ResponseCode);
      }
      if (ResponseHeadersBytes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ResponseHeadersBytes);
      }
      if (ResponseBodyBytes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ResponseBodyBytes);
      }
      size += responseHeaders_.CalculateSize(_map_responseHeaders_codec);
      size += responseTrailers_.CalculateSize(_map_responseTrailers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HTTPResponseProperties other) {
      if (other == null) {
        return;
      }
      if (other.responseCode_ != null) {
        if (responseCode_ == null || other.ResponseCode != 0) {
          ResponseCode = other.ResponseCode;
        }
      }
      if (other.ResponseHeadersBytes != 0UL) {
        ResponseHeadersBytes = other.ResponseHeadersBytes;
      }
      if (other.ResponseBodyBytes != 0UL) {
        ResponseBodyBytes = other.ResponseBodyBytes;
      }
      responseHeaders_.Add(other.responseHeaders_);
      responseTrailers_.Add(other.responseTrailers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            uint? value = _single_responseCode_codec.Read(input);
            if (responseCode_ == null || value != 0) {
              ResponseCode = value;
            }
            break;
          }
          case 16: {
            ResponseHeadersBytes = input.ReadUInt64();
            break;
          }
          case 24: {
            ResponseBodyBytes = input.ReadUInt64();
            break;
          }
          case 34: {
            responseHeaders_.AddEntriesFrom(input, _map_responseHeaders_codec);
            break;
          }
          case 42: {
            responseTrailers_.AddEntriesFrom(input, _map_responseTrailers_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
