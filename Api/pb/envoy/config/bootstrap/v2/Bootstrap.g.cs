// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/config/bootstrap/v2/bootstrap.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Config.Bootstrap.V2 {

  /// <summary>Holder for reflection information generated from envoy/config/bootstrap/v2/bootstrap.proto</summary>
  public static partial class BootstrapReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/config/bootstrap/v2/bootstrap.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BootstrapReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CillbnZveS9jb25maWcvYm9vdHN0cmFwL3YyL2Jvb3RzdHJhcC5wcm90bxIZ",
            "ZW52b3kuY29uZmlnLmJvb3RzdHJhcC52MhofZW52b3kvYXBpL3YyL2NvcmUv",
            "YWRkcmVzcy5wcm90bxocZW52b3kvYXBpL3YyL2NvcmUvYmFzZS5wcm90bxoc",
            "ZW52b3kvYXBpL3YyL2F1dGgvY2VydC5wcm90bxolZW52b3kvYXBpL3YyL2Nv",
            "cmUvY29uZmlnX3NvdXJjZS5wcm90bxoWZW52b3kvYXBpL3YyL2Nkcy5wcm90",
            "bxoWZW52b3kvYXBpL3YyL2xkcy5wcm90bxohZW52b3kvY29uZmlnL3RyYWNl",
            "L3YyL3RyYWNlLnByb3RvGiNlbnZveS9jb25maWcvbWV0cmljcy92Mi9zdGF0",
            "cy5wcm90bxojZW52b3kvY29uZmlnL3JhdGVsaW1pdC92Mi9ybHMucHJvdG8a",
            "Hmdvb2dsZS9wcm90b2J1Zi9kdXJhdGlvbi5wcm90bxoXdmFsaWRhdGUvdmFs",
            "aWRhdGUucHJvdG8aFGdvZ29wcm90by9nb2dvLnByb3RvIo4KCglCb290c3Ry",
            "YXASJQoEbm9kZRgBIAEoCzIXLmVudm95LmFwaS52Mi5jb3JlLk5vZGUSTgoQ",
            "c3RhdGljX3Jlc291cmNlcxgCIAEoCzI0LmVudm95LmNvbmZpZy5ib290c3Ry",
            "YXAudjIuQm9vdHN0cmFwLlN0YXRpY1Jlc291cmNlcxJQChFkeW5hbWljX3Jl",
            "c291cmNlcxgDIAEoCzI1LmVudm95LmNvbmZpZy5ib290c3RyYXAudjIuQm9v",
            "dHN0cmFwLkR5bmFtaWNSZXNvdXJjZXMSQgoPY2x1c3Rlcl9tYW5hZ2VyGAQg",
            "ASgLMikuZW52b3kuY29uZmlnLmJvb3RzdHJhcC52Mi5DbHVzdGVyTWFuYWdl",
            "chISCgpmbGFnc19wYXRoGAUgASgJEjcKC3N0YXRzX3NpbmtzGAYgAygLMiIu",
            "ZW52b3kuY29uZmlnLm1ldHJpY3MudjIuU3RhdHNTaW5rEjoKDHN0YXRzX2Nv",
            "bmZpZxgNIAEoCzIkLmVudm95LmNvbmZpZy5tZXRyaWNzLnYyLlN0YXRzQ29u",
            "ZmlnEj0KFHN0YXRzX2ZsdXNoX2ludGVydmFsGAcgASgLMhkuZ29vZ2xlLnBy",
            "b3RvYnVmLkR1cmF0aW9uQgSY3x8BEjUKCHdhdGNoZG9nGAggASgLMiMuZW52",
            "b3kuY29uZmlnLmJvb3RzdHJhcC52Mi5XYXRjaGRvZxIvCgd0cmFjaW5nGAkg",
            "ASgLMh4uZW52b3kuY29uZmlnLnRyYWNlLnYyLlRyYWNpbmcSTQoScmF0ZV9s",
            "aW1pdF9zZXJ2aWNlGAogASgLMjEuZW52b3kuY29uZmlnLnJhdGVsaW1pdC52",
            "Mi5SYXRlTGltaXRTZXJ2aWNlQ29uZmlnEjMKB3J1bnRpbWUYCyABKAsyIi5l",
            "bnZveS5jb25maWcuYm9vdHN0cmFwLnYyLlJ1bnRpbWUSPwoFYWRtaW4YDCAB",
            "KAsyIC5lbnZveS5jb25maWcuYm9vdHN0cmFwLnYyLkFkbWluQg666cADBYoB",
            "AhAByN4fABqjAQoPU3RhdGljUmVzb3VyY2VzEi8KCWxpc3RlbmVycxgBIAMo",
            "CzIWLmVudm95LmFwaS52Mi5MaXN0ZW5lckIEyN4fABItCghjbHVzdGVycxgC",
            "IAMoCzIVLmVudm95LmFwaS52Mi5DbHVzdGVyQgTI3h8AEjAKB3NlY3JldHMY",
            "AyADKAsyGS5lbnZveS5hcGkudjIuYXV0aC5TZWNyZXRCBMjeHwAa2AIKEER5",
            "bmFtaWNSZXNvdXJjZXMSMwoKbGRzX2NvbmZpZxgBIAEoCzIfLmVudm95LmFw",
            "aS52Mi5jb3JlLkNvbmZpZ1NvdXJjZRIzCgpjZHNfY29uZmlnGAIgASgLMh8u",
            "ZW52b3kuYXBpLnYyLmNvcmUuQ29uZmlnU291cmNlEjYKCmFkc19jb25maWcY",
            "AyABKAsyIi5lbnZveS5hcGkudjIuY29yZS5BcGlDb25maWdTb3VyY2USXQoN",
            "ZGVwcmVjYXRlZF92MRgEIAEoCzJCLmVudm95LmNvbmZpZy5ib290c3RyYXAu",
            "djIuQm9vdHN0cmFwLkR5bmFtaWNSZXNvdXJjZXMuRGVwcmVjYXRlZFYxQgIY",
            "ARpDCgxEZXByZWNhdGVkVjESMwoKc2RzX2NvbmZpZxgBIAEoCzIfLmVudm95",
            "LmFwaS52Mi5jb3JlLkNvbmZpZ1NvdXJjZSJ+CgVBZG1pbhIiCg9hY2Nlc3Nf",
            "bG9nX3BhdGgYASABKAlCCbrpwAMEcgIgARIUCgxwcm9maWxlX3BhdGgYAiAB",
            "KAkSOwoHYWRkcmVzcxgDIAEoCzIaLmVudm95LmFwaS52Mi5jb3JlLkFkZHJl",
            "c3NCDrrpwAMFigECEAHI3h8AIqsCCg5DbHVzdGVyTWFuYWdlchIaChJsb2Nh",
            "bF9jbHVzdGVyX25hbWUYASABKAkSVQoRb3V0bGllcl9kZXRlY3Rpb24YAiAB",
            "KAsyOi5lbnZveS5jb25maWcuYm9vdHN0cmFwLnYyLkNsdXN0ZXJNYW5hZ2Vy",
            "Lk91dGxpZXJEZXRlY3Rpb24SOwoUdXBzdHJlYW1fYmluZF9jb25maWcYAyAB",
            "KAsyHS5lbnZveS5hcGkudjIuY29yZS5CaW5kQ29uZmlnEj0KEWxvYWRfc3Rh",
            "dHNfY29uZmlnGAQgASgLMiIuZW52b3kuYXBpLnYyLmNvcmUuQXBpQ29uZmln",
            "U291cmNlGioKEE91dGxpZXJEZXRlY3Rpb24SFgoOZXZlbnRfbG9nX3BhdGgY",
            "ASABKAki1wEKCFdhdGNoZG9nEi8KDG1pc3NfdGltZW91dBgBIAEoCzIZLmdv",
            "b2dsZS5wcm90b2J1Zi5EdXJhdGlvbhIzChBtZWdhbWlzc190aW1lb3V0GAIg",
            "ASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEi8KDGtpbGxfdGltZW91",
            "dBgDIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbhI0ChFtdWx0aWtp",
            "bGxfdGltZW91dBgEIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbiJf",
            "CgdSdW50aW1lEh8KDHN5bWxpbmtfcm9vdBgBIAEoCUIJuunAAwRyAiABEhQK",
            "DHN1YmRpcmVjdG9yeRgCIAEoCRIdChVvdmVycmlkZV9zdWJkaXJlY3RvcnkY",
            "AyABKAlCBFoCdjJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Api.V2.Core.AddressReflection.Descriptor, global::Envoy.Api.V2.Core.BaseReflection.Descriptor, global::Envoy.Api.V2.Auth.CertReflection.Descriptor, global::Envoy.Api.V2.Core.ConfigSourceReflection.Descriptor, global::Envoy.Api.V2.CdsReflection.Descriptor, global::Envoy.Api.V2.LdsReflection.Descriptor, global::Envoy.Config.Trace.V2.TraceReflection.Descriptor, global::Envoy.Config.Metrics.V2.StatsReflection.Descriptor, global::Envoy.Config.Ratelimit.V2.RlsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, global::Gogoproto.GogoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Bootstrap.V2.Bootstrap), global::Envoy.Config.Bootstrap.V2.Bootstrap.Parser, new[]{ "Node", "StaticResources", "DynamicResources", "ClusterManager", "FlagsPath", "StatsSinks", "StatsConfig", "StatsFlushInterval", "Watchdog", "Tracing", "RateLimitService", "Runtime", "Admin" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Bootstrap.V2.Bootstrap.Types.StaticResources), global::Envoy.Config.Bootstrap.V2.Bootstrap.Types.StaticResources.Parser, new[]{ "Listeners", "Clusters", "Secrets" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Bootstrap.V2.Bootstrap.Types.DynamicResources), global::Envoy.Config.Bootstrap.V2.Bootstrap.Types.DynamicResources.Parser, new[]{ "LdsConfig", "CdsConfig", "AdsConfig", "DeprecatedV1" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Bootstrap.V2.Bootstrap.Types.DynamicResources.Types.DeprecatedV1), global::Envoy.Config.Bootstrap.V2.Bootstrap.Types.DynamicResources.Types.DeprecatedV1.Parser, new[]{ "SdsConfig" }, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Bootstrap.V2.Admin), global::Envoy.Config.Bootstrap.V2.Admin.Parser, new[]{ "AccessLogPath", "ProfilePath", "Address" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Bootstrap.V2.ClusterManager), global::Envoy.Config.Bootstrap.V2.ClusterManager.Parser, new[]{ "LocalClusterName", "OutlierDetection", "UpstreamBindConfig", "LoadStatsConfig" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Bootstrap.V2.ClusterManager.Types.OutlierDetection), global::Envoy.Config.Bootstrap.V2.ClusterManager.Types.OutlierDetection.Parser, new[]{ "EventLogPath" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Bootstrap.V2.Watchdog), global::Envoy.Config.Bootstrap.V2.Watchdog.Parser, new[]{ "MissTimeout", "MegamissTimeout", "KillTimeout", "MultikillTimeout" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Bootstrap.V2.Runtime), global::Envoy.Config.Bootstrap.V2.Runtime.Parser, new[]{ "SymlinkRoot", "Subdirectory", "OverrideSubdirectory" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Bootstrap :ref:`configuration overview &lt;config_overview_v2_bootstrap>`.
  /// </summary>
  public sealed partial class Bootstrap : pb::IMessage<Bootstrap> {
    private static readonly pb::MessageParser<Bootstrap> _parser = new pb::MessageParser<Bootstrap>(() => new Bootstrap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Bootstrap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Bootstrap.V2.BootstrapReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bootstrap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bootstrap(Bootstrap other) : this() {
      Node = other.node_ != null ? other.Node.Clone() : null;
      StaticResources = other.staticResources_ != null ? other.StaticResources.Clone() : null;
      DynamicResources = other.dynamicResources_ != null ? other.DynamicResources.Clone() : null;
      ClusterManager = other.clusterManager_ != null ? other.ClusterManager.Clone() : null;
      flagsPath_ = other.flagsPath_;
      statsSinks_ = other.statsSinks_.Clone();
      StatsConfig = other.statsConfig_ != null ? other.StatsConfig.Clone() : null;
      StatsFlushInterval = other.statsFlushInterval_ != null ? other.StatsFlushInterval.Clone() : null;
      Watchdog = other.watchdog_ != null ? other.Watchdog.Clone() : null;
      Tracing = other.tracing_ != null ? other.Tracing.Clone() : null;
      RateLimitService = other.rateLimitService_ != null ? other.RateLimitService.Clone() : null;
      Runtime = other.runtime_ != null ? other.Runtime.Clone() : null;
      Admin = other.admin_ != null ? other.Admin.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bootstrap Clone() {
      return new Bootstrap(this);
    }

    /// <summary>Field number for the "node" field.</summary>
    public const int NodeFieldNumber = 1;
    private global::Envoy.Api.V2.Core.Node node_;
    /// <summary>
    /// Node identity to present to the management server and for instance
    /// identification purposes (e.g. in generated headers).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.Node Node {
      get { return node_; }
      set {
        node_ = value;
      }
    }

    /// <summary>Field number for the "static_resources" field.</summary>
    public const int StaticResourcesFieldNumber = 2;
    private global::Envoy.Config.Bootstrap.V2.Bootstrap.Types.StaticResources staticResources_;
    /// <summary>
    /// Statically specified resources.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Bootstrap.V2.Bootstrap.Types.StaticResources StaticResources {
      get { return staticResources_; }
      set {
        staticResources_ = value;
      }
    }

    /// <summary>Field number for the "dynamic_resources" field.</summary>
    public const int DynamicResourcesFieldNumber = 3;
    private global::Envoy.Config.Bootstrap.V2.Bootstrap.Types.DynamicResources dynamicResources_;
    /// <summary>
    /// xDS configuration sources.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Bootstrap.V2.Bootstrap.Types.DynamicResources DynamicResources {
      get { return dynamicResources_; }
      set {
        dynamicResources_ = value;
      }
    }

    /// <summary>Field number for the "cluster_manager" field.</summary>
    public const int ClusterManagerFieldNumber = 4;
    private global::Envoy.Config.Bootstrap.V2.ClusterManager clusterManager_;
    /// <summary>
    /// Configuration for the cluster manager which owns all upstream clusters
    /// within the server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Bootstrap.V2.ClusterManager ClusterManager {
      get { return clusterManager_; }
      set {
        clusterManager_ = value;
      }
    }

    /// <summary>Field number for the "flags_path" field.</summary>
    public const int FlagsPathFieldNumber = 5;
    private string flagsPath_ = "";
    /// <summary>
    /// Optional file system path to search for startup flag files.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FlagsPath {
      get { return flagsPath_; }
      set {
        flagsPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stats_sinks" field.</summary>
    public const int StatsSinksFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Envoy.Config.Metrics.V2.StatsSink> _repeated_statsSinks_codec
        = pb::FieldCodec.ForMessage(50, global::Envoy.Config.Metrics.V2.StatsSink.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Config.Metrics.V2.StatsSink> statsSinks_ = new pbc::RepeatedField<global::Envoy.Config.Metrics.V2.StatsSink>();
    /// <summary>
    /// Optional set of stats sinks.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Envoy.Config.Metrics.V2.StatsSink> StatsSinks {
      get { return statsSinks_; }
    }

    /// <summary>Field number for the "stats_config" field.</summary>
    public const int StatsConfigFieldNumber = 13;
    private global::Envoy.Config.Metrics.V2.StatsConfig statsConfig_;
    /// <summary>
    /// Configuration for internal processing of stats.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Metrics.V2.StatsConfig StatsConfig {
      get { return statsConfig_; }
      set {
        statsConfig_ = value;
      }
    }

    /// <summary>Field number for the "stats_flush_interval" field.</summary>
    public const int StatsFlushIntervalFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Duration statsFlushInterval_;
    /// <summary>
    /// Optional duration between flushes to configured stats sinks. For
    /// performance reasons Envoy latches counters and only flushes counters and
    /// gauges at a periodic interval. If not specified the default is 5000ms (5
    /// seconds).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration StatsFlushInterval {
      get { return statsFlushInterval_; }
      set {
        statsFlushInterval_ = value;
      }
    }

    /// <summary>Field number for the "watchdog" field.</summary>
    public const int WatchdogFieldNumber = 8;
    private global::Envoy.Config.Bootstrap.V2.Watchdog watchdog_;
    /// <summary>
    /// Optional watchdog configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Bootstrap.V2.Watchdog Watchdog {
      get { return watchdog_; }
      set {
        watchdog_ = value;
      }
    }

    /// <summary>Field number for the "tracing" field.</summary>
    public const int TracingFieldNumber = 9;
    private global::Envoy.Config.Trace.V2.Tracing tracing_;
    /// <summary>
    /// Configuration for an external tracing provider. If not specified, no
    /// tracing will be performed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Trace.V2.Tracing Tracing {
      get { return tracing_; }
      set {
        tracing_ = value;
      }
    }

    /// <summary>Field number for the "rate_limit_service" field.</summary>
    public const int RateLimitServiceFieldNumber = 10;
    private global::Envoy.Config.Ratelimit.V2.RateLimitServiceConfig rateLimitService_;
    /// <summary>
    /// Configuration for an external rate limit service provider. If not
    /// specified, any calls to the rate limit service will immediately return
    /// success.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Ratelimit.V2.RateLimitServiceConfig RateLimitService {
      get { return rateLimitService_; }
      set {
        rateLimitService_ = value;
      }
    }

    /// <summary>Field number for the "runtime" field.</summary>
    public const int RuntimeFieldNumber = 11;
    private global::Envoy.Config.Bootstrap.V2.Runtime runtime_;
    /// <summary>
    /// Configuration for the runtime configuration provider. If not specified, a
    /// “null” provider will be used which will result in all defaults being used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Bootstrap.V2.Runtime Runtime {
      get { return runtime_; }
      set {
        runtime_ = value;
      }
    }

    /// <summary>Field number for the "admin" field.</summary>
    public const int AdminFieldNumber = 12;
    private global::Envoy.Config.Bootstrap.V2.Admin admin_;
    /// <summary>
    /// Configuration for the local administration HTTP server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Bootstrap.V2.Admin Admin {
      get { return admin_; }
      set {
        admin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Bootstrap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Bootstrap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Node, other.Node)) return false;
      if (!object.Equals(StaticResources, other.StaticResources)) return false;
      if (!object.Equals(DynamicResources, other.DynamicResources)) return false;
      if (!object.Equals(ClusterManager, other.ClusterManager)) return false;
      if (FlagsPath != other.FlagsPath) return false;
      if(!statsSinks_.Equals(other.statsSinks_)) return false;
      if (!object.Equals(StatsConfig, other.StatsConfig)) return false;
      if (!object.Equals(StatsFlushInterval, other.StatsFlushInterval)) return false;
      if (!object.Equals(Watchdog, other.Watchdog)) return false;
      if (!object.Equals(Tracing, other.Tracing)) return false;
      if (!object.Equals(RateLimitService, other.RateLimitService)) return false;
      if (!object.Equals(Runtime, other.Runtime)) return false;
      if (!object.Equals(Admin, other.Admin)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (node_ != null) hash ^= Node.GetHashCode();
      if (staticResources_ != null) hash ^= StaticResources.GetHashCode();
      if (dynamicResources_ != null) hash ^= DynamicResources.GetHashCode();
      if (clusterManager_ != null) hash ^= ClusterManager.GetHashCode();
      if (FlagsPath.Length != 0) hash ^= FlagsPath.GetHashCode();
      hash ^= statsSinks_.GetHashCode();
      if (statsConfig_ != null) hash ^= StatsConfig.GetHashCode();
      if (statsFlushInterval_ != null) hash ^= StatsFlushInterval.GetHashCode();
      if (watchdog_ != null) hash ^= Watchdog.GetHashCode();
      if (tracing_ != null) hash ^= Tracing.GetHashCode();
      if (rateLimitService_ != null) hash ^= RateLimitService.GetHashCode();
      if (runtime_ != null) hash ^= Runtime.GetHashCode();
      if (admin_ != null) hash ^= Admin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (node_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Node);
      }
      if (staticResources_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StaticResources);
      }
      if (dynamicResources_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DynamicResources);
      }
      if (clusterManager_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ClusterManager);
      }
      if (FlagsPath.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FlagsPath);
      }
      statsSinks_.WriteTo(output, _repeated_statsSinks_codec);
      if (statsFlushInterval_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(StatsFlushInterval);
      }
      if (watchdog_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Watchdog);
      }
      if (tracing_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Tracing);
      }
      if (rateLimitService_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(RateLimitService);
      }
      if (runtime_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Runtime);
      }
      if (admin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Admin);
      }
      if (statsConfig_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(StatsConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (node_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node);
      }
      if (staticResources_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StaticResources);
      }
      if (dynamicResources_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DynamicResources);
      }
      if (clusterManager_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClusterManager);
      }
      if (FlagsPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FlagsPath);
      }
      size += statsSinks_.CalculateSize(_repeated_statsSinks_codec);
      if (statsConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatsConfig);
      }
      if (statsFlushInterval_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatsFlushInterval);
      }
      if (watchdog_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Watchdog);
      }
      if (tracing_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tracing);
      }
      if (rateLimitService_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RateLimitService);
      }
      if (runtime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Runtime);
      }
      if (admin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Admin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Bootstrap other) {
      if (other == null) {
        return;
      }
      if (other.node_ != null) {
        if (node_ == null) {
          node_ = new global::Envoy.Api.V2.Core.Node();
        }
        Node.MergeFrom(other.Node);
      }
      if (other.staticResources_ != null) {
        if (staticResources_ == null) {
          staticResources_ = new global::Envoy.Config.Bootstrap.V2.Bootstrap.Types.StaticResources();
        }
        StaticResources.MergeFrom(other.StaticResources);
      }
      if (other.dynamicResources_ != null) {
        if (dynamicResources_ == null) {
          dynamicResources_ = new global::Envoy.Config.Bootstrap.V2.Bootstrap.Types.DynamicResources();
        }
        DynamicResources.MergeFrom(other.DynamicResources);
      }
      if (other.clusterManager_ != null) {
        if (clusterManager_ == null) {
          clusterManager_ = new global::Envoy.Config.Bootstrap.V2.ClusterManager();
        }
        ClusterManager.MergeFrom(other.ClusterManager);
      }
      if (other.FlagsPath.Length != 0) {
        FlagsPath = other.FlagsPath;
      }
      statsSinks_.Add(other.statsSinks_);
      if (other.statsConfig_ != null) {
        if (statsConfig_ == null) {
          statsConfig_ = new global::Envoy.Config.Metrics.V2.StatsConfig();
        }
        StatsConfig.MergeFrom(other.StatsConfig);
      }
      if (other.statsFlushInterval_ != null) {
        if (statsFlushInterval_ == null) {
          statsFlushInterval_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        StatsFlushInterval.MergeFrom(other.StatsFlushInterval);
      }
      if (other.watchdog_ != null) {
        if (watchdog_ == null) {
          watchdog_ = new global::Envoy.Config.Bootstrap.V2.Watchdog();
        }
        Watchdog.MergeFrom(other.Watchdog);
      }
      if (other.tracing_ != null) {
        if (tracing_ == null) {
          tracing_ = new global::Envoy.Config.Trace.V2.Tracing();
        }
        Tracing.MergeFrom(other.Tracing);
      }
      if (other.rateLimitService_ != null) {
        if (rateLimitService_ == null) {
          rateLimitService_ = new global::Envoy.Config.Ratelimit.V2.RateLimitServiceConfig();
        }
        RateLimitService.MergeFrom(other.RateLimitService);
      }
      if (other.runtime_ != null) {
        if (runtime_ == null) {
          runtime_ = new global::Envoy.Config.Bootstrap.V2.Runtime();
        }
        Runtime.MergeFrom(other.Runtime);
      }
      if (other.admin_ != null) {
        if (admin_ == null) {
          admin_ = new global::Envoy.Config.Bootstrap.V2.Admin();
        }
        Admin.MergeFrom(other.Admin);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (node_ == null) {
              node_ = new global::Envoy.Api.V2.Core.Node();
            }
            input.ReadMessage(node_);
            break;
          }
          case 18: {
            if (staticResources_ == null) {
              staticResources_ = new global::Envoy.Config.Bootstrap.V2.Bootstrap.Types.StaticResources();
            }
            input.ReadMessage(staticResources_);
            break;
          }
          case 26: {
            if (dynamicResources_ == null) {
              dynamicResources_ = new global::Envoy.Config.Bootstrap.V2.Bootstrap.Types.DynamicResources();
            }
            input.ReadMessage(dynamicResources_);
            break;
          }
          case 34: {
            if (clusterManager_ == null) {
              clusterManager_ = new global::Envoy.Config.Bootstrap.V2.ClusterManager();
            }
            input.ReadMessage(clusterManager_);
            break;
          }
          case 42: {
            FlagsPath = input.ReadString();
            break;
          }
          case 50: {
            statsSinks_.AddEntriesFrom(input, _repeated_statsSinks_codec);
            break;
          }
          case 58: {
            if (statsFlushInterval_ == null) {
              statsFlushInterval_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(statsFlushInterval_);
            break;
          }
          case 66: {
            if (watchdog_ == null) {
              watchdog_ = new global::Envoy.Config.Bootstrap.V2.Watchdog();
            }
            input.ReadMessage(watchdog_);
            break;
          }
          case 74: {
            if (tracing_ == null) {
              tracing_ = new global::Envoy.Config.Trace.V2.Tracing();
            }
            input.ReadMessage(tracing_);
            break;
          }
          case 82: {
            if (rateLimitService_ == null) {
              rateLimitService_ = new global::Envoy.Config.Ratelimit.V2.RateLimitServiceConfig();
            }
            input.ReadMessage(rateLimitService_);
            break;
          }
          case 90: {
            if (runtime_ == null) {
              runtime_ = new global::Envoy.Config.Bootstrap.V2.Runtime();
            }
            input.ReadMessage(runtime_);
            break;
          }
          case 98: {
            if (admin_ == null) {
              admin_ = new global::Envoy.Config.Bootstrap.V2.Admin();
            }
            input.ReadMessage(admin_);
            break;
          }
          case 106: {
            if (statsConfig_ == null) {
              statsConfig_ = new global::Envoy.Config.Metrics.V2.StatsConfig();
            }
            input.ReadMessage(statsConfig_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Bootstrap message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class StaticResources : pb::IMessage<StaticResources> {
        private static readonly pb::MessageParser<StaticResources> _parser = new pb::MessageParser<StaticResources>(() => new StaticResources());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StaticResources> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Config.Bootstrap.V2.Bootstrap.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StaticResources() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StaticResources(StaticResources other) : this() {
          listeners_ = other.listeners_.Clone();
          clusters_ = other.clusters_.Clone();
          secrets_ = other.secrets_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StaticResources Clone() {
          return new StaticResources(this);
        }

        /// <summary>Field number for the "listeners" field.</summary>
        public const int ListenersFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Envoy.Api.V2.Listener> _repeated_listeners_codec
            = pb::FieldCodec.ForMessage(10, global::Envoy.Api.V2.Listener.Parser);
        private readonly pbc::RepeatedField<global::Envoy.Api.V2.Listener> listeners_ = new pbc::RepeatedField<global::Envoy.Api.V2.Listener>();
        /// <summary>
        /// Static :ref:`Listeners &lt;envoy_api_msg_Listener>`. These listeners are
        /// available regardless of LDS configuration.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Envoy.Api.V2.Listener> Listeners {
          get { return listeners_; }
        }

        /// <summary>Field number for the "clusters" field.</summary>
        public const int ClustersFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Envoy.Api.V2.Cluster> _repeated_clusters_codec
            = pb::FieldCodec.ForMessage(18, global::Envoy.Api.V2.Cluster.Parser);
        private readonly pbc::RepeatedField<global::Envoy.Api.V2.Cluster> clusters_ = new pbc::RepeatedField<global::Envoy.Api.V2.Cluster>();
        /// <summary>
        /// If a network based configuration source is specified for :ref:`cds_config
        /// &lt;envoy_api_field_config.bootstrap.v2.Bootstrap.DynamicResources.cds_config>`, it's necessary
        /// to have some initial cluster definitions available to allow Envoy to know
        /// how to speak to the management server. These cluster definitions may not
        /// use :ref:`EDS &lt;arch_overview_dynamic_config_sds>` (i.e. they should be static
        /// IP or DNS-based).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Envoy.Api.V2.Cluster> Clusters {
          get { return clusters_; }
        }

        /// <summary>Field number for the "secrets" field.</summary>
        public const int SecretsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Envoy.Api.V2.Auth.Secret> _repeated_secrets_codec
            = pb::FieldCodec.ForMessage(26, global::Envoy.Api.V2.Auth.Secret.Parser);
        private readonly pbc::RepeatedField<global::Envoy.Api.V2.Auth.Secret> secrets_ = new pbc::RepeatedField<global::Envoy.Api.V2.Auth.Secret>();
        /// <summary>
        /// [#not-implemented-hide:]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Envoy.Api.V2.Auth.Secret> Secrets {
          get { return secrets_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StaticResources);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StaticResources other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!listeners_.Equals(other.listeners_)) return false;
          if(!clusters_.Equals(other.clusters_)) return false;
          if(!secrets_.Equals(other.secrets_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= listeners_.GetHashCode();
          hash ^= clusters_.GetHashCode();
          hash ^= secrets_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          listeners_.WriteTo(output, _repeated_listeners_codec);
          clusters_.WriteTo(output, _repeated_clusters_codec);
          secrets_.WriteTo(output, _repeated_secrets_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += listeners_.CalculateSize(_repeated_listeners_codec);
          size += clusters_.CalculateSize(_repeated_clusters_codec);
          size += secrets_.CalculateSize(_repeated_secrets_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StaticResources other) {
          if (other == null) {
            return;
          }
          listeners_.Add(other.listeners_);
          clusters_.Add(other.clusters_);
          secrets_.Add(other.secrets_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                listeners_.AddEntriesFrom(input, _repeated_listeners_codec);
                break;
              }
              case 18: {
                clusters_.AddEntriesFrom(input, _repeated_clusters_codec);
                break;
              }
              case 26: {
                secrets_.AddEntriesFrom(input, _repeated_secrets_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class DynamicResources : pb::IMessage<DynamicResources> {
        private static readonly pb::MessageParser<DynamicResources> _parser = new pb::MessageParser<DynamicResources>(() => new DynamicResources());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DynamicResources> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Config.Bootstrap.V2.Bootstrap.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DynamicResources() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DynamicResources(DynamicResources other) : this() {
          LdsConfig = other.ldsConfig_ != null ? other.LdsConfig.Clone() : null;
          CdsConfig = other.cdsConfig_ != null ? other.CdsConfig.Clone() : null;
          AdsConfig = other.adsConfig_ != null ? other.AdsConfig.Clone() : null;
          DeprecatedV1 = other.deprecatedV1_ != null ? other.DeprecatedV1.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DynamicResources Clone() {
          return new DynamicResources(this);
        }

        /// <summary>Field number for the "lds_config" field.</summary>
        public const int LdsConfigFieldNumber = 1;
        private global::Envoy.Api.V2.Core.ConfigSource ldsConfig_;
        /// <summary>
        /// All :ref:`Listeners &lt;envoy_api_msg_Listener>` are provided by a single
        /// :ref:`LDS &lt;arch_overview_dynamic_config_lds>` configuration source.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Envoy.Api.V2.Core.ConfigSource LdsConfig {
          get { return ldsConfig_; }
          set {
            ldsConfig_ = value;
          }
        }

        /// <summary>Field number for the "cds_config" field.</summary>
        public const int CdsConfigFieldNumber = 2;
        private global::Envoy.Api.V2.Core.ConfigSource cdsConfig_;
        /// <summary>
        /// All post-bootstrap :ref:`Cluster &lt;envoy_api_msg_Cluster>` definitions are
        /// provided by a single :ref:`CDS &lt;arch_overview_dynamic_config_cds>`
        /// configuration source.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Envoy.Api.V2.Core.ConfigSource CdsConfig {
          get { return cdsConfig_; }
          set {
            cdsConfig_ = value;
          }
        }

        /// <summary>Field number for the "ads_config" field.</summary>
        public const int AdsConfigFieldNumber = 3;
        private global::Envoy.Api.V2.Core.ApiConfigSource adsConfig_;
        /// <summary>
        /// A single :ref:`ADS &lt;config_overview_v2_ads>` source may be optionally
        /// specified. This must have :ref:`api_type
        /// &lt;envoy_api_field_core.ApiConfigSource.api_type>` :ref:`GRPC
        /// &lt;envoy_api_enum_value_core.ApiConfigSource.ApiType.GRPC>`. Only
        /// :ref:`ConfigSources &lt;envoy_api_msg_core.ConfigSource>` that have
        /// the :ref:`ads &lt;envoy_api_field_core.ConfigSource.ads>` field set will be
        /// streamed on the ADS channel.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Envoy.Api.V2.Core.ApiConfigSource AdsConfig {
          get { return adsConfig_; }
          set {
            adsConfig_ = value;
          }
        }

        /// <summary>Field number for the "deprecated_v1" field.</summary>
        public const int DeprecatedV1FieldNumber = 4;
        private global::Envoy.Config.Bootstrap.V2.Bootstrap.Types.DynamicResources.Types.DeprecatedV1 deprecatedV1_;
        /// <summary>
        /// [#not-implemented-hide:] Hide from docs.
        /// </summary>
        [global::System.ObsoleteAttribute]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Envoy.Config.Bootstrap.V2.Bootstrap.Types.DynamicResources.Types.DeprecatedV1 DeprecatedV1 {
          get { return deprecatedV1_; }
          set {
            deprecatedV1_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DynamicResources);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DynamicResources other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(LdsConfig, other.LdsConfig)) return false;
          if (!object.Equals(CdsConfig, other.CdsConfig)) return false;
          if (!object.Equals(AdsConfig, other.AdsConfig)) return false;
          if (!object.Equals(DeprecatedV1, other.DeprecatedV1)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ldsConfig_ != null) hash ^= LdsConfig.GetHashCode();
          if (cdsConfig_ != null) hash ^= CdsConfig.GetHashCode();
          if (adsConfig_ != null) hash ^= AdsConfig.GetHashCode();
          if (deprecatedV1_ != null) hash ^= DeprecatedV1.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ldsConfig_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(LdsConfig);
          }
          if (cdsConfig_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(CdsConfig);
          }
          if (adsConfig_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(AdsConfig);
          }
          if (deprecatedV1_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(DeprecatedV1);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ldsConfig_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(LdsConfig);
          }
          if (cdsConfig_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(CdsConfig);
          }
          if (adsConfig_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(AdsConfig);
          }
          if (deprecatedV1_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeprecatedV1);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DynamicResources other) {
          if (other == null) {
            return;
          }
          if (other.ldsConfig_ != null) {
            if (ldsConfig_ == null) {
              ldsConfig_ = new global::Envoy.Api.V2.Core.ConfigSource();
            }
            LdsConfig.MergeFrom(other.LdsConfig);
          }
          if (other.cdsConfig_ != null) {
            if (cdsConfig_ == null) {
              cdsConfig_ = new global::Envoy.Api.V2.Core.ConfigSource();
            }
            CdsConfig.MergeFrom(other.CdsConfig);
          }
          if (other.adsConfig_ != null) {
            if (adsConfig_ == null) {
              adsConfig_ = new global::Envoy.Api.V2.Core.ApiConfigSource();
            }
            AdsConfig.MergeFrom(other.AdsConfig);
          }
          if (other.deprecatedV1_ != null) {
            if (deprecatedV1_ == null) {
              deprecatedV1_ = new global::Envoy.Config.Bootstrap.V2.Bootstrap.Types.DynamicResources.Types.DeprecatedV1();
            }
            DeprecatedV1.MergeFrom(other.DeprecatedV1);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (ldsConfig_ == null) {
                  ldsConfig_ = new global::Envoy.Api.V2.Core.ConfigSource();
                }
                input.ReadMessage(ldsConfig_);
                break;
              }
              case 18: {
                if (cdsConfig_ == null) {
                  cdsConfig_ = new global::Envoy.Api.V2.Core.ConfigSource();
                }
                input.ReadMessage(cdsConfig_);
                break;
              }
              case 26: {
                if (adsConfig_ == null) {
                  adsConfig_ = new global::Envoy.Api.V2.Core.ApiConfigSource();
                }
                input.ReadMessage(adsConfig_);
                break;
              }
              case 34: {
                if (deprecatedV1_ == null) {
                  deprecatedV1_ = new global::Envoy.Config.Bootstrap.V2.Bootstrap.Types.DynamicResources.Types.DeprecatedV1();
                }
                input.ReadMessage(deprecatedV1_);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the DynamicResources message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// [#not-implemented-hide:] Hide from docs.
          /// </summary>
          public sealed partial class DeprecatedV1 : pb::IMessage<DeprecatedV1> {
            private static readonly pb::MessageParser<DeprecatedV1> _parser = new pb::MessageParser<DeprecatedV1>(() => new DeprecatedV1());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<DeprecatedV1> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Envoy.Config.Bootstrap.V2.Bootstrap.Types.DynamicResources.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public DeprecatedV1() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public DeprecatedV1(DeprecatedV1 other) : this() {
              SdsConfig = other.sdsConfig_ != null ? other.SdsConfig.Clone() : null;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public DeprecatedV1 Clone() {
              return new DeprecatedV1(this);
            }

            /// <summary>Field number for the "sds_config" field.</summary>
            public const int SdsConfigFieldNumber = 1;
            private global::Envoy.Api.V2.Core.ConfigSource sdsConfig_;
            /// <summary>
            /// This is the global :ref:`SDS &lt;arch_overview_dynamic_config_sds>` config
            /// when using v1 REST for :ref:`CDS
            /// &lt;arch_overview_dynamic_config_cds>`/:ref:`EDS
            /// &lt;arch_overview_dynamic_config_sds>`.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Envoy.Api.V2.Core.ConfigSource SdsConfig {
              get { return sdsConfig_; }
              set {
                sdsConfig_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as DeprecatedV1);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(DeprecatedV1 other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(SdsConfig, other.SdsConfig)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (sdsConfig_ != null) hash ^= SdsConfig.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (sdsConfig_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(SdsConfig);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (sdsConfig_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SdsConfig);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(DeprecatedV1 other) {
              if (other == null) {
                return;
              }
              if (other.sdsConfig_ != null) {
                if (sdsConfig_ == null) {
                  sdsConfig_ = new global::Envoy.Api.V2.Core.ConfigSource();
                }
                SdsConfig.MergeFrom(other.SdsConfig);
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (sdsConfig_ == null) {
                      sdsConfig_ = new global::Envoy.Api.V2.Core.ConfigSource();
                    }
                    input.ReadMessage(sdsConfig_);
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// Administration interface :ref:`operations documentation
  /// &lt;operations_admin_interface>`.
  /// </summary>
  public sealed partial class Admin : pb::IMessage<Admin> {
    private static readonly pb::MessageParser<Admin> _parser = new pb::MessageParser<Admin>(() => new Admin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Admin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Bootstrap.V2.BootstrapReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Admin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Admin(Admin other) : this() {
      accessLogPath_ = other.accessLogPath_;
      profilePath_ = other.profilePath_;
      Address = other.address_ != null ? other.Address.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Admin Clone() {
      return new Admin(this);
    }

    /// <summary>Field number for the "access_log_path" field.</summary>
    public const int AccessLogPathFieldNumber = 1;
    private string accessLogPath_ = "";
    /// <summary>
    /// The path to write the access log for the administration server. If no
    /// access log is desired specify ‘/dev/null’.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessLogPath {
      get { return accessLogPath_; }
      set {
        accessLogPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "profile_path" field.</summary>
    public const int ProfilePathFieldNumber = 2;
    private string profilePath_ = "";
    /// <summary>
    /// The cpu profiler output path for the administration server. If no profile
    /// path is specified, the default is ‘/var/log/envoy/envoy.prof’.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProfilePath {
      get { return profilePath_; }
      set {
        profilePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 3;
    private global::Envoy.Api.V2.Core.Address address_;
    /// <summary>
    /// The TCP address that the administration server will listen on.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Admin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Admin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccessLogPath != other.AccessLogPath) return false;
      if (ProfilePath != other.ProfilePath) return false;
      if (!object.Equals(Address, other.Address)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccessLogPath.Length != 0) hash ^= AccessLogPath.GetHashCode();
      if (ProfilePath.Length != 0) hash ^= ProfilePath.GetHashCode();
      if (address_ != null) hash ^= Address.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccessLogPath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccessLogPath);
      }
      if (ProfilePath.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProfilePath);
      }
      if (address_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccessLogPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessLogPath);
      }
      if (ProfilePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProfilePath);
      }
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Admin other) {
      if (other == null) {
        return;
      }
      if (other.AccessLogPath.Length != 0) {
        AccessLogPath = other.AccessLogPath;
      }
      if (other.ProfilePath.Length != 0) {
        ProfilePath = other.ProfilePath;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          address_ = new global::Envoy.Api.V2.Core.Address();
        }
        Address.MergeFrom(other.Address);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AccessLogPath = input.ReadString();
            break;
          }
          case 18: {
            ProfilePath = input.ReadString();
            break;
          }
          case 26: {
            if (address_ == null) {
              address_ = new global::Envoy.Api.V2.Core.Address();
            }
            input.ReadMessage(address_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Cluster manager :ref:`architecture overview &lt;arch_overview_cluster_manager>`.
  /// </summary>
  public sealed partial class ClusterManager : pb::IMessage<ClusterManager> {
    private static readonly pb::MessageParser<ClusterManager> _parser = new pb::MessageParser<ClusterManager>(() => new ClusterManager());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClusterManager> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Bootstrap.V2.BootstrapReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterManager() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterManager(ClusterManager other) : this() {
      localClusterName_ = other.localClusterName_;
      OutlierDetection = other.outlierDetection_ != null ? other.OutlierDetection.Clone() : null;
      UpstreamBindConfig = other.upstreamBindConfig_ != null ? other.UpstreamBindConfig.Clone() : null;
      LoadStatsConfig = other.loadStatsConfig_ != null ? other.LoadStatsConfig.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterManager Clone() {
      return new ClusterManager(this);
    }

    /// <summary>Field number for the "local_cluster_name" field.</summary>
    public const int LocalClusterNameFieldNumber = 1;
    private string localClusterName_ = "";
    /// <summary>
    /// Name of the local cluster (i.e., the cluster that owns the Envoy running
    /// this configuration). In order to enable :ref:`zone aware routing
    /// &lt;arch_overview_load_balancing_zone_aware_routing>` this option must be set.
    /// If *local_cluster_name* is defined then :ref:`clusters
    /// &lt;config_cluster_manager_clusters>` must be defined in the :ref:`Bootstrap
    /// static cluster resources
    /// &lt;envoy_api_field_config.bootstrap.v2.Bootstrap.StaticResources.clusters>`. This is unrelated to
    /// the :option:`--service-cluster` option which does not `affect zone aware
    /// routing &lt;https://github.com/envoyproxy/envoy/issues/774>`_.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LocalClusterName {
      get { return localClusterName_; }
      set {
        localClusterName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "outlier_detection" field.</summary>
    public const int OutlierDetectionFieldNumber = 2;
    private global::Envoy.Config.Bootstrap.V2.ClusterManager.Types.OutlierDetection outlierDetection_;
    /// <summary>
    /// Optional global configuration for outlier detection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Bootstrap.V2.ClusterManager.Types.OutlierDetection OutlierDetection {
      get { return outlierDetection_; }
      set {
        outlierDetection_ = value;
      }
    }

    /// <summary>Field number for the "upstream_bind_config" field.</summary>
    public const int UpstreamBindConfigFieldNumber = 3;
    private global::Envoy.Api.V2.Core.BindConfig upstreamBindConfig_;
    /// <summary>
    /// Optional configuration used to bind newly established upstream connections.
    /// This may be overridden on a per-cluster basis by upstream_bind_config in the cds_config.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.BindConfig UpstreamBindConfig {
      get { return upstreamBindConfig_; }
      set {
        upstreamBindConfig_ = value;
      }
    }

    /// <summary>Field number for the "load_stats_config" field.</summary>
    public const int LoadStatsConfigFieldNumber = 4;
    private global::Envoy.Api.V2.Core.ApiConfigSource loadStatsConfig_;
    /// <summary>
    /// A management server endpoint to stream load stats to via
    /// *StreamLoadStats*. This must have :ref:`api_type
    /// &lt;envoy_api_field_core.ApiConfigSource.api_type>` :ref:`GRPC
    /// &lt;envoy_api_enum_value_core.ApiConfigSource.ApiType.GRPC>`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.ApiConfigSource LoadStatsConfig {
      get { return loadStatsConfig_; }
      set {
        loadStatsConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClusterManager);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClusterManager other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LocalClusterName != other.LocalClusterName) return false;
      if (!object.Equals(OutlierDetection, other.OutlierDetection)) return false;
      if (!object.Equals(UpstreamBindConfig, other.UpstreamBindConfig)) return false;
      if (!object.Equals(LoadStatsConfig, other.LoadStatsConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LocalClusterName.Length != 0) hash ^= LocalClusterName.GetHashCode();
      if (outlierDetection_ != null) hash ^= OutlierDetection.GetHashCode();
      if (upstreamBindConfig_ != null) hash ^= UpstreamBindConfig.GetHashCode();
      if (loadStatsConfig_ != null) hash ^= LoadStatsConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LocalClusterName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LocalClusterName);
      }
      if (outlierDetection_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OutlierDetection);
      }
      if (upstreamBindConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UpstreamBindConfig);
      }
      if (loadStatsConfig_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LoadStatsConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LocalClusterName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocalClusterName);
      }
      if (outlierDetection_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutlierDetection);
      }
      if (upstreamBindConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpstreamBindConfig);
      }
      if (loadStatsConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoadStatsConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClusterManager other) {
      if (other == null) {
        return;
      }
      if (other.LocalClusterName.Length != 0) {
        LocalClusterName = other.LocalClusterName;
      }
      if (other.outlierDetection_ != null) {
        if (outlierDetection_ == null) {
          outlierDetection_ = new global::Envoy.Config.Bootstrap.V2.ClusterManager.Types.OutlierDetection();
        }
        OutlierDetection.MergeFrom(other.OutlierDetection);
      }
      if (other.upstreamBindConfig_ != null) {
        if (upstreamBindConfig_ == null) {
          upstreamBindConfig_ = new global::Envoy.Api.V2.Core.BindConfig();
        }
        UpstreamBindConfig.MergeFrom(other.UpstreamBindConfig);
      }
      if (other.loadStatsConfig_ != null) {
        if (loadStatsConfig_ == null) {
          loadStatsConfig_ = new global::Envoy.Api.V2.Core.ApiConfigSource();
        }
        LoadStatsConfig.MergeFrom(other.LoadStatsConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LocalClusterName = input.ReadString();
            break;
          }
          case 18: {
            if (outlierDetection_ == null) {
              outlierDetection_ = new global::Envoy.Config.Bootstrap.V2.ClusterManager.Types.OutlierDetection();
            }
            input.ReadMessage(outlierDetection_);
            break;
          }
          case 26: {
            if (upstreamBindConfig_ == null) {
              upstreamBindConfig_ = new global::Envoy.Api.V2.Core.BindConfig();
            }
            input.ReadMessage(upstreamBindConfig_);
            break;
          }
          case 34: {
            if (loadStatsConfig_ == null) {
              loadStatsConfig_ = new global::Envoy.Api.V2.Core.ApiConfigSource();
            }
            input.ReadMessage(loadStatsConfig_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ClusterManager message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class OutlierDetection : pb::IMessage<OutlierDetection> {
        private static readonly pb::MessageParser<OutlierDetection> _parser = new pb::MessageParser<OutlierDetection>(() => new OutlierDetection());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OutlierDetection> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Config.Bootstrap.V2.ClusterManager.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OutlierDetection() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OutlierDetection(OutlierDetection other) : this() {
          eventLogPath_ = other.eventLogPath_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OutlierDetection Clone() {
          return new OutlierDetection(this);
        }

        /// <summary>Field number for the "event_log_path" field.</summary>
        public const int EventLogPathFieldNumber = 1;
        private string eventLogPath_ = "";
        /// <summary>
        /// Specifies the path to the outlier event log.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EventLogPath {
          get { return eventLogPath_; }
          set {
            eventLogPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as OutlierDetection);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OutlierDetection other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (EventLogPath != other.EventLogPath) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (EventLogPath.Length != 0) hash ^= EventLogPath.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (EventLogPath.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(EventLogPath);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (EventLogPath.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(EventLogPath);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OutlierDetection other) {
          if (other == null) {
            return;
          }
          if (other.EventLogPath.Length != 0) {
            EventLogPath = other.EventLogPath;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                EventLogPath = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Envoy process watchdog configuration. When configured, this monitors for
  /// nonresponsive threads and kills the process after the configured thresholds.
  /// </summary>
  public sealed partial class Watchdog : pb::IMessage<Watchdog> {
    private static readonly pb::MessageParser<Watchdog> _parser = new pb::MessageParser<Watchdog>(() => new Watchdog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Watchdog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Bootstrap.V2.BootstrapReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Watchdog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Watchdog(Watchdog other) : this() {
      MissTimeout = other.missTimeout_ != null ? other.MissTimeout.Clone() : null;
      MegamissTimeout = other.megamissTimeout_ != null ? other.MegamissTimeout.Clone() : null;
      KillTimeout = other.killTimeout_ != null ? other.KillTimeout.Clone() : null;
      MultikillTimeout = other.multikillTimeout_ != null ? other.MultikillTimeout.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Watchdog Clone() {
      return new Watchdog(this);
    }

    /// <summary>Field number for the "miss_timeout" field.</summary>
    public const int MissTimeoutFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Duration missTimeout_;
    /// <summary>
    /// The duration after which Envoy counts a nonresponsive thread in the
    /// *server.watchdog_miss* statistic. If not specified the default is 200ms.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration MissTimeout {
      get { return missTimeout_; }
      set {
        missTimeout_ = value;
      }
    }

    /// <summary>Field number for the "megamiss_timeout" field.</summary>
    public const int MegamissTimeoutFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Duration megamissTimeout_;
    /// <summary>
    /// The duration after which Envoy counts a nonresponsive thread in the
    /// *server.watchdog_mega_miss* statistic. If not specified the default is
    /// 1000ms.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration MegamissTimeout {
      get { return megamissTimeout_; }
      set {
        megamissTimeout_ = value;
      }
    }

    /// <summary>Field number for the "kill_timeout" field.</summary>
    public const int KillTimeoutFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Duration killTimeout_;
    /// <summary>
    /// If a watched thread has been nonresponsive for this duration, assume a
    /// programming error and kill the entire Envoy process. Set to 0 to disable
    /// kill behavior. If not specified the default is 0 (disabled).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration KillTimeout {
      get { return killTimeout_; }
      set {
        killTimeout_ = value;
      }
    }

    /// <summary>Field number for the "multikill_timeout" field.</summary>
    public const int MultikillTimeoutFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Duration multikillTimeout_;
    /// <summary>
    /// If at least two watched threads have been nonresponsive for at least this
    /// duration assume a true deadlock and kill the entire Envoy process. Set to 0
    /// to disable this behavior. If not specified the default is 0 (disabled).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration MultikillTimeout {
      get { return multikillTimeout_; }
      set {
        multikillTimeout_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Watchdog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Watchdog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MissTimeout, other.MissTimeout)) return false;
      if (!object.Equals(MegamissTimeout, other.MegamissTimeout)) return false;
      if (!object.Equals(KillTimeout, other.KillTimeout)) return false;
      if (!object.Equals(MultikillTimeout, other.MultikillTimeout)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (missTimeout_ != null) hash ^= MissTimeout.GetHashCode();
      if (megamissTimeout_ != null) hash ^= MegamissTimeout.GetHashCode();
      if (killTimeout_ != null) hash ^= KillTimeout.GetHashCode();
      if (multikillTimeout_ != null) hash ^= MultikillTimeout.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (missTimeout_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MissTimeout);
      }
      if (megamissTimeout_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MegamissTimeout);
      }
      if (killTimeout_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(KillTimeout);
      }
      if (multikillTimeout_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MultikillTimeout);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (missTimeout_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MissTimeout);
      }
      if (megamissTimeout_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MegamissTimeout);
      }
      if (killTimeout_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KillTimeout);
      }
      if (multikillTimeout_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MultikillTimeout);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Watchdog other) {
      if (other == null) {
        return;
      }
      if (other.missTimeout_ != null) {
        if (missTimeout_ == null) {
          missTimeout_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        MissTimeout.MergeFrom(other.MissTimeout);
      }
      if (other.megamissTimeout_ != null) {
        if (megamissTimeout_ == null) {
          megamissTimeout_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        MegamissTimeout.MergeFrom(other.MegamissTimeout);
      }
      if (other.killTimeout_ != null) {
        if (killTimeout_ == null) {
          killTimeout_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        KillTimeout.MergeFrom(other.KillTimeout);
      }
      if (other.multikillTimeout_ != null) {
        if (multikillTimeout_ == null) {
          multikillTimeout_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        MultikillTimeout.MergeFrom(other.MultikillTimeout);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (missTimeout_ == null) {
              missTimeout_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(missTimeout_);
            break;
          }
          case 18: {
            if (megamissTimeout_ == null) {
              megamissTimeout_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(megamissTimeout_);
            break;
          }
          case 26: {
            if (killTimeout_ == null) {
              killTimeout_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(killTimeout_);
            break;
          }
          case 34: {
            if (multikillTimeout_ == null) {
              multikillTimeout_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(multikillTimeout_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Runtime :ref:`configuration overview &lt;config_runtime>`.
  /// </summary>
  public sealed partial class Runtime : pb::IMessage<Runtime> {
    private static readonly pb::MessageParser<Runtime> _parser = new pb::MessageParser<Runtime>(() => new Runtime());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Runtime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Bootstrap.V2.BootstrapReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Runtime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Runtime(Runtime other) : this() {
      symlinkRoot_ = other.symlinkRoot_;
      subdirectory_ = other.subdirectory_;
      overrideSubdirectory_ = other.overrideSubdirectory_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Runtime Clone() {
      return new Runtime(this);
    }

    /// <summary>Field number for the "symlink_root" field.</summary>
    public const int SymlinkRootFieldNumber = 1;
    private string symlinkRoot_ = "";
    /// <summary>
    /// The implementation assumes that the file system tree is accessed via a
    /// symbolic link. An atomic link swap is used when a new tree should be
    /// switched to. This parameter specifies the path to the symbolic link. Envoy
    /// will watch the location for changes and reload the file system tree when
    /// they happen.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymlinkRoot {
      get { return symlinkRoot_; }
      set {
        symlinkRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subdirectory" field.</summary>
    public const int SubdirectoryFieldNumber = 2;
    private string subdirectory_ = "";
    /// <summary>
    /// Specifies the subdirectory to load within the root directory. This is
    /// useful if multiple systems share the same delivery mechanism. Envoy
    /// configuration elements can be contained in a dedicated subdirectory.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Subdirectory {
      get { return subdirectory_; }
      set {
        subdirectory_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "override_subdirectory" field.</summary>
    public const int OverrideSubdirectoryFieldNumber = 3;
    private string overrideSubdirectory_ = "";
    /// <summary>
    /// Specifies an optional subdirectory to load within the root directory. If
    /// specified and the directory exists, configuration values within this
    /// directory will override those found in the primary subdirectory. This is
    /// useful when Envoy is deployed across many different types of servers.
    /// Sometimes it is useful to have a per service cluster directory for runtime
    /// configuration. See below for exactly how the override directory is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OverrideSubdirectory {
      get { return overrideSubdirectory_; }
      set {
        overrideSubdirectory_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Runtime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Runtime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymlinkRoot != other.SymlinkRoot) return false;
      if (Subdirectory != other.Subdirectory) return false;
      if (OverrideSubdirectory != other.OverrideSubdirectory) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymlinkRoot.Length != 0) hash ^= SymlinkRoot.GetHashCode();
      if (Subdirectory.Length != 0) hash ^= Subdirectory.GetHashCode();
      if (OverrideSubdirectory.Length != 0) hash ^= OverrideSubdirectory.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymlinkRoot.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SymlinkRoot);
      }
      if (Subdirectory.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Subdirectory);
      }
      if (OverrideSubdirectory.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OverrideSubdirectory);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymlinkRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymlinkRoot);
      }
      if (Subdirectory.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Subdirectory);
      }
      if (OverrideSubdirectory.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OverrideSubdirectory);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Runtime other) {
      if (other == null) {
        return;
      }
      if (other.SymlinkRoot.Length != 0) {
        SymlinkRoot = other.SymlinkRoot;
      }
      if (other.Subdirectory.Length != 0) {
        Subdirectory = other.Subdirectory;
      }
      if (other.OverrideSubdirectory.Length != 0) {
        OverrideSubdirectory = other.OverrideSubdirectory;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SymlinkRoot = input.ReadString();
            break;
          }
          case 18: {
            Subdirectory = input.ReadString();
            break;
          }
          case 26: {
            OverrideSubdirectory = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
