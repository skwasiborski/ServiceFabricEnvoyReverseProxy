// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/config/filter/accesslog/v2/accesslog.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Config.Filter.Accesslog.V2 {

  /// <summary>Holder for reflection information generated from envoy/config/filter/accesslog/v2/accesslog.proto</summary>
  public static partial class AccesslogReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/config/filter/accesslog/v2/accesslog.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AccesslogReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjBlbnZveS9jb25maWcvZmlsdGVyL2FjY2Vzc2xvZy92Mi9hY2Nlc3Nsb2cu",
            "cHJvdG8SIGVudm95LmNvbmZpZy5maWx0ZXIuYWNjZXNzbG9nLnYyGhxlbnZv",
            "eS9hcGkvdjIvY29yZS9iYXNlLnByb3RvGh5lbnZveS9hcGkvdjIvcm91dGUv",
            "cm91dGUucHJvdG8aGGVudm95L3R5cGUvcGVyY2VudC5wcm90bxocZ29vZ2xl",
            "L3Byb3RvYnVmL3N0cnVjdC5wcm90bxoXdmFsaWRhdGUvdmFsaWRhdGUucHJv",
            "dG8ihQEKCUFjY2Vzc0xvZxIMCgRuYW1lGAEgASgJEkEKBmZpbHRlchgCIAEo",
            "CzIxLmVudm95LmNvbmZpZy5maWx0ZXIuYWNjZXNzbG9nLnYyLkFjY2Vzc0xv",
            "Z0ZpbHRlchInCgZjb25maWcYAyABKAsyFy5nb29nbGUucHJvdG9idWYuU3Ry",
            "dWN0Io0FCg9BY2Nlc3NMb2dGaWx0ZXISUAoSc3RhdHVzX2NvZGVfZmlsdGVy",
            "GAEgASgLMjIuZW52b3kuY29uZmlnLmZpbHRlci5hY2Nlc3Nsb2cudjIuU3Rh",
            "dHVzQ29kZUZpbHRlckgAEksKD2R1cmF0aW9uX2ZpbHRlchgCIAEoCzIwLmVu",
            "dm95LmNvbmZpZy5maWx0ZXIuYWNjZXNzbG9nLnYyLkR1cmF0aW9uRmlsdGVy",
            "SAASWQoXbm90X2hlYWx0aF9jaGVja19maWx0ZXIYAyABKAsyNi5lbnZveS5j",
            "b25maWcuZmlsdGVyLmFjY2Vzc2xvZy52Mi5Ob3RIZWFsdGhDaGVja0ZpbHRl",
            "ckgAEk0KEHRyYWNlYWJsZV9maWx0ZXIYBCABKAsyMS5lbnZveS5jb25maWcu",
            "ZmlsdGVyLmFjY2Vzc2xvZy52Mi5UcmFjZWFibGVGaWx0ZXJIABJJCg5ydW50",
            "aW1lX2ZpbHRlchgFIAEoCzIvLmVudm95LmNvbmZpZy5maWx0ZXIuYWNjZXNz",
            "bG9nLnYyLlJ1bnRpbWVGaWx0ZXJIABJBCgphbmRfZmlsdGVyGAYgASgLMisu",
            "ZW52b3kuY29uZmlnLmZpbHRlci5hY2Nlc3Nsb2cudjIuQW5kRmlsdGVySAAS",
            "PwoJb3JfZmlsdGVyGAcgASgLMiouZW52b3kuY29uZmlnLmZpbHRlci5hY2Nl",
            "c3Nsb2cudjIuT3JGaWx0ZXJIABJHCg1oZWFkZXJfZmlsdGVyGAggASgLMi4u",
            "ZW52b3kuY29uZmlnLmZpbHRlci5hY2Nlc3Nsb2cudjIuSGVhZGVyRmlsdGVy",
            "SABCGQoQZmlsdGVyX3NwZWNpZmllchIFuOnAAwEisAEKEENvbXBhcmlzb25G",
            "aWx0ZXISTQoCb3AYASABKA4yNS5lbnZveS5jb25maWcuZmlsdGVyLmFjY2Vz",
            "c2xvZy52Mi5Db21wYXJpc29uRmlsdGVyLk9wQgq66cADBYIBAhABEi8KBXZh",
            "bHVlGAIgASgLMiAuZW52b3kuYXBpLnYyLmNvcmUuUnVudGltZVVJbnQzMiIc",
            "CgJPcBIGCgJFURAAEgYKAkdFEAESBgoCTEUQAiJmChBTdGF0dXNDb2RlRmls",
            "dGVyElIKCmNvbXBhcmlzb24YASABKAsyMi5lbnZveS5jb25maWcuZmlsdGVy",
            "LmFjY2Vzc2xvZy52Mi5Db21wYXJpc29uRmlsdGVyQgq66cADBYoBAhABImQK",
            "DkR1cmF0aW9uRmlsdGVyElIKCmNvbXBhcmlzb24YASABKAsyMi5lbnZveS5j",
            "b25maWcuZmlsdGVyLmFjY2Vzc2xvZy52Mi5Db21wYXJpc29uRmlsdGVyQgq6",
            "6cADBYoBAhABIhYKFE5vdEhlYWx0aENoZWNrRmlsdGVyIhEKD1RyYWNlYWJs",
            "ZUZpbHRlciKLAQoNUnVudGltZUZpbHRlchIeCgtydW50aW1lX2tleRgBIAEo",
            "CUIJuunAAwRyAiABEjYKD3BlcmNlbnRfc2FtcGxlZBgCIAEoCzIdLmVudm95",
            "LnR5cGUuRnJhY3Rpb25hbFBlcmNlbnQSIgoadXNlX2luZGVwZW5kZW50X3Jh",
            "bmRvbW5lc3MYAyABKAgiWwoJQW5kRmlsdGVyEk4KB2ZpbHRlcnMYASADKAsy",
            "MS5lbnZveS5jb25maWcuZmlsdGVyLmFjY2Vzc2xvZy52Mi5BY2Nlc3NMb2dG",
            "aWx0ZXJCCrrpwAMFkgECCAIiWgoIT3JGaWx0ZXISTgoHZmlsdGVycxgCIAMo",
            "CzIxLmVudm95LmNvbmZpZy5maWx0ZXIuYWNjZXNzbG9nLnYyLkFjY2Vzc0xv",
            "Z0ZpbHRlckIKuunAAwWSAQIIAiJNCgxIZWFkZXJGaWx0ZXISPQoGaGVhZGVy",
            "GAEgASgLMiEuZW52b3kuYXBpLnYyLnJvdXRlLkhlYWRlck1hdGNoZXJCCrrp",
            "wAMFigECEAFCBFoCdjJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Api.V2.Core.BaseReflection.Descriptor, global::Envoy.Api.V2.Route.RouteReflection.Descriptor, global::Envoy.Type.PercentReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Accesslog.V2.AccessLog), global::Envoy.Config.Filter.Accesslog.V2.AccessLog.Parser, new[]{ "Name", "Filter", "Config" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter), global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter.Parser, new[]{ "StatusCodeFilter", "DurationFilter", "NotHealthCheckFilter", "TraceableFilter", "RuntimeFilter", "AndFilter", "OrFilter", "HeaderFilter" }, new[]{ "FilterSpecifier" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Accesslog.V2.ComparisonFilter), global::Envoy.Config.Filter.Accesslog.V2.ComparisonFilter.Parser, new[]{ "Op", "Value" }, null, new[]{ typeof(global::Envoy.Config.Filter.Accesslog.V2.ComparisonFilter.Types.Op) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Accesslog.V2.StatusCodeFilter), global::Envoy.Config.Filter.Accesslog.V2.StatusCodeFilter.Parser, new[]{ "Comparison" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Accesslog.V2.DurationFilter), global::Envoy.Config.Filter.Accesslog.V2.DurationFilter.Parser, new[]{ "Comparison" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Accesslog.V2.NotHealthCheckFilter), global::Envoy.Config.Filter.Accesslog.V2.NotHealthCheckFilter.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Accesslog.V2.TraceableFilter), global::Envoy.Config.Filter.Accesslog.V2.TraceableFilter.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Accesslog.V2.RuntimeFilter), global::Envoy.Config.Filter.Accesslog.V2.RuntimeFilter.Parser, new[]{ "RuntimeKey", "PercentSampled", "UseIndependentRandomness" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Accesslog.V2.AndFilter), global::Envoy.Config.Filter.Accesslog.V2.AndFilter.Parser, new[]{ "Filters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Accesslog.V2.OrFilter), global::Envoy.Config.Filter.Accesslog.V2.OrFilter.Parser, new[]{ "Filters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Accesslog.V2.HeaderFilter), global::Envoy.Config.Filter.Accesslog.V2.HeaderFilter.Parser, new[]{ "Header" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AccessLog : pb::IMessage<AccessLog> {
    private static readonly pb::MessageParser<AccessLog> _parser = new pb::MessageParser<AccessLog>(() => new AccessLog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLog(AccessLog other) : this() {
      name_ = other.name_;
      Filter = other.filter_ != null ? other.Filter.Clone() : null;
      Config = other.config_ != null ? other.Config.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLog Clone() {
      return new AccessLog(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the access log implementation to instantiate. The name must
    /// match a statically registered access log. Current built-in loggers include:
    ///
    /// #. "envoy.file_access_log"
    /// #. "envoy.http_grpc_access_log"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 2;
    private global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter filter_;
    /// <summary>
    /// Filter which is used to determine if the access log needs to be written.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter Filter {
      get { return filter_; }
      set {
        filter_ = value;
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Struct config_;
    /// <summary>
    /// Custom configuration that depends on the access log being instantiated. Built-in configurations
    /// include:
    ///
    /// #. "envoy.file_access_log": :ref:`FileAccessLog
    ///    &lt;envoy_api_msg_config.accesslog.v2.FileAccessLog>`
    /// #. "envoy.http_grpc_access_log": :ref:`HttpGrpcAccessLogConfig
    ///    &lt;envoy_api_msg_config.accesslog.v2.HttpGrpcAccessLogConfig>`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Filter, other.Filter)) return false;
      if (!object.Equals(Config, other.Config)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (filter_ != null) hash ^= Filter.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (filter_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Filter);
      }
      if (config_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Config);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (filter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filter);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessLog other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.filter_ != null) {
        if (filter_ == null) {
          filter_ = new global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter();
        }
        Filter.MergeFrom(other.Filter);
      }
      if (other.config_ != null) {
        if (config_ == null) {
          config_ = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Config.MergeFrom(other.Config);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (filter_ == null) {
              filter_ = new global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter();
            }
            input.ReadMessage(filter_);
            break;
          }
          case 26: {
            if (config_ == null) {
              config_ = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(config_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AccessLogFilter : pb::IMessage<AccessLogFilter> {
    private static readonly pb::MessageParser<AccessLogFilter> _parser = new pb::MessageParser<AccessLogFilter>(() => new AccessLogFilter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessLogFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogFilter(AccessLogFilter other) : this() {
      switch (other.FilterSpecifierCase) {
        case FilterSpecifierOneofCase.StatusCodeFilter:
          StatusCodeFilter = other.StatusCodeFilter.Clone();
          break;
        case FilterSpecifierOneofCase.DurationFilter:
          DurationFilter = other.DurationFilter.Clone();
          break;
        case FilterSpecifierOneofCase.NotHealthCheckFilter:
          NotHealthCheckFilter = other.NotHealthCheckFilter.Clone();
          break;
        case FilterSpecifierOneofCase.TraceableFilter:
          TraceableFilter = other.TraceableFilter.Clone();
          break;
        case FilterSpecifierOneofCase.RuntimeFilter:
          RuntimeFilter = other.RuntimeFilter.Clone();
          break;
        case FilterSpecifierOneofCase.AndFilter:
          AndFilter = other.AndFilter.Clone();
          break;
        case FilterSpecifierOneofCase.OrFilter:
          OrFilter = other.OrFilter.Clone();
          break;
        case FilterSpecifierOneofCase.HeaderFilter:
          HeaderFilter = other.HeaderFilter.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogFilter Clone() {
      return new AccessLogFilter(this);
    }

    /// <summary>Field number for the "status_code_filter" field.</summary>
    public const int StatusCodeFilterFieldNumber = 1;
    /// <summary>
    /// Status code filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Accesslog.V2.StatusCodeFilter StatusCodeFilter {
      get { return filterSpecifierCase_ == FilterSpecifierOneofCase.StatusCodeFilter ? (global::Envoy.Config.Filter.Accesslog.V2.StatusCodeFilter) filterSpecifier_ : null; }
      set {
        filterSpecifier_ = value;
        filterSpecifierCase_ = value == null ? FilterSpecifierOneofCase.None : FilterSpecifierOneofCase.StatusCodeFilter;
      }
    }

    /// <summary>Field number for the "duration_filter" field.</summary>
    public const int DurationFilterFieldNumber = 2;
    /// <summary>
    /// Duration filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Accesslog.V2.DurationFilter DurationFilter {
      get { return filterSpecifierCase_ == FilterSpecifierOneofCase.DurationFilter ? (global::Envoy.Config.Filter.Accesslog.V2.DurationFilter) filterSpecifier_ : null; }
      set {
        filterSpecifier_ = value;
        filterSpecifierCase_ = value == null ? FilterSpecifierOneofCase.None : FilterSpecifierOneofCase.DurationFilter;
      }
    }

    /// <summary>Field number for the "not_health_check_filter" field.</summary>
    public const int NotHealthCheckFilterFieldNumber = 3;
    /// <summary>
    /// Not health check filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Accesslog.V2.NotHealthCheckFilter NotHealthCheckFilter {
      get { return filterSpecifierCase_ == FilterSpecifierOneofCase.NotHealthCheckFilter ? (global::Envoy.Config.Filter.Accesslog.V2.NotHealthCheckFilter) filterSpecifier_ : null; }
      set {
        filterSpecifier_ = value;
        filterSpecifierCase_ = value == null ? FilterSpecifierOneofCase.None : FilterSpecifierOneofCase.NotHealthCheckFilter;
      }
    }

    /// <summary>Field number for the "traceable_filter" field.</summary>
    public const int TraceableFilterFieldNumber = 4;
    /// <summary>
    /// Traceable filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Accesslog.V2.TraceableFilter TraceableFilter {
      get { return filterSpecifierCase_ == FilterSpecifierOneofCase.TraceableFilter ? (global::Envoy.Config.Filter.Accesslog.V2.TraceableFilter) filterSpecifier_ : null; }
      set {
        filterSpecifier_ = value;
        filterSpecifierCase_ = value == null ? FilterSpecifierOneofCase.None : FilterSpecifierOneofCase.TraceableFilter;
      }
    }

    /// <summary>Field number for the "runtime_filter" field.</summary>
    public const int RuntimeFilterFieldNumber = 5;
    /// <summary>
    /// Runtime filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Accesslog.V2.RuntimeFilter RuntimeFilter {
      get { return filterSpecifierCase_ == FilterSpecifierOneofCase.RuntimeFilter ? (global::Envoy.Config.Filter.Accesslog.V2.RuntimeFilter) filterSpecifier_ : null; }
      set {
        filterSpecifier_ = value;
        filterSpecifierCase_ = value == null ? FilterSpecifierOneofCase.None : FilterSpecifierOneofCase.RuntimeFilter;
      }
    }

    /// <summary>Field number for the "and_filter" field.</summary>
    public const int AndFilterFieldNumber = 6;
    /// <summary>
    /// And filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Accesslog.V2.AndFilter AndFilter {
      get { return filterSpecifierCase_ == FilterSpecifierOneofCase.AndFilter ? (global::Envoy.Config.Filter.Accesslog.V2.AndFilter) filterSpecifier_ : null; }
      set {
        filterSpecifier_ = value;
        filterSpecifierCase_ = value == null ? FilterSpecifierOneofCase.None : FilterSpecifierOneofCase.AndFilter;
      }
    }

    /// <summary>Field number for the "or_filter" field.</summary>
    public const int OrFilterFieldNumber = 7;
    /// <summary>
    /// Or filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Accesslog.V2.OrFilter OrFilter {
      get { return filterSpecifierCase_ == FilterSpecifierOneofCase.OrFilter ? (global::Envoy.Config.Filter.Accesslog.V2.OrFilter) filterSpecifier_ : null; }
      set {
        filterSpecifier_ = value;
        filterSpecifierCase_ = value == null ? FilterSpecifierOneofCase.None : FilterSpecifierOneofCase.OrFilter;
      }
    }

    /// <summary>Field number for the "header_filter" field.</summary>
    public const int HeaderFilterFieldNumber = 8;
    /// <summary>
    /// Header filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Accesslog.V2.HeaderFilter HeaderFilter {
      get { return filterSpecifierCase_ == FilterSpecifierOneofCase.HeaderFilter ? (global::Envoy.Config.Filter.Accesslog.V2.HeaderFilter) filterSpecifier_ : null; }
      set {
        filterSpecifier_ = value;
        filterSpecifierCase_ = value == null ? FilterSpecifierOneofCase.None : FilterSpecifierOneofCase.HeaderFilter;
      }
    }

    private object filterSpecifier_;
    /// <summary>Enum of possible cases for the "filter_specifier" oneof.</summary>
    public enum FilterSpecifierOneofCase {
      None = 0,
      StatusCodeFilter = 1,
      DurationFilter = 2,
      NotHealthCheckFilter = 3,
      TraceableFilter = 4,
      RuntimeFilter = 5,
      AndFilter = 6,
      OrFilter = 7,
      HeaderFilter = 8,
    }
    private FilterSpecifierOneofCase filterSpecifierCase_ = FilterSpecifierOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterSpecifierOneofCase FilterSpecifierCase {
      get { return filterSpecifierCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFilterSpecifier() {
      filterSpecifierCase_ = FilterSpecifierOneofCase.None;
      filterSpecifier_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessLogFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessLogFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StatusCodeFilter, other.StatusCodeFilter)) return false;
      if (!object.Equals(DurationFilter, other.DurationFilter)) return false;
      if (!object.Equals(NotHealthCheckFilter, other.NotHealthCheckFilter)) return false;
      if (!object.Equals(TraceableFilter, other.TraceableFilter)) return false;
      if (!object.Equals(RuntimeFilter, other.RuntimeFilter)) return false;
      if (!object.Equals(AndFilter, other.AndFilter)) return false;
      if (!object.Equals(OrFilter, other.OrFilter)) return false;
      if (!object.Equals(HeaderFilter, other.HeaderFilter)) return false;
      if (FilterSpecifierCase != other.FilterSpecifierCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.StatusCodeFilter) hash ^= StatusCodeFilter.GetHashCode();
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.DurationFilter) hash ^= DurationFilter.GetHashCode();
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.NotHealthCheckFilter) hash ^= NotHealthCheckFilter.GetHashCode();
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.TraceableFilter) hash ^= TraceableFilter.GetHashCode();
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.RuntimeFilter) hash ^= RuntimeFilter.GetHashCode();
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.AndFilter) hash ^= AndFilter.GetHashCode();
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.OrFilter) hash ^= OrFilter.GetHashCode();
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.HeaderFilter) hash ^= HeaderFilter.GetHashCode();
      hash ^= (int) filterSpecifierCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.StatusCodeFilter) {
        output.WriteRawTag(10);
        output.WriteMessage(StatusCodeFilter);
      }
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.DurationFilter) {
        output.WriteRawTag(18);
        output.WriteMessage(DurationFilter);
      }
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.NotHealthCheckFilter) {
        output.WriteRawTag(26);
        output.WriteMessage(NotHealthCheckFilter);
      }
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.TraceableFilter) {
        output.WriteRawTag(34);
        output.WriteMessage(TraceableFilter);
      }
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.RuntimeFilter) {
        output.WriteRawTag(42);
        output.WriteMessage(RuntimeFilter);
      }
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.AndFilter) {
        output.WriteRawTag(50);
        output.WriteMessage(AndFilter);
      }
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.OrFilter) {
        output.WriteRawTag(58);
        output.WriteMessage(OrFilter);
      }
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.HeaderFilter) {
        output.WriteRawTag(66);
        output.WriteMessage(HeaderFilter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.StatusCodeFilter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatusCodeFilter);
      }
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.DurationFilter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DurationFilter);
      }
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.NotHealthCheckFilter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NotHealthCheckFilter);
      }
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.TraceableFilter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TraceableFilter);
      }
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.RuntimeFilter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RuntimeFilter);
      }
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.AndFilter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AndFilter);
      }
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.OrFilter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OrFilter);
      }
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.HeaderFilter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HeaderFilter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessLogFilter other) {
      if (other == null) {
        return;
      }
      switch (other.FilterSpecifierCase) {
        case FilterSpecifierOneofCase.StatusCodeFilter:
          if (StatusCodeFilter == null) {
            StatusCodeFilter = new global::Envoy.Config.Filter.Accesslog.V2.StatusCodeFilter();
          }
          StatusCodeFilter.MergeFrom(other.StatusCodeFilter);
          break;
        case FilterSpecifierOneofCase.DurationFilter:
          if (DurationFilter == null) {
            DurationFilter = new global::Envoy.Config.Filter.Accesslog.V2.DurationFilter();
          }
          DurationFilter.MergeFrom(other.DurationFilter);
          break;
        case FilterSpecifierOneofCase.NotHealthCheckFilter:
          if (NotHealthCheckFilter == null) {
            NotHealthCheckFilter = new global::Envoy.Config.Filter.Accesslog.V2.NotHealthCheckFilter();
          }
          NotHealthCheckFilter.MergeFrom(other.NotHealthCheckFilter);
          break;
        case FilterSpecifierOneofCase.TraceableFilter:
          if (TraceableFilter == null) {
            TraceableFilter = new global::Envoy.Config.Filter.Accesslog.V2.TraceableFilter();
          }
          TraceableFilter.MergeFrom(other.TraceableFilter);
          break;
        case FilterSpecifierOneofCase.RuntimeFilter:
          if (RuntimeFilter == null) {
            RuntimeFilter = new global::Envoy.Config.Filter.Accesslog.V2.RuntimeFilter();
          }
          RuntimeFilter.MergeFrom(other.RuntimeFilter);
          break;
        case FilterSpecifierOneofCase.AndFilter:
          if (AndFilter == null) {
            AndFilter = new global::Envoy.Config.Filter.Accesslog.V2.AndFilter();
          }
          AndFilter.MergeFrom(other.AndFilter);
          break;
        case FilterSpecifierOneofCase.OrFilter:
          if (OrFilter == null) {
            OrFilter = new global::Envoy.Config.Filter.Accesslog.V2.OrFilter();
          }
          OrFilter.MergeFrom(other.OrFilter);
          break;
        case FilterSpecifierOneofCase.HeaderFilter:
          if (HeaderFilter == null) {
            HeaderFilter = new global::Envoy.Config.Filter.Accesslog.V2.HeaderFilter();
          }
          HeaderFilter.MergeFrom(other.HeaderFilter);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Envoy.Config.Filter.Accesslog.V2.StatusCodeFilter subBuilder = new global::Envoy.Config.Filter.Accesslog.V2.StatusCodeFilter();
            if (filterSpecifierCase_ == FilterSpecifierOneofCase.StatusCodeFilter) {
              subBuilder.MergeFrom(StatusCodeFilter);
            }
            input.ReadMessage(subBuilder);
            StatusCodeFilter = subBuilder;
            break;
          }
          case 18: {
            global::Envoy.Config.Filter.Accesslog.V2.DurationFilter subBuilder = new global::Envoy.Config.Filter.Accesslog.V2.DurationFilter();
            if (filterSpecifierCase_ == FilterSpecifierOneofCase.DurationFilter) {
              subBuilder.MergeFrom(DurationFilter);
            }
            input.ReadMessage(subBuilder);
            DurationFilter = subBuilder;
            break;
          }
          case 26: {
            global::Envoy.Config.Filter.Accesslog.V2.NotHealthCheckFilter subBuilder = new global::Envoy.Config.Filter.Accesslog.V2.NotHealthCheckFilter();
            if (filterSpecifierCase_ == FilterSpecifierOneofCase.NotHealthCheckFilter) {
              subBuilder.MergeFrom(NotHealthCheckFilter);
            }
            input.ReadMessage(subBuilder);
            NotHealthCheckFilter = subBuilder;
            break;
          }
          case 34: {
            global::Envoy.Config.Filter.Accesslog.V2.TraceableFilter subBuilder = new global::Envoy.Config.Filter.Accesslog.V2.TraceableFilter();
            if (filterSpecifierCase_ == FilterSpecifierOneofCase.TraceableFilter) {
              subBuilder.MergeFrom(TraceableFilter);
            }
            input.ReadMessage(subBuilder);
            TraceableFilter = subBuilder;
            break;
          }
          case 42: {
            global::Envoy.Config.Filter.Accesslog.V2.RuntimeFilter subBuilder = new global::Envoy.Config.Filter.Accesslog.V2.RuntimeFilter();
            if (filterSpecifierCase_ == FilterSpecifierOneofCase.RuntimeFilter) {
              subBuilder.MergeFrom(RuntimeFilter);
            }
            input.ReadMessage(subBuilder);
            RuntimeFilter = subBuilder;
            break;
          }
          case 50: {
            global::Envoy.Config.Filter.Accesslog.V2.AndFilter subBuilder = new global::Envoy.Config.Filter.Accesslog.V2.AndFilter();
            if (filterSpecifierCase_ == FilterSpecifierOneofCase.AndFilter) {
              subBuilder.MergeFrom(AndFilter);
            }
            input.ReadMessage(subBuilder);
            AndFilter = subBuilder;
            break;
          }
          case 58: {
            global::Envoy.Config.Filter.Accesslog.V2.OrFilter subBuilder = new global::Envoy.Config.Filter.Accesslog.V2.OrFilter();
            if (filterSpecifierCase_ == FilterSpecifierOneofCase.OrFilter) {
              subBuilder.MergeFrom(OrFilter);
            }
            input.ReadMessage(subBuilder);
            OrFilter = subBuilder;
            break;
          }
          case 66: {
            global::Envoy.Config.Filter.Accesslog.V2.HeaderFilter subBuilder = new global::Envoy.Config.Filter.Accesslog.V2.HeaderFilter();
            if (filterSpecifierCase_ == FilterSpecifierOneofCase.HeaderFilter) {
              subBuilder.MergeFrom(HeaderFilter);
            }
            input.ReadMessage(subBuilder);
            HeaderFilter = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Filter on an integer comparison.
  /// </summary>
  public sealed partial class ComparisonFilter : pb::IMessage<ComparisonFilter> {
    private static readonly pb::MessageParser<ComparisonFilter> _parser = new pb::MessageParser<ComparisonFilter>(() => new ComparisonFilter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComparisonFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComparisonFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComparisonFilter(ComparisonFilter other) : this() {
      op_ = other.op_;
      Value = other.value_ != null ? other.Value.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComparisonFilter Clone() {
      return new ComparisonFilter(this);
    }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 1;
    private global::Envoy.Config.Filter.Accesslog.V2.ComparisonFilter.Types.Op op_ = 0;
    /// <summary>
    /// Comparison operator.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Accesslog.V2.ComparisonFilter.Types.Op Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private global::Envoy.Api.V2.Core.RuntimeUInt32 value_;
    /// <summary>
    /// Value to compare against.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.RuntimeUInt32 Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComparisonFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComparisonFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Op != other.Op) return false;
      if (!object.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Op != 0) hash ^= Op.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Op != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Op);
      }
      if (value_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Op);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComparisonFilter other) {
      if (other == null) {
        return;
      }
      if (other.Op != 0) {
        Op = other.Op;
      }
      if (other.value_ != null) {
        if (value_ == null) {
          value_ = new global::Envoy.Api.V2.Core.RuntimeUInt32();
        }
        Value.MergeFrom(other.Value);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            op_ = (global::Envoy.Config.Filter.Accesslog.V2.ComparisonFilter.Types.Op) input.ReadEnum();
            break;
          }
          case 18: {
            if (value_ == null) {
              value_ = new global::Envoy.Api.V2.Core.RuntimeUInt32();
            }
            input.ReadMessage(value_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ComparisonFilter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Op {
        /// <summary>
        /// =
        /// </summary>
        [pbr::OriginalName("EQ")] Eq = 0,
        /// <summary>
        /// >=
        /// </summary>
        [pbr::OriginalName("GE")] Ge = 1,
        /// <summary>
        /// &lt;=
        /// </summary>
        [pbr::OriginalName("LE")] Le = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Filters on HTTP response/status code.
  /// </summary>
  public sealed partial class StatusCodeFilter : pb::IMessage<StatusCodeFilter> {
    private static readonly pb::MessageParser<StatusCodeFilter> _parser = new pb::MessageParser<StatusCodeFilter>(() => new StatusCodeFilter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusCodeFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusCodeFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusCodeFilter(StatusCodeFilter other) : this() {
      Comparison = other.comparison_ != null ? other.Comparison.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusCodeFilter Clone() {
      return new StatusCodeFilter(this);
    }

    /// <summary>Field number for the "comparison" field.</summary>
    public const int ComparisonFieldNumber = 1;
    private global::Envoy.Config.Filter.Accesslog.V2.ComparisonFilter comparison_;
    /// <summary>
    /// Comparison.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Accesslog.V2.ComparisonFilter Comparison {
      get { return comparison_; }
      set {
        comparison_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusCodeFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusCodeFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Comparison, other.Comparison)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (comparison_ != null) hash ^= Comparison.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (comparison_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Comparison);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (comparison_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Comparison);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusCodeFilter other) {
      if (other == null) {
        return;
      }
      if (other.comparison_ != null) {
        if (comparison_ == null) {
          comparison_ = new global::Envoy.Config.Filter.Accesslog.V2.ComparisonFilter();
        }
        Comparison.MergeFrom(other.Comparison);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (comparison_ == null) {
              comparison_ = new global::Envoy.Config.Filter.Accesslog.V2.ComparisonFilter();
            }
            input.ReadMessage(comparison_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Filters on total request duration in milliseconds.
  /// </summary>
  public sealed partial class DurationFilter : pb::IMessage<DurationFilter> {
    private static readonly pb::MessageParser<DurationFilter> _parser = new pb::MessageParser<DurationFilter>(() => new DurationFilter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DurationFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DurationFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DurationFilter(DurationFilter other) : this() {
      Comparison = other.comparison_ != null ? other.Comparison.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DurationFilter Clone() {
      return new DurationFilter(this);
    }

    /// <summary>Field number for the "comparison" field.</summary>
    public const int ComparisonFieldNumber = 1;
    private global::Envoy.Config.Filter.Accesslog.V2.ComparisonFilter comparison_;
    /// <summary>
    /// Comparison.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Accesslog.V2.ComparisonFilter Comparison {
      get { return comparison_; }
      set {
        comparison_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DurationFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DurationFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Comparison, other.Comparison)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (comparison_ != null) hash ^= Comparison.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (comparison_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Comparison);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (comparison_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Comparison);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DurationFilter other) {
      if (other == null) {
        return;
      }
      if (other.comparison_ != null) {
        if (comparison_ == null) {
          comparison_ = new global::Envoy.Config.Filter.Accesslog.V2.ComparisonFilter();
        }
        Comparison.MergeFrom(other.Comparison);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (comparison_ == null) {
              comparison_ = new global::Envoy.Config.Filter.Accesslog.V2.ComparisonFilter();
            }
            input.ReadMessage(comparison_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Filters for requests that are not health check requests. A health check
  /// request is marked by the health check filter.
  /// </summary>
  public sealed partial class NotHealthCheckFilter : pb::IMessage<NotHealthCheckFilter> {
    private static readonly pb::MessageParser<NotHealthCheckFilter> _parser = new pb::MessageParser<NotHealthCheckFilter>(() => new NotHealthCheckFilter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotHealthCheckFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotHealthCheckFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotHealthCheckFilter(NotHealthCheckFilter other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotHealthCheckFilter Clone() {
      return new NotHealthCheckFilter(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotHealthCheckFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotHealthCheckFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotHealthCheckFilter other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Filters for requests that are traceable. See the tracing overview for more
  /// information on how a request becomes traceable.
  /// </summary>
  public sealed partial class TraceableFilter : pb::IMessage<TraceableFilter> {
    private static readonly pb::MessageParser<TraceableFilter> _parser = new pb::MessageParser<TraceableFilter>(() => new TraceableFilter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TraceableFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceableFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceableFilter(TraceableFilter other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceableFilter Clone() {
      return new TraceableFilter(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TraceableFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TraceableFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TraceableFilter other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Filters for random sampling of requests.
  /// </summary>
  public sealed partial class RuntimeFilter : pb::IMessage<RuntimeFilter> {
    private static readonly pb::MessageParser<RuntimeFilter> _parser = new pb::MessageParser<RuntimeFilter>(() => new RuntimeFilter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RuntimeFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuntimeFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuntimeFilter(RuntimeFilter other) : this() {
      runtimeKey_ = other.runtimeKey_;
      PercentSampled = other.percentSampled_ != null ? other.PercentSampled.Clone() : null;
      useIndependentRandomness_ = other.useIndependentRandomness_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuntimeFilter Clone() {
      return new RuntimeFilter(this);
    }

    /// <summary>Field number for the "runtime_key" field.</summary>
    public const int RuntimeKeyFieldNumber = 1;
    private string runtimeKey_ = "";
    /// <summary>
    /// Runtime key to get an optional overridden numerator for use in the *percent_sampled* field.
    /// If found in runtime, this value will replace the default numerator.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RuntimeKey {
      get { return runtimeKey_; }
      set {
        runtimeKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "percent_sampled" field.</summary>
    public const int PercentSampledFieldNumber = 2;
    private global::Envoy.Type.FractionalPercent percentSampled_;
    /// <summary>
    /// The default sampling percentage. If not specified, defaults to 0% with denominator of 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Type.FractionalPercent PercentSampled {
      get { return percentSampled_; }
      set {
        percentSampled_ = value;
      }
    }

    /// <summary>Field number for the "use_independent_randomness" field.</summary>
    public const int UseIndependentRandomnessFieldNumber = 3;
    private bool useIndependentRandomness_;
    /// <summary>
    /// By default, sampling pivots on the header
    /// :ref:`x-request-id&lt;config_http_conn_man_headers_x-request-id>` being present. If
    /// :ref:`x-request-id&lt;config_http_conn_man_headers_x-request-id>` is present, the filter will
    /// consistently sample across multiple hosts based on the runtime key value and the value
    /// extracted from :ref:`x-request-id&lt;config_http_conn_man_headers_x-request-id>`. If it is
    /// missing, or *use_independent_randomness* is set to true, the filter will randomly sample based
    /// on the runtime key value alone. *use_independent_randomness* can be used for logging kill
    /// switches within complex nested :ref:`AndFilter
    /// &lt;envoy_api_msg_config.filter.accesslog.v2.AndFilter>` and :ref:`OrFilter
    /// &lt;envoy_api_msg_config.filter.accesslog.v2.OrFilter>` blocks that are easier to reason about
    /// from a probability perspective (i.e., setting to true will cause the filter to behave like
    /// an independent random variable when composed within logical operator filters).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseIndependentRandomness {
      get { return useIndependentRandomness_; }
      set {
        useIndependentRandomness_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RuntimeFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RuntimeFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RuntimeKey != other.RuntimeKey) return false;
      if (!object.Equals(PercentSampled, other.PercentSampled)) return false;
      if (UseIndependentRandomness != other.UseIndependentRandomness) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RuntimeKey.Length != 0) hash ^= RuntimeKey.GetHashCode();
      if (percentSampled_ != null) hash ^= PercentSampled.GetHashCode();
      if (UseIndependentRandomness != false) hash ^= UseIndependentRandomness.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RuntimeKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RuntimeKey);
      }
      if (percentSampled_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PercentSampled);
      }
      if (UseIndependentRandomness != false) {
        output.WriteRawTag(24);
        output.WriteBool(UseIndependentRandomness);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RuntimeKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RuntimeKey);
      }
      if (percentSampled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PercentSampled);
      }
      if (UseIndependentRandomness != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RuntimeFilter other) {
      if (other == null) {
        return;
      }
      if (other.RuntimeKey.Length != 0) {
        RuntimeKey = other.RuntimeKey;
      }
      if (other.percentSampled_ != null) {
        if (percentSampled_ == null) {
          percentSampled_ = new global::Envoy.Type.FractionalPercent();
        }
        PercentSampled.MergeFrom(other.PercentSampled);
      }
      if (other.UseIndependentRandomness != false) {
        UseIndependentRandomness = other.UseIndependentRandomness;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RuntimeKey = input.ReadString();
            break;
          }
          case 18: {
            if (percentSampled_ == null) {
              percentSampled_ = new global::Envoy.Type.FractionalPercent();
            }
            input.ReadMessage(percentSampled_);
            break;
          }
          case 24: {
            UseIndependentRandomness = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Performs a logical “and” operation on the result of each filter in filters.
  /// Filters are evaluated sequentially and if one of them returns false, the
  /// filter returns false immediately.
  /// </summary>
  public sealed partial class AndFilter : pb::IMessage<AndFilter> {
    private static readonly pb::MessageParser<AndFilter> _parser = new pb::MessageParser<AndFilter>(() => new AndFilter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AndFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AndFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AndFilter(AndFilter other) : this() {
      filters_ = other.filters_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AndFilter Clone() {
      return new AndFilter(this);
    }

    /// <summary>Field number for the "filters" field.</summary>
    public const int FiltersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter> _repeated_filters_codec
        = pb::FieldCodec.ForMessage(10, global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter> filters_ = new pbc::RepeatedField<global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter> Filters {
      get { return filters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AndFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AndFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!filters_.Equals(other.filters_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= filters_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      filters_.WriteTo(output, _repeated_filters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += filters_.CalculateSize(_repeated_filters_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AndFilter other) {
      if (other == null) {
        return;
      }
      filters_.Add(other.filters_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            filters_.AddEntriesFrom(input, _repeated_filters_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Performs a logical “or” operation on the result of each individual filter.
  /// Filters are evaluated sequentially and if one of them returns true, the
  /// filter returns true immediately.
  /// </summary>
  public sealed partial class OrFilter : pb::IMessage<OrFilter> {
    private static readonly pb::MessageParser<OrFilter> _parser = new pb::MessageParser<OrFilter>(() => new OrFilter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrFilter(OrFilter other) : this() {
      filters_ = other.filters_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrFilter Clone() {
      return new OrFilter(this);
    }

    /// <summary>Field number for the "filters" field.</summary>
    public const int FiltersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter> _repeated_filters_codec
        = pb::FieldCodec.ForMessage(18, global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter> filters_ = new pbc::RepeatedField<global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter> Filters {
      get { return filters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!filters_.Equals(other.filters_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= filters_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      filters_.WriteTo(output, _repeated_filters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += filters_.CalculateSize(_repeated_filters_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrFilter other) {
      if (other == null) {
        return;
      }
      filters_.Add(other.filters_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            filters_.AddEntriesFrom(input, _repeated_filters_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Filters requests based on the presence or value of a request header.
  /// </summary>
  public sealed partial class HeaderFilter : pb::IMessage<HeaderFilter> {
    private static readonly pb::MessageParser<HeaderFilter> _parser = new pb::MessageParser<HeaderFilter>(() => new HeaderFilter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeaderFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeaderFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeaderFilter(HeaderFilter other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeaderFilter Clone() {
      return new HeaderFilter(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Envoy.Api.V2.Route.HeaderMatcher header_;
    /// <summary>
    /// Only requests with a header which matches the specified HeaderMatcher will pass the filter
    /// check.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Route.HeaderMatcher Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeaderFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeaderFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeaderFilter other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Envoy.Api.V2.Route.HeaderMatcher();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Envoy.Api.V2.Route.HeaderMatcher();
            }
            input.ReadMessage(header_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
