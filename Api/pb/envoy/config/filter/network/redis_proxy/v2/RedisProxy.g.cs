// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/config/filter/network/redis_proxy/v2/redis_proxy.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Config.Filter.Network.RedisProxy.V2 {

  /// <summary>Holder for reflection information generated from envoy/config/filter/network/redis_proxy/v2/redis_proxy.proto</summary>
  public static partial class RedisProxyReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/config/filter/network/redis_proxy/v2/redis_proxy.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RedisProxyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjxlbnZveS9jb25maWcvZmlsdGVyL25ldHdvcmsvcmVkaXNfcHJveHkvdjIv",
            "cmVkaXNfcHJveHkucHJvdG8SKmVudm95LmNvbmZpZy5maWx0ZXIubmV0d29y",
            "ay5yZWRpc19wcm94eS52MhoeZ29vZ2xlL3Byb3RvYnVmL2R1cmF0aW9uLnBy",
            "b3RvGhd2YWxpZGF0ZS92YWxpZGF0ZS5wcm90bxoUZ29nb3Byb3RvL2dvZ28u",
            "cHJvdG8iggIKClJlZGlzUHJveHkSHgoLc3RhdF9wcmVmaXgYASABKAlCCbrp",
            "wAMEcgIgARIaCgdjbHVzdGVyGAIgASgJQgm66cADBHICIAESZQoIc2V0dGlu",
            "Z3MYAyABKAsyRy5lbnZveS5jb25maWcuZmlsdGVyLm5ldHdvcmsucmVkaXNf",
            "cHJveHkudjIuUmVkaXNQcm94eS5Db25uUG9vbFNldHRpbmdzQgq66cADBYoB",
            "AhABGlEKEENvbm5Qb29sU2V0dGluZ3MSPQoKb3BfdGltZW91dBgBIAEoCzIZ",
            "Lmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbkIOuunAAwWqAQIIAZjfHwFCBFoC",
            "djJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, global::Gogoproto.GogoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Network.RedisProxy.V2.RedisProxy), global::Envoy.Config.Filter.Network.RedisProxy.V2.RedisProxy.Parser, new[]{ "StatPrefix", "Cluster", "Settings" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Network.RedisProxy.V2.RedisProxy.Types.ConnPoolSettings), global::Envoy.Config.Filter.Network.RedisProxy.V2.RedisProxy.Types.ConnPoolSettings.Parser, new[]{ "OpTimeout" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RedisProxy : pb::IMessage<RedisProxy> {
    private static readonly pb::MessageParser<RedisProxy> _parser = new pb::MessageParser<RedisProxy>(() => new RedisProxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedisProxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Network.RedisProxy.V2.RedisProxyReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedisProxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedisProxy(RedisProxy other) : this() {
      statPrefix_ = other.statPrefix_;
      cluster_ = other.cluster_;
      Settings = other.settings_ != null ? other.Settings.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedisProxy Clone() {
      return new RedisProxy(this);
    }

    /// <summary>Field number for the "stat_prefix" field.</summary>
    public const int StatPrefixFieldNumber = 1;
    private string statPrefix_ = "";
    /// <summary>
    /// The prefix to use when emitting :ref:`statistics &lt;config_network_filters_redis_proxy_stats>`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StatPrefix {
      get { return statPrefix_; }
      set {
        statPrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cluster" field.</summary>
    public const int ClusterFieldNumber = 2;
    private string cluster_ = "";
    /// <summary>
    /// Name of cluster from cluster manager. See the :ref:`configuration section
    /// &lt;arch_overview_redis_configuration>` of the architecture overview for recommendations on
    /// configuring the backing cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cluster {
      get { return cluster_; }
      set {
        cluster_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "settings" field.</summary>
    public const int SettingsFieldNumber = 3;
    private global::Envoy.Config.Filter.Network.RedisProxy.V2.RedisProxy.Types.ConnPoolSettings settings_;
    /// <summary>
    /// Network settings for the connection pool to the upstream cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Network.RedisProxy.V2.RedisProxy.Types.ConnPoolSettings Settings {
      get { return settings_; }
      set {
        settings_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RedisProxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RedisProxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatPrefix != other.StatPrefix) return false;
      if (Cluster != other.Cluster) return false;
      if (!object.Equals(Settings, other.Settings)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatPrefix.Length != 0) hash ^= StatPrefix.GetHashCode();
      if (Cluster.Length != 0) hash ^= Cluster.GetHashCode();
      if (settings_ != null) hash ^= Settings.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatPrefix.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StatPrefix);
      }
      if (Cluster.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Cluster);
      }
      if (settings_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Settings);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatPrefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatPrefix);
      }
      if (Cluster.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cluster);
      }
      if (settings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Settings);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RedisProxy other) {
      if (other == null) {
        return;
      }
      if (other.StatPrefix.Length != 0) {
        StatPrefix = other.StatPrefix;
      }
      if (other.Cluster.Length != 0) {
        Cluster = other.Cluster;
      }
      if (other.settings_ != null) {
        if (settings_ == null) {
          settings_ = new global::Envoy.Config.Filter.Network.RedisProxy.V2.RedisProxy.Types.ConnPoolSettings();
        }
        Settings.MergeFrom(other.Settings);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StatPrefix = input.ReadString();
            break;
          }
          case 18: {
            Cluster = input.ReadString();
            break;
          }
          case 26: {
            if (settings_ == null) {
              settings_ = new global::Envoy.Config.Filter.Network.RedisProxy.V2.RedisProxy.Types.ConnPoolSettings();
            }
            input.ReadMessage(settings_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RedisProxy message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Redis connection pool settings.
      /// </summary>
      public sealed partial class ConnPoolSettings : pb::IMessage<ConnPoolSettings> {
        private static readonly pb::MessageParser<ConnPoolSettings> _parser = new pb::MessageParser<ConnPoolSettings>(() => new ConnPoolSettings());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ConnPoolSettings> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Config.Filter.Network.RedisProxy.V2.RedisProxy.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConnPoolSettings() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConnPoolSettings(ConnPoolSettings other) : this() {
          OpTimeout = other.opTimeout_ != null ? other.OpTimeout.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConnPoolSettings Clone() {
          return new ConnPoolSettings(this);
        }

        /// <summary>Field number for the "op_timeout" field.</summary>
        public const int OpTimeoutFieldNumber = 1;
        private global::Google.Protobuf.WellKnownTypes.Duration opTimeout_;
        /// <summary>
        /// Per-operation timeout in milliseconds. The timer starts when the first
        /// command of a pipeline is written to the backend connection. Each response received from Redis
        /// resets the timer since it signifies that the next command is being processed by the backend.
        /// The only exception to this behavior is when a connection to a backend is not yet established.
        /// In that case, the connect timeout on the cluster will govern the timeout until the connection
        /// is ready.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Duration OpTimeout {
          get { return opTimeout_; }
          set {
            opTimeout_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ConnPoolSettings);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ConnPoolSettings other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(OpTimeout, other.OpTimeout)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (opTimeout_ != null) hash ^= OpTimeout.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (opTimeout_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(OpTimeout);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (opTimeout_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(OpTimeout);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ConnPoolSettings other) {
          if (other == null) {
            return;
          }
          if (other.opTimeout_ != null) {
            if (opTimeout_ == null) {
              opTimeout_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            OpTimeout.MergeFrom(other.OpTimeout);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (opTimeout_ == null) {
                  opTimeout_ = new global::Google.Protobuf.WellKnownTypes.Duration();
                }
                input.ReadMessage(opTimeout_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
