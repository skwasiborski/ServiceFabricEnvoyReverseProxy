// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/config/filter/http/fault/v2/fault.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Config.Filter.Http.Fault.V2 {

  /// <summary>Holder for reflection information generated from envoy/config/filter/http/fault/v2/fault.proto</summary>
  public static partial class FaultReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/config/filter/http/fault/v2/fault.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FaultReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci1lbnZveS9jb25maWcvZmlsdGVyL2h0dHAvZmF1bHQvdjIvZmF1bHQucHJv",
            "dG8SIWVudm95LmNvbmZpZy5maWx0ZXIuaHR0cC5mYXVsdC52MhooZW52b3kv",
            "Y29uZmlnL2ZpbHRlci9mYXVsdC92Mi9mYXVsdC5wcm90bxoeZW52b3kvYXBp",
            "L3YyL3JvdXRlL3JvdXRlLnByb3RvGhd2YWxpZGF0ZS92YWxpZGF0ZS5wcm90",
            "byJjCgpGYXVsdEFib3J0EhoKB3BlcmNlbnQYASABKA1CCbrpwAMEKgIYZBIk",
            "CgtodHRwX3N0YXR1cxgCIAEoDUINuunAAwgqBhDYBCjIAUgAQhMKCmVycm9y",
            "X3R5cGUSBbjpwAMBIuoBCglIVFRQRmF1bHQSNwoFZGVsYXkYASABKAsyKC5l",
            "bnZveS5jb25maWcuZmlsdGVyLmZhdWx0LnYyLkZhdWx0RGVsYXkSPAoFYWJv",
            "cnQYAiABKAsyLS5lbnZveS5jb25maWcuZmlsdGVyLmh0dHAuZmF1bHQudjIu",
            "RmF1bHRBYm9ydBIYChB1cHN0cmVhbV9jbHVzdGVyGAMgASgJEjIKB2hlYWRl",
            "cnMYBCADKAsyIS5lbnZveS5hcGkudjIucm91dGUuSGVhZGVyTWF0Y2hlchIY",
            "ChBkb3duc3RyZWFtX25vZGVzGAUgAygJQgRaAnYyYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Config.Filter.Fault.V2.FaultReflection.Descriptor, global::Envoy.Api.V2.Route.RouteReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Http.Fault.V2.FaultAbort), global::Envoy.Config.Filter.Http.Fault.V2.FaultAbort.Parser, new[]{ "Percent", "HttpStatus" }, new[]{ "ErrorType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Http.Fault.V2.HTTPFault), global::Envoy.Config.Filter.Http.Fault.V2.HTTPFault.Parser, new[]{ "Delay", "Abort", "UpstreamCluster", "Headers", "DownstreamNodes" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class FaultAbort : pb::IMessage<FaultAbort> {
    private static readonly pb::MessageParser<FaultAbort> _parser = new pb::MessageParser<FaultAbort>(() => new FaultAbort());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FaultAbort> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Http.Fault.V2.FaultReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FaultAbort() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FaultAbort(FaultAbort other) : this() {
      percent_ = other.percent_;
      switch (other.ErrorTypeCase) {
        case ErrorTypeOneofCase.HttpStatus:
          HttpStatus = other.HttpStatus;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FaultAbort Clone() {
      return new FaultAbort(this);
    }

    /// <summary>Field number for the "percent" field.</summary>
    public const int PercentFieldNumber = 1;
    private uint percent_;
    /// <summary>
    /// An integer between 0-100 indicating the percentage of requests/operations/connections
    /// that will be aborted with the error code provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Percent {
      get { return percent_; }
      set {
        percent_ = value;
      }
    }

    /// <summary>Field number for the "http_status" field.</summary>
    public const int HttpStatusFieldNumber = 2;
    /// <summary>
    /// HTTP status code to use to abort the HTTP request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HttpStatus {
      get { return errorTypeCase_ == ErrorTypeOneofCase.HttpStatus ? (uint) errorType_ : 0; }
      set {
        errorType_ = value;
        errorTypeCase_ = ErrorTypeOneofCase.HttpStatus;
      }
    }

    private object errorType_;
    /// <summary>Enum of possible cases for the "error_type" oneof.</summary>
    public enum ErrorTypeOneofCase {
      None = 0,
      HttpStatus = 2,
    }
    private ErrorTypeOneofCase errorTypeCase_ = ErrorTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorTypeOneofCase ErrorTypeCase {
      get { return errorTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorType() {
      errorTypeCase_ = ErrorTypeOneofCase.None;
      errorType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FaultAbort);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FaultAbort other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Percent != other.Percent) return false;
      if (HttpStatus != other.HttpStatus) return false;
      if (ErrorTypeCase != other.ErrorTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Percent != 0) hash ^= Percent.GetHashCode();
      if (errorTypeCase_ == ErrorTypeOneofCase.HttpStatus) hash ^= HttpStatus.GetHashCode();
      hash ^= (int) errorTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Percent != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Percent);
      }
      if (errorTypeCase_ == ErrorTypeOneofCase.HttpStatus) {
        output.WriteRawTag(16);
        output.WriteUInt32(HttpStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Percent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Percent);
      }
      if (errorTypeCase_ == ErrorTypeOneofCase.HttpStatus) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HttpStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FaultAbort other) {
      if (other == null) {
        return;
      }
      if (other.Percent != 0) {
        Percent = other.Percent;
      }
      switch (other.ErrorTypeCase) {
        case ErrorTypeOneofCase.HttpStatus:
          HttpStatus = other.HttpStatus;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Percent = input.ReadUInt32();
            break;
          }
          case 16: {
            HttpStatus = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HTTPFault : pb::IMessage<HTTPFault> {
    private static readonly pb::MessageParser<HTTPFault> _parser = new pb::MessageParser<HTTPFault>(() => new HTTPFault());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HTTPFault> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Http.Fault.V2.FaultReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTTPFault() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTTPFault(HTTPFault other) : this() {
      Delay = other.delay_ != null ? other.Delay.Clone() : null;
      Abort = other.abort_ != null ? other.Abort.Clone() : null;
      upstreamCluster_ = other.upstreamCluster_;
      headers_ = other.headers_.Clone();
      downstreamNodes_ = other.downstreamNodes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTTPFault Clone() {
      return new HTTPFault(this);
    }

    /// <summary>Field number for the "delay" field.</summary>
    public const int DelayFieldNumber = 1;
    private global::Envoy.Config.Filter.Fault.V2.FaultDelay delay_;
    /// <summary>
    /// If specified, the filter will inject delays based on the values in the
    /// object. At least *abort* or *delay* must be specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Fault.V2.FaultDelay Delay {
      get { return delay_; }
      set {
        delay_ = value;
      }
    }

    /// <summary>Field number for the "abort" field.</summary>
    public const int AbortFieldNumber = 2;
    private global::Envoy.Config.Filter.Http.Fault.V2.FaultAbort abort_;
    /// <summary>
    /// If specified, the filter will abort requests based on the values in
    /// the object. At least *abort* or *delay* must be specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Http.Fault.V2.FaultAbort Abort {
      get { return abort_; }
      set {
        abort_ = value;
      }
    }

    /// <summary>Field number for the "upstream_cluster" field.</summary>
    public const int UpstreamClusterFieldNumber = 3;
    private string upstreamCluster_ = "";
    /// <summary>
    /// Specifies the name of the (destination) upstream cluster that the
    /// filter should match on. Fault injection will be restricted to requests
    /// bound to the specific upstream cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpstreamCluster {
      get { return upstreamCluster_; }
      set {
        upstreamCluster_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "headers" field.</summary>
    public const int HeadersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Envoy.Api.V2.Route.HeaderMatcher> _repeated_headers_codec
        = pb::FieldCodec.ForMessage(34, global::Envoy.Api.V2.Route.HeaderMatcher.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Api.V2.Route.HeaderMatcher> headers_ = new pbc::RepeatedField<global::Envoy.Api.V2.Route.HeaderMatcher>();
    /// <summary>
    /// Specifies a set of headers that the filter should match on. The fault
    /// injection filter can be applied selectively to requests that match a set of
    /// headers specified in the fault filter config. The chances of actual fault
    /// injection further depend on the value of the :ref:`percent
    /// &lt;envoy_api_field_config.filter.http.fault.v2.FaultAbort.percent>` field. The filter will
    /// check the request's headers against all the specified headers in the filter
    /// config. A match will happen if all the headers in the config are present in
    /// the request with the same values (or based on presence if the *value* field
    /// is not in the config).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Envoy.Api.V2.Route.HeaderMatcher> Headers {
      get { return headers_; }
    }

    /// <summary>Field number for the "downstream_nodes" field.</summary>
    public const int DownstreamNodesFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_downstreamNodes_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> downstreamNodes_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Faults are injected for the specified list of downstream hosts. If this
    /// setting is not set, faults are injected for all downstream nodes.
    /// Downstream node name is taken from :ref:`the HTTP
    /// x-envoy-downstream-service-node
    /// &lt;config_http_conn_man_headers_downstream-service-node>` header and compared
    /// against downstream_nodes list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DownstreamNodes {
      get { return downstreamNodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HTTPFault);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HTTPFault other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Delay, other.Delay)) return false;
      if (!object.Equals(Abort, other.Abort)) return false;
      if (UpstreamCluster != other.UpstreamCluster) return false;
      if(!headers_.Equals(other.headers_)) return false;
      if(!downstreamNodes_.Equals(other.downstreamNodes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (delay_ != null) hash ^= Delay.GetHashCode();
      if (abort_ != null) hash ^= Abort.GetHashCode();
      if (UpstreamCluster.Length != 0) hash ^= UpstreamCluster.GetHashCode();
      hash ^= headers_.GetHashCode();
      hash ^= downstreamNodes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (delay_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Delay);
      }
      if (abort_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Abort);
      }
      if (UpstreamCluster.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UpstreamCluster);
      }
      headers_.WriteTo(output, _repeated_headers_codec);
      downstreamNodes_.WriteTo(output, _repeated_downstreamNodes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (delay_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Delay);
      }
      if (abort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Abort);
      }
      if (UpstreamCluster.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UpstreamCluster);
      }
      size += headers_.CalculateSize(_repeated_headers_codec);
      size += downstreamNodes_.CalculateSize(_repeated_downstreamNodes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HTTPFault other) {
      if (other == null) {
        return;
      }
      if (other.delay_ != null) {
        if (delay_ == null) {
          delay_ = new global::Envoy.Config.Filter.Fault.V2.FaultDelay();
        }
        Delay.MergeFrom(other.Delay);
      }
      if (other.abort_ != null) {
        if (abort_ == null) {
          abort_ = new global::Envoy.Config.Filter.Http.Fault.V2.FaultAbort();
        }
        Abort.MergeFrom(other.Abort);
      }
      if (other.UpstreamCluster.Length != 0) {
        UpstreamCluster = other.UpstreamCluster;
      }
      headers_.Add(other.headers_);
      downstreamNodes_.Add(other.downstreamNodes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (delay_ == null) {
              delay_ = new global::Envoy.Config.Filter.Fault.V2.FaultDelay();
            }
            input.ReadMessage(delay_);
            break;
          }
          case 18: {
            if (abort_ == null) {
              abort_ = new global::Envoy.Config.Filter.Http.Fault.V2.FaultAbort();
            }
            input.ReadMessage(abort_);
            break;
          }
          case 26: {
            UpstreamCluster = input.ReadString();
            break;
          }
          case 34: {
            headers_.AddEntriesFrom(input, _repeated_headers_codec);
            break;
          }
          case 42: {
            downstreamNodes_.AddEntriesFrom(input, _repeated_downstreamNodes_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
