// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/config/filter/http/jwt_authn/v2alpha/config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Config.Filter.Http.JwtAuthn.V2Alpha {

  /// <summary>Holder for reflection information generated from envoy/config/filter/http/jwt_authn/v2alpha/config.proto</summary>
  public static partial class ConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/config/filter/http/jwt_authn/v2alpha/config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjdlbnZveS9jb25maWcvZmlsdGVyL2h0dHAvand0X2F1dGhuL3YyYWxwaGEv",
            "Y29uZmlnLnByb3RvEiplbnZveS5jb25maWcuZmlsdGVyLmh0dHAuand0X2F1",
            "dGhuLnYyYWxwaGEaHGVudm95L2FwaS92Mi9jb3JlL2Jhc2UucHJvdG8aIGVu",
            "dm95L2FwaS92Mi9jb3JlL2h0dHBfdXJpLnByb3RvGh5lbnZveS9hcGkvdjIv",
            "cm91dGUvcm91dGUucHJvdG8aHmdvb2dsZS9wcm90b2J1Zi9kdXJhdGlvbi5w",
            "cm90bxoXdmFsaWRhdGUvdmFsaWRhdGUucHJvdG8i7gIKB0p3dFJ1bGUSGQoG",
            "aXNzdWVyGAEgASgJQgm66cADBHICIAESEQoJYXVkaWVuY2VzGAIgAygJEk0K",
            "C3JlbW90ZV9qd2tzGAMgASgLMjYuZW52b3kuY29uZmlnLmZpbHRlci5odHRw",
            "Lmp3dF9hdXRobi52MmFscGhhLlJlbW90ZUp3a3NIABIzCgpsb2NhbF9qd2tz",
            "GAQgASgLMh0uZW52b3kuYXBpLnYyLmNvcmUuRGF0YVNvdXJjZUgAEg8KB2Zv",
            "cndhcmQYBSABKAgSSwoMZnJvbV9oZWFkZXJzGAYgAygLMjUuZW52b3kuY29u",
            "ZmlnLmZpbHRlci5odHRwLmp3dF9hdXRobi52MmFscGhhLkp3dEhlYWRlchIT",
            "Cgtmcm9tX3BhcmFtcxgHIAMoCRIeChZmb3J3YXJkX3BheWxvYWRfaGVhZGVy",
            "GAggASgJQh4KFWp3a3Nfc291cmNlX3NwZWNpZmllchIFuOnAAwEibQoKUmVt",
            "b3RlSndrcxIsCghodHRwX3VyaRgBIAEoCzIaLmVudm95LmFwaS52Mi5jb3Jl",
            "Lkh0dHBVcmkSMQoOY2FjaGVfZHVyYXRpb24YAiABKAsyGS5nb29nbGUucHJv",
            "dG9idWYuRHVyYXRpb24iOgoJSnd0SGVhZGVyEhcKBG5hbWUYASABKAlCCbrp",
            "wAMEcgIgARIUCgx2YWx1ZV9wcmVmaXgYAiABKAkiqAEKEUp3dEF1dGhlbnRp",
            "Y2F0aW9uEkIKBXJ1bGVzGAEgAygLMjMuZW52b3kuY29uZmlnLmZpbHRlci5o",
            "dHRwLmp3dF9hdXRobi52MmFscGhhLkp3dFJ1bGUSHwoXYWxsb3dfbWlzc2lu",
            "Z19vcl9mYWlsZWQYAiABKAgSLgoGYnlwYXNzGAMgAygLMh4uZW52b3kuYXBp",
            "LnYyLnJvdXRlLlJvdXRlTWF0Y2hiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Api.V2.Core.BaseReflection.Descriptor, global::Envoy.Api.V2.Core.HttpUriReflection.Descriptor, global::Envoy.Api.V2.Route.RouteReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Http.JwtAuthn.V2Alpha.JwtRule), global::Envoy.Config.Filter.Http.JwtAuthn.V2Alpha.JwtRule.Parser, new[]{ "Issuer", "Audiences", "RemoteJwks", "LocalJwks", "Forward", "FromHeaders", "FromParams", "ForwardPayloadHeader" }, new[]{ "JwksSourceSpecifier" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Http.JwtAuthn.V2Alpha.RemoteJwks), global::Envoy.Config.Filter.Http.JwtAuthn.V2Alpha.RemoteJwks.Parser, new[]{ "HttpUri", "CacheDuration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Http.JwtAuthn.V2Alpha.JwtHeader), global::Envoy.Config.Filter.Http.JwtAuthn.V2Alpha.JwtHeader.Parser, new[]{ "Name", "ValuePrefix" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Http.JwtAuthn.V2Alpha.JwtAuthentication), global::Envoy.Config.Filter.Http.JwtAuthn.V2Alpha.JwtAuthentication.Parser, new[]{ "Rules", "AllowMissingOrFailed", "Bypass" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// This message specifies how a JSON Web Token (JWT) can be verified. JWT format is defined
  /// `here &lt;https://tools.ietf.org/html/rfc7519>`_. Please see `OAuth2.0
  ///  &lt;https://tools.ietf.org/html/rfc6749>`_ and `OIDC1.0  &lt;http://openid.net/connect>`_ for
  /// the authentication flow.
  ///
  /// Example:
  ///
  /// .. code-block:: yaml
  ///
  ///     issuer: https://example.com
  ///     audiences:
  ///     - bookstore_android.apps.googleusercontent.com
  ///       bookstore_web.apps.googleusercontent.com
  ///     remote_jwks:
  ///     - http_uri:
  ///       - uri: https://example.com/.well-known/jwks.json
  ///         cluster: example_jwks_cluster
  ///       cache_duration:
  ///       - seconds: 300
  ///
  /// [#not-implemented-hide:]
  /// </summary>
  public sealed partial class JwtRule : pb::IMessage<JwtRule> {
    private static readonly pb::MessageParser<JwtRule> _parser = new pb::MessageParser<JwtRule>(() => new JwtRule());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JwtRule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Http.JwtAuthn.V2Alpha.ConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JwtRule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JwtRule(JwtRule other) : this() {
      issuer_ = other.issuer_;
      audiences_ = other.audiences_.Clone();
      forward_ = other.forward_;
      fromHeaders_ = other.fromHeaders_.Clone();
      fromParams_ = other.fromParams_.Clone();
      forwardPayloadHeader_ = other.forwardPayloadHeader_;
      switch (other.JwksSourceSpecifierCase) {
        case JwksSourceSpecifierOneofCase.RemoteJwks:
          RemoteJwks = other.RemoteJwks.Clone();
          break;
        case JwksSourceSpecifierOneofCase.LocalJwks:
          LocalJwks = other.LocalJwks.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JwtRule Clone() {
      return new JwtRule(this);
    }

    /// <summary>Field number for the "issuer" field.</summary>
    public const int IssuerFieldNumber = 1;
    private string issuer_ = "";
    /// <summary>
    /// Identifies the principal that issued the JWT. See `here
    ///  &lt;https://tools.ietf.org/html/rfc7519#section-4.1.1>`_. Usually a URL or an email address.
    ///
    /// Example: https://securetoken.google.com
    /// Example: 1234567-compute@developer.gserviceaccount.com
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Issuer {
      get { return issuer_; }
      set {
        issuer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "audiences" field.</summary>
    public const int AudiencesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_audiences_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> audiences_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The list of JWT `audiences &lt;https://tools.ietf.org/html/rfc7519#section-4.1.3>`_. that are
    /// allowed to access. A JWT containing any of these audiences will be accepted. If not specified,
    /// will not check audiences in the token.
    ///
    /// Example:
    ///
    /// .. code-block:: yaml
    ///
    ///     audiences:
    ///     - bookstore_android.apps.googleusercontent.com
    ///       bookstore_web.apps.googleusercontent.com
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Audiences {
      get { return audiences_; }
    }

    /// <summary>Field number for the "remote_jwks" field.</summary>
    public const int RemoteJwksFieldNumber = 3;
    /// <summary>
    /// JWKS can be fetched from remote server via HTTP/HTTPS. This field specifies the remote HTTP
    /// URI and how the fetched JWKS should be cached.
    ///
    /// Example:
    ///
    /// .. code-block:: yaml
    ///
    ///    remote_jwks:
    ///    - http_uri:
    ///      - uri: https://www.googleapis.com/oauth2/v1/certs
    ///        cluster: jwt.www.googleapis.com|443
    ///      cache_duration:
    ///      - seconds: 300
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Http.JwtAuthn.V2Alpha.RemoteJwks RemoteJwks {
      get { return jwksSourceSpecifierCase_ == JwksSourceSpecifierOneofCase.RemoteJwks ? (global::Envoy.Config.Filter.Http.JwtAuthn.V2Alpha.RemoteJwks) jwksSourceSpecifier_ : null; }
      set {
        jwksSourceSpecifier_ = value;
        jwksSourceSpecifierCase_ = value == null ? JwksSourceSpecifierOneofCase.None : JwksSourceSpecifierOneofCase.RemoteJwks;
      }
    }

    /// <summary>Field number for the "local_jwks" field.</summary>
    public const int LocalJwksFieldNumber = 4;
    /// <summary>
    /// JWKS is in local data source. It could be either in a local file or embedded in the
    /// inline_string.
    ///
    /// Example: local file
    ///
    /// .. code-block:: yaml
    ///
    ///    local_jwks:
    ///    - filename: /etc/envoy/jwks/jwks1.txt
    ///
    /// Example: inline_string
    ///
    /// .. code-block:: yaml
    ///
    ///    local_jwks:
    ///    - inline_string: "ACADADADADA"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.DataSource LocalJwks {
      get { return jwksSourceSpecifierCase_ == JwksSourceSpecifierOneofCase.LocalJwks ? (global::Envoy.Api.V2.Core.DataSource) jwksSourceSpecifier_ : null; }
      set {
        jwksSourceSpecifier_ = value;
        jwksSourceSpecifierCase_ = value == null ? JwksSourceSpecifierOneofCase.None : JwksSourceSpecifierOneofCase.LocalJwks;
      }
    }

    /// <summary>Field number for the "forward" field.</summary>
    public const int ForwardFieldNumber = 5;
    private bool forward_;
    /// <summary>
    /// If false, the JWT is removed in the request after a success verification. If true, the JWT is
    /// not removed in the request. Default value is false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Forward {
      get { return forward_; }
      set {
        forward_ = value;
      }
    }

    /// <summary>Field number for the "from_headers" field.</summary>
    public const int FromHeadersFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Envoy.Config.Filter.Http.JwtAuthn.V2Alpha.JwtHeader> _repeated_fromHeaders_codec
        = pb::FieldCodec.ForMessage(50, global::Envoy.Config.Filter.Http.JwtAuthn.V2Alpha.JwtHeader.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Config.Filter.Http.JwtAuthn.V2Alpha.JwtHeader> fromHeaders_ = new pbc::RepeatedField<global::Envoy.Config.Filter.Http.JwtAuthn.V2Alpha.JwtHeader>();
    /// <summary>
    /// Specify the HTTP headers to extract JWT token. For examples, following config:
    ///
    /// .. code-block:: yaml
    ///
    ///   from_headers:
    ///   - name: x-goog-iap-jwt-assertion
    ///
    /// can be used to extract token from header::
    ///
    ///   x-goog-iap-jwt-assertion: &lt;JWT>.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Envoy.Config.Filter.Http.JwtAuthn.V2Alpha.JwtHeader> FromHeaders {
      get { return fromHeaders_; }
    }

    /// <summary>Field number for the "from_params" field.</summary>
    public const int FromParamsFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_fromParams_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> fromParams_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// JWT is sent in a query parameter. `jwt_params` represents the query parameter names.
    ///
    /// For example, if config is:
    ///
    /// .. code-block:: yaml
    ///
    ///   from_params:
    ///   - jwt_token
    ///
    /// The JWT format in query parameter is::
    ///
    ///    /path?jwt_token=&lt;JWT>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FromParams {
      get { return fromParams_; }
    }

    /// <summary>Field number for the "forward_payload_header" field.</summary>
    public const int ForwardPayloadHeaderFieldNumber = 8;
    private string forwardPayloadHeader_ = "";
    /// <summary>
    /// This field specifies the header name to forward a successfully verified JWT payload to the
    /// backend. The forwarded data is::
    ///
    ///    base64_encoded(jwt_payload_in_JSON)
    ///
    /// If it is not specified, the payload will not be forwarded.
    /// Multiple JWTs in a request from different issuers will be supported. Multiple JWTs from the
    /// same issuer will not be supported. Each issuer can config this `forward_payload_header`. If
    /// multiple JWTs from different issuers want to forward their payloads, their
    /// `forward_payload_header` should be different.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ForwardPayloadHeader {
      get { return forwardPayloadHeader_; }
      set {
        forwardPayloadHeader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object jwksSourceSpecifier_;
    /// <summary>Enum of possible cases for the "jwks_source_specifier" oneof.</summary>
    public enum JwksSourceSpecifierOneofCase {
      None = 0,
      RemoteJwks = 3,
      LocalJwks = 4,
    }
    private JwksSourceSpecifierOneofCase jwksSourceSpecifierCase_ = JwksSourceSpecifierOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JwksSourceSpecifierOneofCase JwksSourceSpecifierCase {
      get { return jwksSourceSpecifierCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearJwksSourceSpecifier() {
      jwksSourceSpecifierCase_ = JwksSourceSpecifierOneofCase.None;
      jwksSourceSpecifier_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JwtRule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JwtRule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Issuer != other.Issuer) return false;
      if(!audiences_.Equals(other.audiences_)) return false;
      if (!object.Equals(RemoteJwks, other.RemoteJwks)) return false;
      if (!object.Equals(LocalJwks, other.LocalJwks)) return false;
      if (Forward != other.Forward) return false;
      if(!fromHeaders_.Equals(other.fromHeaders_)) return false;
      if(!fromParams_.Equals(other.fromParams_)) return false;
      if (ForwardPayloadHeader != other.ForwardPayloadHeader) return false;
      if (JwksSourceSpecifierCase != other.JwksSourceSpecifierCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Issuer.Length != 0) hash ^= Issuer.GetHashCode();
      hash ^= audiences_.GetHashCode();
      if (jwksSourceSpecifierCase_ == JwksSourceSpecifierOneofCase.RemoteJwks) hash ^= RemoteJwks.GetHashCode();
      if (jwksSourceSpecifierCase_ == JwksSourceSpecifierOneofCase.LocalJwks) hash ^= LocalJwks.GetHashCode();
      if (Forward != false) hash ^= Forward.GetHashCode();
      hash ^= fromHeaders_.GetHashCode();
      hash ^= fromParams_.GetHashCode();
      if (ForwardPayloadHeader.Length != 0) hash ^= ForwardPayloadHeader.GetHashCode();
      hash ^= (int) jwksSourceSpecifierCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Issuer.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Issuer);
      }
      audiences_.WriteTo(output, _repeated_audiences_codec);
      if (jwksSourceSpecifierCase_ == JwksSourceSpecifierOneofCase.RemoteJwks) {
        output.WriteRawTag(26);
        output.WriteMessage(RemoteJwks);
      }
      if (jwksSourceSpecifierCase_ == JwksSourceSpecifierOneofCase.LocalJwks) {
        output.WriteRawTag(34);
        output.WriteMessage(LocalJwks);
      }
      if (Forward != false) {
        output.WriteRawTag(40);
        output.WriteBool(Forward);
      }
      fromHeaders_.WriteTo(output, _repeated_fromHeaders_codec);
      fromParams_.WriteTo(output, _repeated_fromParams_codec);
      if (ForwardPayloadHeader.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ForwardPayloadHeader);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Issuer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Issuer);
      }
      size += audiences_.CalculateSize(_repeated_audiences_codec);
      if (jwksSourceSpecifierCase_ == JwksSourceSpecifierOneofCase.RemoteJwks) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RemoteJwks);
      }
      if (jwksSourceSpecifierCase_ == JwksSourceSpecifierOneofCase.LocalJwks) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalJwks);
      }
      if (Forward != false) {
        size += 1 + 1;
      }
      size += fromHeaders_.CalculateSize(_repeated_fromHeaders_codec);
      size += fromParams_.CalculateSize(_repeated_fromParams_codec);
      if (ForwardPayloadHeader.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ForwardPayloadHeader);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JwtRule other) {
      if (other == null) {
        return;
      }
      if (other.Issuer.Length != 0) {
        Issuer = other.Issuer;
      }
      audiences_.Add(other.audiences_);
      if (other.Forward != false) {
        Forward = other.Forward;
      }
      fromHeaders_.Add(other.fromHeaders_);
      fromParams_.Add(other.fromParams_);
      if (other.ForwardPayloadHeader.Length != 0) {
        ForwardPayloadHeader = other.ForwardPayloadHeader;
      }
      switch (other.JwksSourceSpecifierCase) {
        case JwksSourceSpecifierOneofCase.RemoteJwks:
          if (RemoteJwks == null) {
            RemoteJwks = new global::Envoy.Config.Filter.Http.JwtAuthn.V2Alpha.RemoteJwks();
          }
          RemoteJwks.MergeFrom(other.RemoteJwks);
          break;
        case JwksSourceSpecifierOneofCase.LocalJwks:
          if (LocalJwks == null) {
            LocalJwks = new global::Envoy.Api.V2.Core.DataSource();
          }
          LocalJwks.MergeFrom(other.LocalJwks);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Issuer = input.ReadString();
            break;
          }
          case 18: {
            audiences_.AddEntriesFrom(input, _repeated_audiences_codec);
            break;
          }
          case 26: {
            global::Envoy.Config.Filter.Http.JwtAuthn.V2Alpha.RemoteJwks subBuilder = new global::Envoy.Config.Filter.Http.JwtAuthn.V2Alpha.RemoteJwks();
            if (jwksSourceSpecifierCase_ == JwksSourceSpecifierOneofCase.RemoteJwks) {
              subBuilder.MergeFrom(RemoteJwks);
            }
            input.ReadMessage(subBuilder);
            RemoteJwks = subBuilder;
            break;
          }
          case 34: {
            global::Envoy.Api.V2.Core.DataSource subBuilder = new global::Envoy.Api.V2.Core.DataSource();
            if (jwksSourceSpecifierCase_ == JwksSourceSpecifierOneofCase.LocalJwks) {
              subBuilder.MergeFrom(LocalJwks);
            }
            input.ReadMessage(subBuilder);
            LocalJwks = subBuilder;
            break;
          }
          case 40: {
            Forward = input.ReadBool();
            break;
          }
          case 50: {
            fromHeaders_.AddEntriesFrom(input, _repeated_fromHeaders_codec);
            break;
          }
          case 58: {
            fromParams_.AddEntriesFrom(input, _repeated_fromParams_codec);
            break;
          }
          case 66: {
            ForwardPayloadHeader = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This message specifies how to fetch JWKS from remote and how to cache it.
  /// </summary>
  public sealed partial class RemoteJwks : pb::IMessage<RemoteJwks> {
    private static readonly pb::MessageParser<RemoteJwks> _parser = new pb::MessageParser<RemoteJwks>(() => new RemoteJwks());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoteJwks> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Http.JwtAuthn.V2Alpha.ConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteJwks() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteJwks(RemoteJwks other) : this() {
      HttpUri = other.httpUri_ != null ? other.HttpUri.Clone() : null;
      CacheDuration = other.cacheDuration_ != null ? other.CacheDuration.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteJwks Clone() {
      return new RemoteJwks(this);
    }

    /// <summary>Field number for the "http_uri" field.</summary>
    public const int HttpUriFieldNumber = 1;
    private global::Envoy.Api.V2.Core.HttpUri httpUri_;
    /// <summary>
    /// The HTTP URI to fetch the JWKS. For example:
    ///
    /// .. code-block:: yaml
    ///
    ///    http_uri:
    ///    - uri: https://www.googleapis.com/oauth2/v1/certs
    ///      cluster: jwt.www.googleapis.com|443
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.HttpUri HttpUri {
      get { return httpUri_; }
      set {
        httpUri_ = value;
      }
    }

    /// <summary>Field number for the "cache_duration" field.</summary>
    public const int CacheDurationFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Duration cacheDuration_;
    /// <summary>
    /// Duration after which the cached JWKS should be expired. If not specified, default cache
    /// duration is 5 minutes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration CacheDuration {
      get { return cacheDuration_; }
      set {
        cacheDuration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoteJwks);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoteJwks other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(HttpUri, other.HttpUri)) return false;
      if (!object.Equals(CacheDuration, other.CacheDuration)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (httpUri_ != null) hash ^= HttpUri.GetHashCode();
      if (cacheDuration_ != null) hash ^= CacheDuration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (httpUri_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(HttpUri);
      }
      if (cacheDuration_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CacheDuration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (httpUri_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HttpUri);
      }
      if (cacheDuration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CacheDuration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoteJwks other) {
      if (other == null) {
        return;
      }
      if (other.httpUri_ != null) {
        if (httpUri_ == null) {
          httpUri_ = new global::Envoy.Api.V2.Core.HttpUri();
        }
        HttpUri.MergeFrom(other.HttpUri);
      }
      if (other.cacheDuration_ != null) {
        if (cacheDuration_ == null) {
          cacheDuration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        CacheDuration.MergeFrom(other.CacheDuration);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (httpUri_ == null) {
              httpUri_ = new global::Envoy.Api.V2.Core.HttpUri();
            }
            input.ReadMessage(httpUri_);
            break;
          }
          case 18: {
            if (cacheDuration_ == null) {
              cacheDuration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(cacheDuration_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This message specifies a header location to extract JWT token.
  /// </summary>
  public sealed partial class JwtHeader : pb::IMessage<JwtHeader> {
    private static readonly pb::MessageParser<JwtHeader> _parser = new pb::MessageParser<JwtHeader>(() => new JwtHeader());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JwtHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Http.JwtAuthn.V2Alpha.ConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JwtHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JwtHeader(JwtHeader other) : this() {
      name_ = other.name_;
      valuePrefix_ = other.valuePrefix_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JwtHeader Clone() {
      return new JwtHeader(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The HTTP header name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value_prefix" field.</summary>
    public const int ValuePrefixFieldNumber = 2;
    private string valuePrefix_ = "";
    /// <summary>
    /// The value prefix. The value format is "value_prefix&lt;token>"
    /// For example, for "Authorization: Bearer &lt;token>", value_prefix="Bearer " with a space at the
    /// end.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ValuePrefix {
      get { return valuePrefix_; }
      set {
        valuePrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JwtHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JwtHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ValuePrefix != other.ValuePrefix) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ValuePrefix.Length != 0) hash ^= ValuePrefix.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ValuePrefix.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ValuePrefix);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ValuePrefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ValuePrefix);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JwtHeader other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ValuePrefix.Length != 0) {
        ValuePrefix = other.ValuePrefix;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            ValuePrefix = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This is the Envoy HTTP filter config for JWT authentication.
  /// [#not-implemented-hide:]
  /// </summary>
  public sealed partial class JwtAuthentication : pb::IMessage<JwtAuthentication> {
    private static readonly pb::MessageParser<JwtAuthentication> _parser = new pb::MessageParser<JwtAuthentication>(() => new JwtAuthentication());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JwtAuthentication> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Http.JwtAuthn.V2Alpha.ConfigReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JwtAuthentication() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JwtAuthentication(JwtAuthentication other) : this() {
      rules_ = other.rules_.Clone();
      allowMissingOrFailed_ = other.allowMissingOrFailed_;
      bypass_ = other.bypass_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JwtAuthentication Clone() {
      return new JwtAuthentication(this);
    }

    /// <summary>Field number for the "rules" field.</summary>
    public const int RulesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Envoy.Config.Filter.Http.JwtAuthn.V2Alpha.JwtRule> _repeated_rules_codec
        = pb::FieldCodec.ForMessage(10, global::Envoy.Config.Filter.Http.JwtAuthn.V2Alpha.JwtRule.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Config.Filter.Http.JwtAuthn.V2Alpha.JwtRule> rules_ = new pbc::RepeatedField<global::Envoy.Config.Filter.Http.JwtAuthn.V2Alpha.JwtRule>();
    /// <summary>
    /// List of JWT rules to valide.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Envoy.Config.Filter.Http.JwtAuthn.V2Alpha.JwtRule> Rules {
      get { return rules_; }
    }

    /// <summary>Field number for the "allow_missing_or_failed" field.</summary>
    public const int AllowMissingOrFailedFieldNumber = 2;
    private bool allowMissingOrFailed_;
    /// <summary>
    /// If true, the request is allowed if JWT is missing or JWT verification fails.
    /// Default is false, a request without JWT or failed JWT verification is not allowed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowMissingOrFailed {
      get { return allowMissingOrFailed_; }
      set {
        allowMissingOrFailed_ = value;
      }
    }

    /// <summary>Field number for the "bypass" field.</summary>
    public const int BypassFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Envoy.Api.V2.Route.RouteMatch> _repeated_bypass_codec
        = pb::FieldCodec.ForMessage(26, global::Envoy.Api.V2.Route.RouteMatch.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Api.V2.Route.RouteMatch> bypass_ = new pbc::RepeatedField<global::Envoy.Api.V2.Route.RouteMatch>();
    /// <summary>
    /// This field lists the patterns allowed to bypass JWT verification. This only applies when
    /// `allow_missing_or_failed_jwt` is false. Under this config, if a request doesn't have JWT, it
    /// will be rejected. But some requests still needed to be forwarded without JWT, such as OPTIONS
    /// for CORS and some health checking paths.
    ///
    /// Examples: bypass all CORS options requests
    ///
    /// .. code-block:: yaml
    ///
    ///   bypass:
    ///   - headers:
    ///     - name: :method
    ///       value: OPTIONS
    ///   - headers:
    ///     - name: :path
    ///       regex_match: /.*
    ///
    /// Examples: bypass /healthz check
    ///
    /// .. code-block:: yaml
    ///
    ///   bypass:
    ///   - headers:
    ///     - name: :method
    ///       value: GET
    ///   - headers:
    ///     - name: :path
    ///       exact_match: /healthz
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Envoy.Api.V2.Route.RouteMatch> Bypass {
      get { return bypass_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JwtAuthentication);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JwtAuthentication other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rules_.Equals(other.rules_)) return false;
      if (AllowMissingOrFailed != other.AllowMissingOrFailed) return false;
      if(!bypass_.Equals(other.bypass_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rules_.GetHashCode();
      if (AllowMissingOrFailed != false) hash ^= AllowMissingOrFailed.GetHashCode();
      hash ^= bypass_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rules_.WriteTo(output, _repeated_rules_codec);
      if (AllowMissingOrFailed != false) {
        output.WriteRawTag(16);
        output.WriteBool(AllowMissingOrFailed);
      }
      bypass_.WriteTo(output, _repeated_bypass_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rules_.CalculateSize(_repeated_rules_codec);
      if (AllowMissingOrFailed != false) {
        size += 1 + 1;
      }
      size += bypass_.CalculateSize(_repeated_bypass_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JwtAuthentication other) {
      if (other == null) {
        return;
      }
      rules_.Add(other.rules_);
      if (other.AllowMissingOrFailed != false) {
        AllowMissingOrFailed = other.AllowMissingOrFailed;
      }
      bypass_.Add(other.bypass_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rules_.AddEntriesFrom(input, _repeated_rules_codec);
            break;
          }
          case 16: {
            AllowMissingOrFailed = input.ReadBool();
            break;
          }
          case 26: {
            bypass_.AddEntriesFrom(input, _repeated_bypass_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
