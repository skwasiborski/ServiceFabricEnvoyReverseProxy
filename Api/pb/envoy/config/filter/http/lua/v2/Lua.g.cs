// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/config/filter/http/lua/v2/lua.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Config.Filter.Http.Lua.V2 {

  /// <summary>Holder for reflection information generated from envoy/config/filter/http/lua/v2/lua.proto</summary>
  public static partial class LuaReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/config/filter/http/lua/v2/lua.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LuaReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CillbnZveS9jb25maWcvZmlsdGVyL2h0dHAvbHVhL3YyL2x1YS5wcm90bxIf",
            "ZW52b3kuY29uZmlnLmZpbHRlci5odHRwLmx1YS52MhoXdmFsaWRhdGUvdmFs",
            "aWRhdGUucHJvdG8iJQoDTHVhEh4KC2lubGluZV9jb2RlGAEgASgJQgm66cAD",
            "BHICIAFCBFoCdjJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Validate.ValidateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Http.Lua.V2.Lua), global::Envoy.Config.Filter.Http.Lua.V2.Lua.Parser, new[]{ "InlineCode" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Lua : pb::IMessage<Lua> {
    private static readonly pb::MessageParser<Lua> _parser = new pb::MessageParser<Lua>(() => new Lua());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Lua> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Http.Lua.V2.LuaReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lua() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lua(Lua other) : this() {
      inlineCode_ = other.inlineCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lua Clone() {
      return new Lua(this);
    }

    /// <summary>Field number for the "inline_code" field.</summary>
    public const int InlineCodeFieldNumber = 1;
    private string inlineCode_ = "";
    /// <summary>
    /// The Lua code that Envoy will execute. This can be a very small script that
    /// further loads code from disk if desired. Note that if JSON configuration is used, the code must
    /// be properly escaped. YAML configuration may be easier to read since YAML supports multi-line
    /// strings so complex scripts can be easily expressed inline in the configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InlineCode {
      get { return inlineCode_; }
      set {
        inlineCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Lua);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Lua other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InlineCode != other.InlineCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InlineCode.Length != 0) hash ^= InlineCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InlineCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InlineCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InlineCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InlineCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Lua other) {
      if (other == null) {
        return;
      }
      if (other.InlineCode.Length != 0) {
        InlineCode = other.InlineCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InlineCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
