// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/config/filter/http/ext_authz/v2alpha/ext_authz.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Config.Filter.Http.ExtAuthz.V2Alpha {

  /// <summary>Holder for reflection information generated from envoy/config/filter/http/ext_authz/v2alpha/ext_authz.proto</summary>
  public static partial class ExtAuthzReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/config/filter/http/ext_authz/v2alpha/ext_authz.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ExtAuthzReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjplbnZveS9jb25maWcvZmlsdGVyL2h0dHAvZXh0X2F1dGh6L3YyYWxwaGEv",
            "ZXh0X2F1dGh6LnByb3RvEiplbnZveS5jb25maWcuZmlsdGVyLmh0dHAuZXh0",
            "X2F1dGh6LnYyYWxwaGEaJGVudm95L2FwaS92Mi9jb3JlL2dycGNfc2Vydmlj",
            "ZS5wcm90bxogZW52b3kvYXBpL3YyL2NvcmUvaHR0cF91cmkucHJvdG8iUgoL",
            "SHR0cFNlcnZpY2USLgoKc2VydmVyX3VyaRgBIAEoCzIaLmVudm95LmFwaS52",
            "Mi5jb3JlLkh0dHBVcmkSEwoLcGF0aF9wcmVmaXgYAiABKAkiuwEKCEV4dEF1",
            "dGh6EjYKDGdycGNfc2VydmljZRgBIAEoCzIeLmVudm95LmFwaS52Mi5jb3Jl",
            "LkdycGNTZXJ2aWNlSAASTwoMaHR0cF9zZXJ2aWNlGAMgASgLMjcuZW52b3ku",
            "Y29uZmlnLmZpbHRlci5odHRwLmV4dF9hdXRoei52MmFscGhhLkh0dHBTZXJ2",
            "aWNlSAASGgoSZmFpbHVyZV9tb2RlX2FsbG93GAIgASgIQgoKCHNlcnZpY2Vz",
            "QglaB3YyYWxwaGFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Api.V2.Core.GrpcServiceReflection.Descriptor, global::Envoy.Api.V2.Core.HttpUriReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Http.ExtAuthz.V2Alpha.HttpService), global::Envoy.Config.Filter.Http.ExtAuthz.V2Alpha.HttpService.Parser, new[]{ "ServerUri", "PathPrefix" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Http.ExtAuthz.V2Alpha.ExtAuthz), global::Envoy.Config.Filter.Http.ExtAuthz.V2Alpha.ExtAuthz.Parser, new[]{ "GrpcService", "HttpService", "FailureModeAllow" }, new[]{ "Services" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// [#not-implemented-hide:]
  /// [#comment: The HttpService is under development and will be supported soon.]
  /// </summary>
  public sealed partial class HttpService : pb::IMessage<HttpService> {
    private static readonly pb::MessageParser<HttpService> _parser = new pb::MessageParser<HttpService>(() => new HttpService());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HttpService> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Http.ExtAuthz.V2Alpha.ExtAuthzReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HttpService() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HttpService(HttpService other) : this() {
      ServerUri = other.serverUri_ != null ? other.ServerUri.Clone() : null;
      pathPrefix_ = other.pathPrefix_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HttpService Clone() {
      return new HttpService(this);
    }

    /// <summary>Field number for the "server_uri" field.</summary>
    public const int ServerUriFieldNumber = 1;
    private global::Envoy.Api.V2.Core.HttpUri serverUri_;
    /// <summary>
    /// Sets the HTTP server URI which the authorization requests must be sent to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.HttpUri ServerUri {
      get { return serverUri_; }
      set {
        serverUri_ = value;
      }
    }

    /// <summary>Field number for the "path_prefix" field.</summary>
    public const int PathPrefixFieldNumber = 2;
    private string pathPrefix_ = "";
    /// <summary>
    /// Sets an optional prefix to the value of authorization request header `path`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PathPrefix {
      get { return pathPrefix_; }
      set {
        pathPrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HttpService);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HttpService other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ServerUri, other.ServerUri)) return false;
      if (PathPrefix != other.PathPrefix) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (serverUri_ != null) hash ^= ServerUri.GetHashCode();
      if (PathPrefix.Length != 0) hash ^= PathPrefix.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (serverUri_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ServerUri);
      }
      if (PathPrefix.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PathPrefix);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (serverUri_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerUri);
      }
      if (PathPrefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PathPrefix);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HttpService other) {
      if (other == null) {
        return;
      }
      if (other.serverUri_ != null) {
        if (serverUri_ == null) {
          serverUri_ = new global::Envoy.Api.V2.Core.HttpUri();
        }
        ServerUri.MergeFrom(other.ServerUri);
      }
      if (other.PathPrefix.Length != 0) {
        PathPrefix = other.PathPrefix;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (serverUri_ == null) {
              serverUri_ = new global::Envoy.Api.V2.Core.HttpUri();
            }
            input.ReadMessage(serverUri_);
            break;
          }
          case 18: {
            PathPrefix = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// External Authorization filter calls out to an external service over the
  /// gRPC Authorization API defined by
  /// :ref:`CheckRequest &lt;envoy_api_msg_service.auth.v2alpha.CheckRequest>`.
  /// A failed check will cause this filter to close the HTTP request with 403(Forbidden).
  /// </summary>
  public sealed partial class ExtAuthz : pb::IMessage<ExtAuthz> {
    private static readonly pb::MessageParser<ExtAuthz> _parser = new pb::MessageParser<ExtAuthz>(() => new ExtAuthz());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExtAuthz> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Http.ExtAuthz.V2Alpha.ExtAuthzReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtAuthz() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtAuthz(ExtAuthz other) : this() {
      failureModeAllow_ = other.failureModeAllow_;
      switch (other.ServicesCase) {
        case ServicesOneofCase.GrpcService:
          GrpcService = other.GrpcService.Clone();
          break;
        case ServicesOneofCase.HttpService:
          HttpService = other.HttpService.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtAuthz Clone() {
      return new ExtAuthz(this);
    }

    /// <summary>Field number for the "grpc_service" field.</summary>
    public const int GrpcServiceFieldNumber = 1;
    /// <summary>
    /// The external authorization gRPC service configuration.
    /// The default timeout is set to 200ms by this filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.GrpcService GrpcService {
      get { return servicesCase_ == ServicesOneofCase.GrpcService ? (global::Envoy.Api.V2.Core.GrpcService) services_ : null; }
      set {
        services_ = value;
        servicesCase_ = value == null ? ServicesOneofCase.None : ServicesOneofCase.GrpcService;
      }
    }

    /// <summary>Field number for the "http_service" field.</summary>
    public const int HttpServiceFieldNumber = 3;
    /// <summary>
    /// The external authorization HTTP service configuration.
    /// [#not-implemented-hide:]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Http.ExtAuthz.V2Alpha.HttpService HttpService {
      get { return servicesCase_ == ServicesOneofCase.HttpService ? (global::Envoy.Config.Filter.Http.ExtAuthz.V2Alpha.HttpService) services_ : null; }
      set {
        services_ = value;
        servicesCase_ = value == null ? ServicesOneofCase.None : ServicesOneofCase.HttpService;
      }
    }

    /// <summary>Field number for the "failure_mode_allow" field.</summary>
    public const int FailureModeAllowFieldNumber = 2;
    private bool failureModeAllow_;
    /// <summary>
    /// The filter's behaviour in case the external authorization service does
    /// not respond back. When it is set to true, Envoy will also allow traffic in case of
    /// communication failure between authorization service and the proxy.
    /// Defaults to false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FailureModeAllow {
      get { return failureModeAllow_; }
      set {
        failureModeAllow_ = value;
      }
    }

    private object services_;
    /// <summary>Enum of possible cases for the "services" oneof.</summary>
    public enum ServicesOneofCase {
      None = 0,
      GrpcService = 1,
      HttpService = 3,
    }
    private ServicesOneofCase servicesCase_ = ServicesOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServicesOneofCase ServicesCase {
      get { return servicesCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServices() {
      servicesCase_ = ServicesOneofCase.None;
      services_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExtAuthz);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExtAuthz other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GrpcService, other.GrpcService)) return false;
      if (!object.Equals(HttpService, other.HttpService)) return false;
      if (FailureModeAllow != other.FailureModeAllow) return false;
      if (ServicesCase != other.ServicesCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (servicesCase_ == ServicesOneofCase.GrpcService) hash ^= GrpcService.GetHashCode();
      if (servicesCase_ == ServicesOneofCase.HttpService) hash ^= HttpService.GetHashCode();
      if (FailureModeAllow != false) hash ^= FailureModeAllow.GetHashCode();
      hash ^= (int) servicesCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (servicesCase_ == ServicesOneofCase.GrpcService) {
        output.WriteRawTag(10);
        output.WriteMessage(GrpcService);
      }
      if (FailureModeAllow != false) {
        output.WriteRawTag(16);
        output.WriteBool(FailureModeAllow);
      }
      if (servicesCase_ == ServicesOneofCase.HttpService) {
        output.WriteRawTag(26);
        output.WriteMessage(HttpService);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (servicesCase_ == ServicesOneofCase.GrpcService) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GrpcService);
      }
      if (servicesCase_ == ServicesOneofCase.HttpService) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HttpService);
      }
      if (FailureModeAllow != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExtAuthz other) {
      if (other == null) {
        return;
      }
      if (other.FailureModeAllow != false) {
        FailureModeAllow = other.FailureModeAllow;
      }
      switch (other.ServicesCase) {
        case ServicesOneofCase.GrpcService:
          if (GrpcService == null) {
            GrpcService = new global::Envoy.Api.V2.Core.GrpcService();
          }
          GrpcService.MergeFrom(other.GrpcService);
          break;
        case ServicesOneofCase.HttpService:
          if (HttpService == null) {
            HttpService = new global::Envoy.Config.Filter.Http.ExtAuthz.V2Alpha.HttpService();
          }
          HttpService.MergeFrom(other.HttpService);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Envoy.Api.V2.Core.GrpcService subBuilder = new global::Envoy.Api.V2.Core.GrpcService();
            if (servicesCase_ == ServicesOneofCase.GrpcService) {
              subBuilder.MergeFrom(GrpcService);
            }
            input.ReadMessage(subBuilder);
            GrpcService = subBuilder;
            break;
          }
          case 16: {
            FailureModeAllow = input.ReadBool();
            break;
          }
          case 26: {
            global::Envoy.Config.Filter.Http.ExtAuthz.V2Alpha.HttpService subBuilder = new global::Envoy.Config.Filter.Http.ExtAuthz.V2Alpha.HttpService();
            if (servicesCase_ == ServicesOneofCase.HttpService) {
              subBuilder.MergeFrom(HttpService);
            }
            input.ReadMessage(subBuilder);
            HttpService = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
