// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/config/filter/http/router/v2/router.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Config.Filter.Http.Router.V2 {

  /// <summary>Holder for reflection information generated from envoy/config/filter/http/router/v2/router.proto</summary>
  public static partial class RouterReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/config/filter/http/router/v2/router.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RouterReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci9lbnZveS9jb25maWcvZmlsdGVyL2h0dHAvcm91dGVyL3YyL3JvdXRlci5w",
            "cm90bxIiZW52b3kuY29uZmlnLmZpbHRlci5odHRwLnJvdXRlci52MhowZW52",
            "b3kvY29uZmlnL2ZpbHRlci9hY2Nlc3Nsb2cvdjIvYWNjZXNzbG9nLnByb3Rv",
            "Gh5nb29nbGUvcHJvdG9idWYvd3JhcHBlcnMucHJvdG8iuAEKBlJvdXRlchIx",
            "Cg1keW5hbWljX3N0YXRzGAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xW",
            "YWx1ZRIYChBzdGFydF9jaGlsZF9zcGFuGAIgASgIEkEKDHVwc3RyZWFtX2xv",
            "ZxgDIAMoCzIrLmVudm95LmNvbmZpZy5maWx0ZXIuYWNjZXNzbG9nLnYyLkFj",
            "Y2Vzc0xvZxIeChZzdXBwcmVzc19lbnZveV9oZWFkZXJzGAQgASgIQgRaAnYy",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Http.Router.V2.Router), global::Envoy.Config.Filter.Http.Router.V2.Router.Parser, new[]{ "DynamicStats", "StartChildSpan", "UpstreamLog", "SuppressEnvoyHeaders" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Router : pb::IMessage<Router> {
    private static readonly pb::MessageParser<Router> _parser = new pb::MessageParser<Router>(() => new Router());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Router> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Http.Router.V2.RouterReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Router() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Router(Router other) : this() {
      DynamicStats = other.DynamicStats;
      startChildSpan_ = other.startChildSpan_;
      upstreamLog_ = other.upstreamLog_.Clone();
      suppressEnvoyHeaders_ = other.suppressEnvoyHeaders_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Router Clone() {
      return new Router(this);
    }

    /// <summary>Field number for the "dynamic_stats" field.</summary>
    public const int DynamicStatsFieldNumber = 1;
    private static readonly pb::FieldCodec<bool?> _single_dynamicStats_codec = pb::FieldCodec.ForStructWrapper<bool>(10);
    private bool? dynamicStats_;
    /// <summary>
    /// Whether the router generates dynamic cluster statistics. Defaults to
    /// true. Can be disabled in high performance scenarios.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? DynamicStats {
      get { return dynamicStats_; }
      set {
        dynamicStats_ = value;
      }
    }

    /// <summary>Field number for the "start_child_span" field.</summary>
    public const int StartChildSpanFieldNumber = 2;
    private bool startChildSpan_;
    /// <summary>
    /// Whether to start a child span for egress routed calls. This can be
    /// useful in scenarios where other filters (auth, ratelimit, etc.) make
    /// outbound calls and have child spans rooted at the same ingress
    /// parent. Defaults to false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StartChildSpan {
      get { return startChildSpan_; }
      set {
        startChildSpan_ = value;
      }
    }

    /// <summary>Field number for the "upstream_log" field.</summary>
    public const int UpstreamLogFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Envoy.Config.Filter.Accesslog.V2.AccessLog> _repeated_upstreamLog_codec
        = pb::FieldCodec.ForMessage(26, global::Envoy.Config.Filter.Accesslog.V2.AccessLog.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Config.Filter.Accesslog.V2.AccessLog> upstreamLog_ = new pbc::RepeatedField<global::Envoy.Config.Filter.Accesslog.V2.AccessLog>();
    /// <summary>
    /// Configuration for HTTP upstream logs emitted by the router. Upstream logs
    /// are configured in the same way as access logs, but each log entry represents
    /// an upstream request. Presuming retries are configured, multiple upstream
    /// requests may be made for each downstream (inbound) request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Envoy.Config.Filter.Accesslog.V2.AccessLog> UpstreamLog {
      get { return upstreamLog_; }
    }

    /// <summary>Field number for the "suppress_envoy_headers" field.</summary>
    public const int SuppressEnvoyHeadersFieldNumber = 4;
    private bool suppressEnvoyHeaders_;
    /// <summary>
    /// Do not add any additional *x-envoy-* headers to requests or responses. This
    /// only affects the :ref:`router filter generated *x-envoy-* headers
    /// &lt;config_http_filters_router_headers_set>`, other Envoy filters and the HTTP
    /// connection manager may continue to set *x-envoy-* headers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SuppressEnvoyHeaders {
      get { return suppressEnvoyHeaders_; }
      set {
        suppressEnvoyHeaders_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Router);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Router other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DynamicStats != other.DynamicStats) return false;
      if (StartChildSpan != other.StartChildSpan) return false;
      if(!upstreamLog_.Equals(other.upstreamLog_)) return false;
      if (SuppressEnvoyHeaders != other.SuppressEnvoyHeaders) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dynamicStats_ != null) hash ^= DynamicStats.GetHashCode();
      if (StartChildSpan != false) hash ^= StartChildSpan.GetHashCode();
      hash ^= upstreamLog_.GetHashCode();
      if (SuppressEnvoyHeaders != false) hash ^= SuppressEnvoyHeaders.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dynamicStats_ != null) {
        _single_dynamicStats_codec.WriteTagAndValue(output, DynamicStats);
      }
      if (StartChildSpan != false) {
        output.WriteRawTag(16);
        output.WriteBool(StartChildSpan);
      }
      upstreamLog_.WriteTo(output, _repeated_upstreamLog_codec);
      if (SuppressEnvoyHeaders != false) {
        output.WriteRawTag(32);
        output.WriteBool(SuppressEnvoyHeaders);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dynamicStats_ != null) {
        size += _single_dynamicStats_codec.CalculateSizeWithTag(DynamicStats);
      }
      if (StartChildSpan != false) {
        size += 1 + 1;
      }
      size += upstreamLog_.CalculateSize(_repeated_upstreamLog_codec);
      if (SuppressEnvoyHeaders != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Router other) {
      if (other == null) {
        return;
      }
      if (other.dynamicStats_ != null) {
        if (dynamicStats_ == null || other.DynamicStats != false) {
          DynamicStats = other.DynamicStats;
        }
      }
      if (other.StartChildSpan != false) {
        StartChildSpan = other.StartChildSpan;
      }
      upstreamLog_.Add(other.upstreamLog_);
      if (other.SuppressEnvoyHeaders != false) {
        SuppressEnvoyHeaders = other.SuppressEnvoyHeaders;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            bool? value = _single_dynamicStats_codec.Read(input);
            if (dynamicStats_ == null || value != false) {
              DynamicStats = value;
            }
            break;
          }
          case 16: {
            StartChildSpan = input.ReadBool();
            break;
          }
          case 26: {
            upstreamLog_.AddEntriesFrom(input, _repeated_upstreamLog_codec);
            break;
          }
          case 32: {
            SuppressEnvoyHeaders = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
