// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/config/transport_socket/capture/v2alpha/capture.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Config.TransportSocket.Capture.V2Alpha {

  /// <summary>Holder for reflection information generated from envoy/config/transport_socket/capture/v2alpha/capture.proto</summary>
  public static partial class CaptureReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/config/transport_socket/capture/v2alpha/capture.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CaptureReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjtlbnZveS9jb25maWcvdHJhbnNwb3J0X3NvY2tldC9jYXB0dXJlL3YyYWxw",
            "aGEvY2FwdHVyZS5wcm90bxItZW52b3kuY29uZmlnLnRyYW5zcG9ydF9zb2Nr",
            "ZXQuY2FwdHVyZS52MmFscGhhGhxlbnZveS9hcGkvdjIvY29yZS9iYXNlLnBy",
            "b3RvIpsBCghGaWxlU2luaxITCgtwYXRoX3ByZWZpeBgBIAEoCRJOCgZmb3Jt",
            "YXQYAiABKA4yPi5lbnZveS5jb25maWcudHJhbnNwb3J0X3NvY2tldC5jYXB0",
            "dXJlLnYyYWxwaGEuRmlsZVNpbmsuRm9ybWF0IioKBkZvcm1hdBIQCgxQUk9U",
            "T19CSU5BUlkQABIOCgpQUk9UT19URVhUEAEipgEKB0NhcHR1cmUSTAoJZmls",
            "ZV9zaW5rGAEgASgLMjcuZW52b3kuY29uZmlnLnRyYW5zcG9ydF9zb2NrZXQu",
            "Y2FwdHVyZS52MmFscGhhLkZpbGVTaW5rSAASPAoQdHJhbnNwb3J0X3NvY2tl",
            "dBgCIAEoCzIiLmVudm95LmFwaS52Mi5jb3JlLlRyYW5zcG9ydFNvY2tldEIP",
            "Cg1zaW5rX3NlbGVjdG9yQgRaAnYyYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Api.V2.Core.BaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.TransportSocket.Capture.V2Alpha.FileSink), global::Envoy.Config.TransportSocket.Capture.V2Alpha.FileSink.Parser, new[]{ "PathPrefix", "Format" }, null, new[]{ typeof(global::Envoy.Config.TransportSocket.Capture.V2Alpha.FileSink.Types.Format) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.TransportSocket.Capture.V2Alpha.Capture), global::Envoy.Config.TransportSocket.Capture.V2Alpha.Capture.Parser, new[]{ "FileSink", "TransportSocket" }, new[]{ "SinkSelector" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// File sink.
  ///
  /// .. warning::
  ///
  ///   The current file sink implementation buffers the entire trace in memory
  ///   prior to writing. This will OOM for long lived sockets and/or where there
  ///   is a large amount of traffic on the socket.
  /// </summary>
  public sealed partial class FileSink : pb::IMessage<FileSink> {
    private static readonly pb::MessageParser<FileSink> _parser = new pb::MessageParser<FileSink>(() => new FileSink());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FileSink> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.TransportSocket.Capture.V2Alpha.CaptureReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileSink() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileSink(FileSink other) : this() {
      pathPrefix_ = other.pathPrefix_;
      format_ = other.format_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileSink Clone() {
      return new FileSink(this);
    }

    /// <summary>Field number for the "path_prefix" field.</summary>
    public const int PathPrefixFieldNumber = 1;
    private string pathPrefix_ = "";
    /// <summary>
    /// Path prefix. The output file will be of the form &lt;path_prefix>_&lt;id>.pb, where &lt;id> is an
    /// identifier distinguishing the recorded trace for individual socket instances (the Envoy
    /// connection ID).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PathPrefix {
      get { return pathPrefix_; }
      set {
        pathPrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 2;
    private global::Envoy.Config.TransportSocket.Capture.V2Alpha.FileSink.Types.Format format_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.TransportSocket.Capture.V2Alpha.FileSink.Types.Format Format {
      get { return format_; }
      set {
        format_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FileSink);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FileSink other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PathPrefix != other.PathPrefix) return false;
      if (Format != other.Format) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PathPrefix.Length != 0) hash ^= PathPrefix.GetHashCode();
      if (Format != 0) hash ^= Format.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PathPrefix.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PathPrefix);
      }
      if (Format != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Format);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PathPrefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PathPrefix);
      }
      if (Format != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Format);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FileSink other) {
      if (other == null) {
        return;
      }
      if (other.PathPrefix.Length != 0) {
        PathPrefix = other.PathPrefix;
      }
      if (other.Format != 0) {
        Format = other.Format;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PathPrefix = input.ReadString();
            break;
          }
          case 16: {
            format_ = (global::Envoy.Config.TransportSocket.Capture.V2Alpha.FileSink.Types.Format) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the FileSink message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// File format.
      /// </summary>
      public enum Format {
        /// <summary>
        /// Binary proto format as per :ref:`Trace
        /// &lt;envoy_api_msg_data.tap.v2alpha.Trace>`.
        /// </summary>
        [pbr::OriginalName("PROTO_BINARY")] ProtoBinary = 0,
        /// <summary>
        /// Text proto format as per :ref:`Trace
        /// &lt;envoy_api_msg_data.tap.v2alpha.Trace>`.
        /// </summary>
        [pbr::OriginalName("PROTO_TEXT")] ProtoText = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// Configuration for capture transport socket. This wraps another transport socket, providing the
  /// ability to interpose and record in plain text any traffic that is surfaced to Envoy.
  /// </summary>
  public sealed partial class Capture : pb::IMessage<Capture> {
    private static readonly pb::MessageParser<Capture> _parser = new pb::MessageParser<Capture>(() => new Capture());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Capture> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.TransportSocket.Capture.V2Alpha.CaptureReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Capture() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Capture(Capture other) : this() {
      TransportSocket = other.transportSocket_ != null ? other.TransportSocket.Clone() : null;
      switch (other.SinkSelectorCase) {
        case SinkSelectorOneofCase.FileSink:
          FileSink = other.FileSink.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Capture Clone() {
      return new Capture(this);
    }

    /// <summary>Field number for the "file_sink" field.</summary>
    public const int FileSinkFieldNumber = 1;
    /// <summary>
    /// Trace is to be written to a file sink.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.TransportSocket.Capture.V2Alpha.FileSink FileSink {
      get { return sinkSelectorCase_ == SinkSelectorOneofCase.FileSink ? (global::Envoy.Config.TransportSocket.Capture.V2Alpha.FileSink) sinkSelector_ : null; }
      set {
        sinkSelector_ = value;
        sinkSelectorCase_ = value == null ? SinkSelectorOneofCase.None : SinkSelectorOneofCase.FileSink;
      }
    }

    /// <summary>Field number for the "transport_socket" field.</summary>
    public const int TransportSocketFieldNumber = 2;
    private global::Envoy.Api.V2.Core.TransportSocket transportSocket_;
    /// <summary>
    /// The underlying transport socket being wrapped.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.TransportSocket TransportSocket {
      get { return transportSocket_; }
      set {
        transportSocket_ = value;
      }
    }

    private object sinkSelector_;
    /// <summary>Enum of possible cases for the "sink_selector" oneof.</summary>
    public enum SinkSelectorOneofCase {
      None = 0,
      FileSink = 1,
    }
    private SinkSelectorOneofCase sinkSelectorCase_ = SinkSelectorOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SinkSelectorOneofCase SinkSelectorCase {
      get { return sinkSelectorCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSinkSelector() {
      sinkSelectorCase_ = SinkSelectorOneofCase.None;
      sinkSelector_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Capture);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Capture other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FileSink, other.FileSink)) return false;
      if (!object.Equals(TransportSocket, other.TransportSocket)) return false;
      if (SinkSelectorCase != other.SinkSelectorCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sinkSelectorCase_ == SinkSelectorOneofCase.FileSink) hash ^= FileSink.GetHashCode();
      if (transportSocket_ != null) hash ^= TransportSocket.GetHashCode();
      hash ^= (int) sinkSelectorCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sinkSelectorCase_ == SinkSelectorOneofCase.FileSink) {
        output.WriteRawTag(10);
        output.WriteMessage(FileSink);
      }
      if (transportSocket_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TransportSocket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sinkSelectorCase_ == SinkSelectorOneofCase.FileSink) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FileSink);
      }
      if (transportSocket_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransportSocket);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Capture other) {
      if (other == null) {
        return;
      }
      if (other.transportSocket_ != null) {
        if (transportSocket_ == null) {
          transportSocket_ = new global::Envoy.Api.V2.Core.TransportSocket();
        }
        TransportSocket.MergeFrom(other.TransportSocket);
      }
      switch (other.SinkSelectorCase) {
        case SinkSelectorOneofCase.FileSink:
          if (FileSink == null) {
            FileSink = new global::Envoy.Config.TransportSocket.Capture.V2Alpha.FileSink();
          }
          FileSink.MergeFrom(other.FileSink);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Envoy.Config.TransportSocket.Capture.V2Alpha.FileSink subBuilder = new global::Envoy.Config.TransportSocket.Capture.V2Alpha.FileSink();
            if (sinkSelectorCase_ == SinkSelectorOneofCase.FileSink) {
              subBuilder.MergeFrom(FileSink);
            }
            input.ReadMessage(subBuilder);
            FileSink = subBuilder;
            break;
          }
          case 18: {
            if (transportSocket_ == null) {
              transportSocket_ = new global::Envoy.Api.V2.Core.TransportSocket();
            }
            input.ReadMessage(transportSocket_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
