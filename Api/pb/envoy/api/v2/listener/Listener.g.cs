// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/api/v2/listener/listener.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Api.V2.ListenerNS {

  /// <summary>Holder for reflection information generated from envoy/api/v2/listener/listener.proto</summary>
  public static partial class ListenerReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/api/v2/listener/listener.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ListenerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRlbnZveS9hcGkvdjIvbGlzdGVuZXIvbGlzdGVuZXIucHJvdG8SFWVudm95",
            "LmFwaS52Mi5saXN0ZW5lchofZW52b3kvYXBpL3YyL2NvcmUvYWRkcmVzcy5w",
            "cm90bxocZW52b3kvYXBpL3YyL2F1dGgvY2VydC5wcm90bxocZW52b3kvYXBp",
            "L3YyL2NvcmUvYmFzZS5wcm90bxocZ29vZ2xlL3Byb3RvYnVmL3N0cnVjdC5w",
            "cm90bxoeZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvGhd2YWxpZGF0",
            "ZS92YWxpZGF0ZS5wcm90bxoUZ29nb3Byb3RvL2dvZ28ucHJvdG8irwEKBkZp",
            "bHRlchIXCgRuYW1lGAEgASgJQgm66cADBHICIAESJwoGY29uZmlnGAIgASgL",
            "MhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdBJFCg1kZXByZWNhdGVkX3YxGAMg",
            "ASgLMiouZW52b3kuYXBpLnYyLmxpc3RlbmVyLkZpbHRlci5EZXByZWNhdGVk",
            "VjFCAhgBGhwKDERlcHJlY2F0ZWRWMRIMCgR0eXBlGAEgASgJIqMDChBGaWx0",
            "ZXJDaGFpbk1hdGNoEjMKDXByZWZpeF9yYW5nZXMYAyADKAsyHC5lbnZveS5h",
            "cGkudjIuY29yZS5DaWRyUmFuZ2USFgoOYWRkcmVzc19zdWZmaXgYBCABKAkS",
            "MAoKc3VmZml4X2xlbhgFIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5VSW50MzJW",
            "YWx1ZRI6ChRzb3VyY2VfcHJlZml4X3JhbmdlcxgGIAMoCzIcLmVudm95LmFw",
            "aS52Mi5jb3JlLkNpZHJSYW5nZRIyCgxzb3VyY2VfcG9ydHMYByADKAsyHC5n",
            "b29nbGUucHJvdG9idWYuVUludDMyVmFsdWUSNgoQZGVzdGluYXRpb25fcG9y",
            "dBgIIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5VSW50MzJWYWx1ZRIUCgxzZXJ2",
            "ZXJfbmFtZXMYCyADKAkSGgoSdHJhbnNwb3J0X3Byb3RvY29sGAkgASgJEh0K",
            "FWFwcGxpY2F0aW9uX3Byb3RvY29scxgKIAMoCRIXCgtzbmlfZG9tYWlucxgB",
            "IAMoCUICGAEi6AIKC0ZpbHRlckNoYWluEkMKEmZpbHRlcl9jaGFpbl9tYXRj",
            "aBgBIAEoCzInLmVudm95LmFwaS52Mi5saXN0ZW5lci5GaWx0ZXJDaGFpbk1h",
            "dGNoEjwKC3Rsc19jb250ZXh0GAIgASgLMicuZW52b3kuYXBpLnYyLmF1dGgu",
            "RG93bnN0cmVhbVRsc0NvbnRleHQSNAoHZmlsdGVycxgDIAMoCzIdLmVudm95",
            "LmFwaS52Mi5saXN0ZW5lci5GaWx0ZXJCBMjeHwASMwoPdXNlX3Byb3h5X3By",
            "b3RvGAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZRItCghtZXRh",
            "ZGF0YRgFIAEoCzIbLmVudm95LmFwaS52Mi5jb3JlLk1ldGFkYXRhEjwKEHRy",
            "YW5zcG9ydF9zb2NrZXQYBiABKAsyIi5lbnZveS5hcGkudjIuY29yZS5UcmFu",
            "c3BvcnRTb2NrZXQiUgoOTGlzdGVuZXJGaWx0ZXISFwoEbmFtZRgBIAEoCUIJ",
            "uunAAwRyAiABEicKBmNvbmZpZxgCIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5T",
            "dHJ1Y3RCKFoIbGlzdGVuZXKqAhdFbnZveS5BcGkuVjIuTGlzdGVuZXJOU6ji",
            "HgFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Api.V2.Core.AddressReflection.Descriptor, global::Envoy.Api.V2.Auth.CertReflection.Descriptor, global::Envoy.Api.V2.Core.BaseReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, global::Gogoproto.GogoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.ListenerNS.Filter), global::Envoy.Api.V2.ListenerNS.Filter.Parser, new[]{ "Name", "Config", "DeprecatedV1" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.ListenerNS.Filter.Types.DeprecatedV1), global::Envoy.Api.V2.ListenerNS.Filter.Types.DeprecatedV1.Parser, new[]{ "Type" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.ListenerNS.FilterChainMatch), global::Envoy.Api.V2.ListenerNS.FilterChainMatch.Parser, new[]{ "PrefixRanges", "AddressSuffix", "SuffixLen", "SourcePrefixRanges", "SourcePorts", "DestinationPort", "ServerNames", "TransportProtocol", "ApplicationProtocols", "SniDomains" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.ListenerNS.FilterChain), global::Envoy.Api.V2.ListenerNS.FilterChain.Parser, new[]{ "FilterChainMatch", "TlsContext", "Filters", "UseProxyProto", "Metadata", "TransportSocket" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.ListenerNS.ListenerFilter), global::Envoy.Api.V2.ListenerNS.ListenerFilter.Parser, new[]{ "Name", "Config" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Filter : pb::IMessage<Filter> {
    private static readonly pb::MessageParser<Filter> _parser = new pb::MessageParser<Filter>(() => new Filter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Filter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V2.ListenerNS.ListenerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter(Filter other) : this() {
      name_ = other.name_;
      Config = other.config_ != null ? other.Config.Clone() : null;
      DeprecatedV1 = other.deprecatedV1_ != null ? other.DeprecatedV1.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter Clone() {
      return new Filter(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the filter to instantiate. The name must match a supported
    /// filter. The built-in filters are:
    ///
    /// [#comment:TODO(mattklein123): Auto generate the following list]
    /// * :ref:`envoy.client_ssl_auth&lt;config_network_filters_client_ssl_auth>`
    /// * :ref:`envoy.echo &lt;config_network_filters_echo>`
    /// * :ref:`envoy.http_connection_manager &lt;config_http_conn_man>`
    /// * :ref:`envoy.mongo_proxy &lt;config_network_filters_mongo_proxy>`
    /// * :ref:`envoy.ratelimit &lt;config_network_filters_rate_limit>`
    /// * :ref:`envoy.redis_proxy &lt;config_network_filters_redis_proxy>`
    /// * :ref:`envoy.tcp_proxy &lt;config_network_filters_tcp_proxy>`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Struct config_;
    /// <summary>
    /// Filter specific configuration which depends on the filter being
    /// instantiated. See the supported filters for further documentation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    /// <summary>Field number for the "deprecated_v1" field.</summary>
    public const int DeprecatedV1FieldNumber = 3;
    private global::Envoy.Api.V2.ListenerNS.Filter.Types.DeprecatedV1 deprecatedV1_;
    /// <summary>
    /// [#not-implemented-hide:]
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.ListenerNS.Filter.Types.DeprecatedV1 DeprecatedV1 {
      get { return deprecatedV1_; }
      set {
        deprecatedV1_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Filter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Filter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Config, other.Config)) return false;
      if (!object.Equals(DeprecatedV1, other.DeprecatedV1)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      if (deprecatedV1_ != null) hash ^= DeprecatedV1.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (config_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Config);
      }
      if (deprecatedV1_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DeprecatedV1);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (deprecatedV1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeprecatedV1);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Filter other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          config_ = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Config.MergeFrom(other.Config);
      }
      if (other.deprecatedV1_ != null) {
        if (deprecatedV1_ == null) {
          deprecatedV1_ = new global::Envoy.Api.V2.ListenerNS.Filter.Types.DeprecatedV1();
        }
        DeprecatedV1.MergeFrom(other.DeprecatedV1);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (config_ == null) {
              config_ = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(config_);
            break;
          }
          case 26: {
            if (deprecatedV1_ == null) {
              deprecatedV1_ = new global::Envoy.Api.V2.ListenerNS.Filter.Types.DeprecatedV1();
            }
            input.ReadMessage(deprecatedV1_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Filter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// [#not-implemented-hide:]
      /// </summary>
      public sealed partial class DeprecatedV1 : pb::IMessage<DeprecatedV1> {
        private static readonly pb::MessageParser<DeprecatedV1> _parser = new pb::MessageParser<DeprecatedV1>(() => new DeprecatedV1());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DeprecatedV1> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Api.V2.ListenerNS.Filter.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeprecatedV1() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeprecatedV1(DeprecatedV1 other) : this() {
          type_ = other.type_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeprecatedV1 Clone() {
          return new DeprecatedV1(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private string type_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Type {
          get { return type_; }
          set {
            type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DeprecatedV1);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DeprecatedV1 other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Type.Length != 0) hash ^= Type.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Type.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Type);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Type.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DeprecatedV1 other) {
          if (other == null) {
            return;
          }
          if (other.Type.Length != 0) {
            Type = other.Type;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Type = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Specifies the match criteria for selecting a specific filter chain for a
  /// listener.
  ///
  /// In order for a filter chain to be selected, *ALL* of its criteria must be
  /// fulfilled by the incoming connection, properties of which are set by the
  /// networking stack and/or listener filters.
  ///
  /// The following order applies:
  ///
  /// [#comment:TODO(PiotrSikora): destination IP / ranges are going to be 1.]
  /// 1. Server name (e.g. SNI for TLS protocol),
  /// 2. Transport protocol.
  /// 3. Application protocols (e.g. ALPN for TLS protocol).
  ///
  /// For criterias that allow ranges or wildcards, the most specific value in any
  /// of the configured filter chains that matches the incoming connection is going
  /// to be used (e.g. for SNI ``www.example.com`` the most specific match would be
  /// ``www.example.com``, then ``*.example.com``, then ``*.com``, then any filter
  /// chain without ``server_names`` requirements).
  ///
  /// [#comment: Implemented rules are kept in the preference order, with deprecated fields
  /// listed at the end, because that's how we want to list them in the docs.
  ///
  /// [#comment:TODO(PiotrSikora): Add support for configurable precedence of the rules]
  /// </summary>
  public sealed partial class FilterChainMatch : pb::IMessage<FilterChainMatch> {
    private static readonly pb::MessageParser<FilterChainMatch> _parser = new pb::MessageParser<FilterChainMatch>(() => new FilterChainMatch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FilterChainMatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V2.ListenerNS.ListenerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterChainMatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterChainMatch(FilterChainMatch other) : this() {
      prefixRanges_ = other.prefixRanges_.Clone();
      addressSuffix_ = other.addressSuffix_;
      SuffixLen = other.SuffixLen;
      sourcePrefixRanges_ = other.sourcePrefixRanges_.Clone();
      sourcePorts_ = other.sourcePorts_.Clone();
      DestinationPort = other.DestinationPort;
      serverNames_ = other.serverNames_.Clone();
      transportProtocol_ = other.transportProtocol_;
      applicationProtocols_ = other.applicationProtocols_.Clone();
      sniDomains_ = other.sniDomains_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterChainMatch Clone() {
      return new FilterChainMatch(this);
    }

    /// <summary>Field number for the "prefix_ranges" field.</summary>
    public const int PrefixRangesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Envoy.Api.V2.Core.CidrRange> _repeated_prefixRanges_codec
        = pb::FieldCodec.ForMessage(26, global::Envoy.Api.V2.Core.CidrRange.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Api.V2.Core.CidrRange> prefixRanges_ = new pbc::RepeatedField<global::Envoy.Api.V2.Core.CidrRange>();
    /// <summary>
    /// If non-empty, an IP address and prefix length to match addresses when the
    /// listener is bound to 0.0.0.0/:: or when use_original_dst is specified.
    /// [#not-implemented-hide:]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Envoy.Api.V2.Core.CidrRange> PrefixRanges {
      get { return prefixRanges_; }
    }

    /// <summary>Field number for the "address_suffix" field.</summary>
    public const int AddressSuffixFieldNumber = 4;
    private string addressSuffix_ = "";
    /// <summary>
    /// If non-empty, an IP address and suffix length to match addresses when the
    /// listener is bound to 0.0.0.0/:: or when use_original_dst is specified.
    /// [#not-implemented-hide:]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AddressSuffix {
      get { return addressSuffix_; }
      set {
        addressSuffix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "suffix_len" field.</summary>
    public const int SuffixLenFieldNumber = 5;
    private static readonly pb::FieldCodec<uint?> _single_suffixLen_codec = pb::FieldCodec.ForStructWrapper<uint>(42);
    private uint? suffixLen_;
    /// <summary>
    /// [#not-implemented-hide:]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? SuffixLen {
      get { return suffixLen_; }
      set {
        suffixLen_ = value;
      }
    }

    /// <summary>Field number for the "source_prefix_ranges" field.</summary>
    public const int SourcePrefixRangesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Envoy.Api.V2.Core.CidrRange> _repeated_sourcePrefixRanges_codec
        = pb::FieldCodec.ForMessage(50, global::Envoy.Api.V2.Core.CidrRange.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Api.V2.Core.CidrRange> sourcePrefixRanges_ = new pbc::RepeatedField<global::Envoy.Api.V2.Core.CidrRange>();
    /// <summary>
    /// The criteria is satisfied if the source IP address of the downstream
    /// connection is contained in at least one of the specified subnets. If the
    /// parameter is not specified or the list is empty, the source IP address is
    /// ignored.
    /// [#not-implemented-hide:]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Envoy.Api.V2.Core.CidrRange> SourcePrefixRanges {
      get { return sourcePrefixRanges_; }
    }

    /// <summary>Field number for the "source_ports" field.</summary>
    public const int SourcePortsFieldNumber = 7;
    private static readonly pb::FieldCodec<uint?> _repeated_sourcePorts_codec
        = pb::FieldCodec.ForStructWrapper<uint>(58);
    private readonly pbc::RepeatedField<uint?> sourcePorts_ = new pbc::RepeatedField<uint?>();
    /// <summary>
    /// The criteria is satisfied if the source port of the downstream connection
    /// is contained in at least one of the specified ports. If the parameter is
    /// not specified, the source port is ignored.
    /// [#not-implemented-hide:]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint?> SourcePorts {
      get { return sourcePorts_; }
    }

    /// <summary>Field number for the "destination_port" field.</summary>
    public const int DestinationPortFieldNumber = 8;
    private static readonly pb::FieldCodec<uint?> _single_destinationPort_codec = pb::FieldCodec.ForStructWrapper<uint>(66);
    private uint? destinationPort_;
    /// <summary>
    /// Optional destination port to consider when use_original_dst is set on the
    /// listener in determining a filter chain match.
    /// [#not-implemented-hide:]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? DestinationPort {
      get { return destinationPort_; }
      set {
        destinationPort_ = value;
      }
    }

    /// <summary>Field number for the "server_names" field.</summary>
    public const int ServerNamesFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _repeated_serverNames_codec
        = pb::FieldCodec.ForString(90);
    private readonly pbc::RepeatedField<string> serverNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// If non-empty, a list of server names (e.g. SNI for TLS protocol) to consider when determining
    /// a filter chain match. Those values will be compared against the server names of a new
    /// connection, when detected by one of the listener filters.
    ///
    /// The server name will be matched against all wildcard domains, i.e. ``www.example.com``
    /// will be first matched against ``www.example.com``, then ``*.example.com``, then ``*.com``.
    ///
    /// Note that partial wildcards are not supported, and values like ``*w.example.com`` are invalid.
    ///
    /// .. attention::
    ///
    ///   See the :ref:`FAQ entry &lt;faq_how_to_setup_sni>` on how to configure SNI for more
    ///   information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ServerNames {
      get { return serverNames_; }
    }

    /// <summary>Field number for the "transport_protocol" field.</summary>
    public const int TransportProtocolFieldNumber = 9;
    private string transportProtocol_ = "";
    /// <summary>
    /// If non-empty, a transport protocol to consider when determining a filter chain match.
    /// This value will be compared against the transport protocol of a new connection, when
    /// it's detected by one of the listener filters.
    ///
    /// Suggested values include:
    ///
    /// * ``raw_buffer`` - default, used when no transport protocol is detected,
    /// * ``tls`` - set by :ref:`envoy.listener.tls_inspector &lt;config_listener_filters_tls_inspector>`
    ///   when TLS protocol is detected.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TransportProtocol {
      get { return transportProtocol_; }
      set {
        transportProtocol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "application_protocols" field.</summary>
    public const int ApplicationProtocolsFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_applicationProtocols_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> applicationProtocols_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// If non-empty, a list of application protocols (e.g. ALPN for TLS protocol) to consider when
    /// determining a filter chain match. Those values will be compared against the application
    /// protocols of a new connection, when detected by one of the listener filters.
    ///
    /// Suggested values include:
    ///
    /// * ``http/1.1`` - set by :ref:`envoy.listener.tls_inspector
    ///   &lt;config_listener_filters_tls_inspector>`,
    /// * ``h2`` - set by :ref:`envoy.listener.tls_inspector &lt;config_listener_filters_tls_inspector>`
    ///
    /// .. attention::
    ///
    ///   Currently, only :ref:`TLS Inspector &lt;config_listener_filters_tls_inspector>` provides
    ///   application protocol detection based on the requested
    ///   `ALPN &lt;https://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation>`_ values.
    ///
    ///   However, the use of ALPN is pretty much limited to the HTTP/2 traffic on the Internet,
    ///   and matching on values other than ``h2`` is going to lead to a lot of false negatives,
    ///   unless all connecting clients are known to use ALPN.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ApplicationProtocols {
      get { return applicationProtocols_; }
    }

    /// <summary>Field number for the "sni_domains" field.</summary>
    public const int SniDomainsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_sniDomains_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> sniDomains_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// If non-empty, a list of server names (e.g. SNI for TLS protocol) to consider when determining
    /// a filter chain match. Those values will be compared against the server names of a new
    /// connection, when detected by one of the listener filters.
    ///
    /// The server name will be matched against all wildcard domains, i.e. ``www.example.com``
    /// will be first matched against ``www.example.com``, then ``*.example.com``, then ``*.com``.
    ///
    /// Note that partial wildcards are not supported, and values like ``*w.example.com`` are invalid.
    ///
    /// .. attention::
    ///
    ///   Deprecated. Use :ref:`server_names &lt;envoy_api_field_listener.FilterChainMatch.server_names>`
    ///   instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SniDomains {
      get { return sniDomains_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FilterChainMatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FilterChainMatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!prefixRanges_.Equals(other.prefixRanges_)) return false;
      if (AddressSuffix != other.AddressSuffix) return false;
      if (SuffixLen != other.SuffixLen) return false;
      if(!sourcePrefixRanges_.Equals(other.sourcePrefixRanges_)) return false;
      if(!sourcePorts_.Equals(other.sourcePorts_)) return false;
      if (DestinationPort != other.DestinationPort) return false;
      if(!serverNames_.Equals(other.serverNames_)) return false;
      if (TransportProtocol != other.TransportProtocol) return false;
      if(!applicationProtocols_.Equals(other.applicationProtocols_)) return false;
      if(!sniDomains_.Equals(other.sniDomains_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= prefixRanges_.GetHashCode();
      if (AddressSuffix.Length != 0) hash ^= AddressSuffix.GetHashCode();
      if (suffixLen_ != null) hash ^= SuffixLen.GetHashCode();
      hash ^= sourcePrefixRanges_.GetHashCode();
      hash ^= sourcePorts_.GetHashCode();
      if (destinationPort_ != null) hash ^= DestinationPort.GetHashCode();
      hash ^= serverNames_.GetHashCode();
      if (TransportProtocol.Length != 0) hash ^= TransportProtocol.GetHashCode();
      hash ^= applicationProtocols_.GetHashCode();
      hash ^= sniDomains_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      sniDomains_.WriteTo(output, _repeated_sniDomains_codec);
      prefixRanges_.WriteTo(output, _repeated_prefixRanges_codec);
      if (AddressSuffix.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AddressSuffix);
      }
      if (suffixLen_ != null) {
        _single_suffixLen_codec.WriteTagAndValue(output, SuffixLen);
      }
      sourcePrefixRanges_.WriteTo(output, _repeated_sourcePrefixRanges_codec);
      sourcePorts_.WriteTo(output, _repeated_sourcePorts_codec);
      if (destinationPort_ != null) {
        _single_destinationPort_codec.WriteTagAndValue(output, DestinationPort);
      }
      if (TransportProtocol.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(TransportProtocol);
      }
      applicationProtocols_.WriteTo(output, _repeated_applicationProtocols_codec);
      serverNames_.WriteTo(output, _repeated_serverNames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += prefixRanges_.CalculateSize(_repeated_prefixRanges_codec);
      if (AddressSuffix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AddressSuffix);
      }
      if (suffixLen_ != null) {
        size += _single_suffixLen_codec.CalculateSizeWithTag(SuffixLen);
      }
      size += sourcePrefixRanges_.CalculateSize(_repeated_sourcePrefixRanges_codec);
      size += sourcePorts_.CalculateSize(_repeated_sourcePorts_codec);
      if (destinationPort_ != null) {
        size += _single_destinationPort_codec.CalculateSizeWithTag(DestinationPort);
      }
      size += serverNames_.CalculateSize(_repeated_serverNames_codec);
      if (TransportProtocol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TransportProtocol);
      }
      size += applicationProtocols_.CalculateSize(_repeated_applicationProtocols_codec);
      size += sniDomains_.CalculateSize(_repeated_sniDomains_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FilterChainMatch other) {
      if (other == null) {
        return;
      }
      prefixRanges_.Add(other.prefixRanges_);
      if (other.AddressSuffix.Length != 0) {
        AddressSuffix = other.AddressSuffix;
      }
      if (other.suffixLen_ != null) {
        if (suffixLen_ == null || other.SuffixLen != 0) {
          SuffixLen = other.SuffixLen;
        }
      }
      sourcePrefixRanges_.Add(other.sourcePrefixRanges_);
      sourcePorts_.Add(other.sourcePorts_);
      if (other.destinationPort_ != null) {
        if (destinationPort_ == null || other.DestinationPort != 0) {
          DestinationPort = other.DestinationPort;
        }
      }
      serverNames_.Add(other.serverNames_);
      if (other.TransportProtocol.Length != 0) {
        TransportProtocol = other.TransportProtocol;
      }
      applicationProtocols_.Add(other.applicationProtocols_);
      sniDomains_.Add(other.sniDomains_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            sniDomains_.AddEntriesFrom(input, _repeated_sniDomains_codec);
            break;
          }
          case 26: {
            prefixRanges_.AddEntriesFrom(input, _repeated_prefixRanges_codec);
            break;
          }
          case 34: {
            AddressSuffix = input.ReadString();
            break;
          }
          case 42: {
            uint? value = _single_suffixLen_codec.Read(input);
            if (suffixLen_ == null || value != 0) {
              SuffixLen = value;
            }
            break;
          }
          case 50: {
            sourcePrefixRanges_.AddEntriesFrom(input, _repeated_sourcePrefixRanges_codec);
            break;
          }
          case 58: {
            sourcePorts_.AddEntriesFrom(input, _repeated_sourcePorts_codec);
            break;
          }
          case 66: {
            uint? value = _single_destinationPort_codec.Read(input);
            if (destinationPort_ == null || value != 0) {
              DestinationPort = value;
            }
            break;
          }
          case 74: {
            TransportProtocol = input.ReadString();
            break;
          }
          case 82: {
            applicationProtocols_.AddEntriesFrom(input, _repeated_applicationProtocols_codec);
            break;
          }
          case 90: {
            serverNames_.AddEntriesFrom(input, _repeated_serverNames_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A filter chain wraps a set of match criteria, an option TLS context, a set of filters, and
  /// various other parameters.
  /// </summary>
  public sealed partial class FilterChain : pb::IMessage<FilterChain> {
    private static readonly pb::MessageParser<FilterChain> _parser = new pb::MessageParser<FilterChain>(() => new FilterChain());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FilterChain> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V2.ListenerNS.ListenerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterChain() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterChain(FilterChain other) : this() {
      FilterChainMatch = other.filterChainMatch_ != null ? other.FilterChainMatch.Clone() : null;
      TlsContext = other.tlsContext_ != null ? other.TlsContext.Clone() : null;
      filters_ = other.filters_.Clone();
      UseProxyProto = other.UseProxyProto;
      Metadata = other.metadata_ != null ? other.Metadata.Clone() : null;
      TransportSocket = other.transportSocket_ != null ? other.TransportSocket.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterChain Clone() {
      return new FilterChain(this);
    }

    /// <summary>Field number for the "filter_chain_match" field.</summary>
    public const int FilterChainMatchFieldNumber = 1;
    private global::Envoy.Api.V2.ListenerNS.FilterChainMatch filterChainMatch_;
    /// <summary>
    /// The criteria to use when matching a connection to this filter chain.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.ListenerNS.FilterChainMatch FilterChainMatch {
      get { return filterChainMatch_; }
      set {
        filterChainMatch_ = value;
      }
    }

    /// <summary>Field number for the "tls_context" field.</summary>
    public const int TlsContextFieldNumber = 2;
    private global::Envoy.Api.V2.Auth.DownstreamTlsContext tlsContext_;
    /// <summary>
    /// The TLS context for this filter chain.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Auth.DownstreamTlsContext TlsContext {
      get { return tlsContext_; }
      set {
        tlsContext_ = value;
      }
    }

    /// <summary>Field number for the "filters" field.</summary>
    public const int FiltersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Envoy.Api.V2.ListenerNS.Filter> _repeated_filters_codec
        = pb::FieldCodec.ForMessage(26, global::Envoy.Api.V2.ListenerNS.Filter.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Api.V2.ListenerNS.Filter> filters_ = new pbc::RepeatedField<global::Envoy.Api.V2.ListenerNS.Filter>();
    /// <summary>
    /// A list of individual network filters that make up the filter chain for
    /// connections established with the listener. Order matters as the filters are
    /// processed sequentially as connection events happen. Note: If the filter
    /// list is empty, the connection will close by default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Envoy.Api.V2.ListenerNS.Filter> Filters {
      get { return filters_; }
    }

    /// <summary>Field number for the "use_proxy_proto" field.</summary>
    public const int UseProxyProtoFieldNumber = 4;
    private static readonly pb::FieldCodec<bool?> _single_useProxyProto_codec = pb::FieldCodec.ForStructWrapper<bool>(34);
    private bool? useProxyProto_;
    /// <summary>
    /// Whether the listener should expect a PROXY protocol V1 header on new
    /// connections. If this option is enabled, the listener will assume that that
    /// remote address of the connection is the one specified in the header. Some
    /// load balancers including the AWS ELB support this option. If the option is
    /// absent or set to false, Envoy will use the physical peer address of the
    /// connection as the remote address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? UseProxyProto {
      get { return useProxyProto_; }
      set {
        useProxyProto_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 5;
    private global::Envoy.Api.V2.Core.Metadata metadata_;
    /// <summary>
    /// [#not-implemented-hide:] filter chain metadata.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.Metadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "transport_socket" field.</summary>
    public const int TransportSocketFieldNumber = 6;
    private global::Envoy.Api.V2.Core.TransportSocket transportSocket_;
    /// <summary>
    /// See :ref:`base.TransportSocket&lt;envoy_api_msg_core.TransportSocket>` description.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.TransportSocket TransportSocket {
      get { return transportSocket_; }
      set {
        transportSocket_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FilterChain);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FilterChain other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FilterChainMatch, other.FilterChainMatch)) return false;
      if (!object.Equals(TlsContext, other.TlsContext)) return false;
      if(!filters_.Equals(other.filters_)) return false;
      if (UseProxyProto != other.UseProxyProto) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (!object.Equals(TransportSocket, other.TransportSocket)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (filterChainMatch_ != null) hash ^= FilterChainMatch.GetHashCode();
      if (tlsContext_ != null) hash ^= TlsContext.GetHashCode();
      hash ^= filters_.GetHashCode();
      if (useProxyProto_ != null) hash ^= UseProxyProto.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (transportSocket_ != null) hash ^= TransportSocket.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (filterChainMatch_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FilterChainMatch);
      }
      if (tlsContext_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TlsContext);
      }
      filters_.WriteTo(output, _repeated_filters_codec);
      if (useProxyProto_ != null) {
        _single_useProxyProto_codec.WriteTagAndValue(output, UseProxyProto);
      }
      if (metadata_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Metadata);
      }
      if (transportSocket_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TransportSocket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (filterChainMatch_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FilterChainMatch);
      }
      if (tlsContext_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TlsContext);
      }
      size += filters_.CalculateSize(_repeated_filters_codec);
      if (useProxyProto_ != null) {
        size += _single_useProxyProto_codec.CalculateSizeWithTag(UseProxyProto);
      }
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (transportSocket_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransportSocket);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FilterChain other) {
      if (other == null) {
        return;
      }
      if (other.filterChainMatch_ != null) {
        if (filterChainMatch_ == null) {
          filterChainMatch_ = new global::Envoy.Api.V2.ListenerNS.FilterChainMatch();
        }
        FilterChainMatch.MergeFrom(other.FilterChainMatch);
      }
      if (other.tlsContext_ != null) {
        if (tlsContext_ == null) {
          tlsContext_ = new global::Envoy.Api.V2.Auth.DownstreamTlsContext();
        }
        TlsContext.MergeFrom(other.TlsContext);
      }
      filters_.Add(other.filters_);
      if (other.useProxyProto_ != null) {
        if (useProxyProto_ == null || other.UseProxyProto != false) {
          UseProxyProto = other.UseProxyProto;
        }
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::Envoy.Api.V2.Core.Metadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.transportSocket_ != null) {
        if (transportSocket_ == null) {
          transportSocket_ = new global::Envoy.Api.V2.Core.TransportSocket();
        }
        TransportSocket.MergeFrom(other.TransportSocket);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (filterChainMatch_ == null) {
              filterChainMatch_ = new global::Envoy.Api.V2.ListenerNS.FilterChainMatch();
            }
            input.ReadMessage(filterChainMatch_);
            break;
          }
          case 18: {
            if (tlsContext_ == null) {
              tlsContext_ = new global::Envoy.Api.V2.Auth.DownstreamTlsContext();
            }
            input.ReadMessage(tlsContext_);
            break;
          }
          case 26: {
            filters_.AddEntriesFrom(input, _repeated_filters_codec);
            break;
          }
          case 34: {
            bool? value = _single_useProxyProto_codec.Read(input);
            if (useProxyProto_ == null || value != false) {
              UseProxyProto = value;
            }
            break;
          }
          case 42: {
            if (metadata_ == null) {
              metadata_ = new global::Envoy.Api.V2.Core.Metadata();
            }
            input.ReadMessage(metadata_);
            break;
          }
          case 50: {
            if (transportSocket_ == null) {
              transportSocket_ = new global::Envoy.Api.V2.Core.TransportSocket();
            }
            input.ReadMessage(transportSocket_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListenerFilter : pb::IMessage<ListenerFilter> {
    private static readonly pb::MessageParser<ListenerFilter> _parser = new pb::MessageParser<ListenerFilter>(() => new ListenerFilter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListenerFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V2.ListenerNS.ListenerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListenerFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListenerFilter(ListenerFilter other) : this() {
      name_ = other.name_;
      Config = other.config_ != null ? other.Config.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListenerFilter Clone() {
      return new ListenerFilter(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the filter to instantiate. The name must match a supported
    /// filter. The built-in filters are:
    ///
    /// [#comment:TODO(mattklein123): Auto generate the following list]
    /// * :ref:`envoy.listener.original_dst &lt;config_listener_filters_original_dst>`
    /// * :ref:`envoy.listener.tls_inspector &lt;config_listener_filters_tls_inspector>`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Struct config_;
    /// <summary>
    /// Filter specific configuration which depends on the filter being
    /// instantiated. See the supported filters for further documentation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListenerFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListenerFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Config, other.Config)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (config_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Config);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListenerFilter other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          config_ = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Config.MergeFrom(other.Config);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (config_ == null) {
              config_ = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(config_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
