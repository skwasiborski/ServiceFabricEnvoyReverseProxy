// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/api/v2/core/health_check.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Api.V2.Core {

  /// <summary>Holder for reflection information generated from envoy/api/v2/core/health_check.proto</summary>
  public static partial class HealthCheckReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/api/v2/core/health_check.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HealthCheckReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRlbnZveS9hcGkvdjIvY29yZS9oZWFsdGhfY2hlY2sucHJvdG8SEWVudm95",
            "LmFwaS52Mi5jb3JlGhxlbnZveS9hcGkvdjIvY29yZS9iYXNlLnByb3RvGh5n",
            "b29nbGUvcHJvdG9idWYvZHVyYXRpb24ucHJvdG8aHGdvb2dsZS9wcm90b2J1",
            "Zi9zdHJ1Y3QucHJvdG8aHmdvb2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90",
            "bxoXdmFsaWRhdGUvdmFsaWRhdGUucHJvdG8aFGdvZ29wcm90by9nb2dvLnBy",
            "b3RvIpQNCgtIZWFsdGhDaGVjaxI2Cgd0aW1lb3V0GAEgASgLMhkuZ29vZ2xl",
            "LnByb3RvYnVmLkR1cmF0aW9uQgq66cADBaoBAggBEjcKCGludGVydmFsGAIg",
            "ASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uQgq66cADBaoBAggBEjIK",
            "D2ludGVydmFsX2ppdHRlchgDIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJh",
            "dGlvbhI5ChN1bmhlYWx0aHlfdGhyZXNob2xkGAQgASgLMhwuZ29vZ2xlLnBy",
            "b3RvYnVmLlVJbnQzMlZhbHVlEjcKEWhlYWx0aHlfdGhyZXNob2xkGAUgASgL",
            "MhwuZ29vZ2xlLnByb3RvYnVmLlVJbnQzMlZhbHVlEi4KCGFsdF9wb3J0GAYg",
            "ASgLMhwuZ29vZ2xlLnByb3RvYnVmLlVJbnQzMlZhbHVlEjQKEHJldXNlX2Nv",
            "bm5lY3Rpb24YByABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEksK",
            "EWh0dHBfaGVhbHRoX2NoZWNrGAggASgLMi4uZW52b3kuYXBpLnYyLmNvcmUu",
            "SGVhbHRoQ2hlY2suSHR0cEhlYWx0aENoZWNrSAASSQoQdGNwX2hlYWx0aF9j",
            "aGVjaxgJIAEoCzItLmVudm95LmFwaS52Mi5jb3JlLkhlYWx0aENoZWNrLlRj",
            "cEhlYWx0aENoZWNrSAASTQoScmVkaXNfaGVhbHRoX2NoZWNrGAogASgLMi8u",
            "ZW52b3kuYXBpLnYyLmNvcmUuSGVhbHRoQ2hlY2suUmVkaXNIZWFsdGhDaGVj",
            "a0gAEksKEWdycGNfaGVhbHRoX2NoZWNrGAsgASgLMi4uZW52b3kuYXBpLnYy",
            "LmNvcmUuSGVhbHRoQ2hlY2suR3JwY0hlYWx0aENoZWNrSAASTwoTY3VzdG9t",
            "X2hlYWx0aF9jaGVjaxgNIAEoCzIwLmVudm95LmFwaS52Mi5jb3JlLkhlYWx0",
            "aENoZWNrLkN1c3RvbUhlYWx0aENoZWNrSAASNgoTbm9fdHJhZmZpY19pbnRl",
            "cnZhbBgMIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbhI1ChJ1bmhl",
            "YWx0aHlfaW50ZXJ2YWwYDiABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRp",
            "b24SOgoXdW5oZWFsdGh5X2VkZ2VfaW50ZXJ2YWwYDyABKAsyGS5nb29nbGUu",
            "cHJvdG9idWYuRHVyYXRpb24SOAoVaGVhbHRoeV9lZGdlX2ludGVydmFsGBAg",
            "ASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uGkgKB1BheWxvYWQSGQoE",
            "dGV4dBgBIAEoCUIJuunAAwRyAiABSAASEAoGYmluYXJ5GAIgASgMSABCEAoH",
            "cGF5bG9hZBIFuOnAAwEalgIKD0h0dHBIZWFsdGhDaGVjaxIMCgRob3N0GAEg",
            "ASgJEhcKBHBhdGgYAiABKAlCCbrpwAMEcgIgARI0CgRzZW5kGAMgASgLMiYu",
            "ZW52b3kuYXBpLnYyLmNvcmUuSGVhbHRoQ2hlY2suUGF5bG9hZBI3CgdyZWNl",
            "aXZlGAQgASgLMiYuZW52b3kuYXBpLnYyLmNvcmUuSGVhbHRoQ2hlY2suUGF5",
            "bG9hZBIUCgxzZXJ2aWNlX25hbWUYBSABKAkSRAoWcmVxdWVzdF9oZWFkZXJz",
            "X3RvX2FkZBgGIAMoCzIkLmVudm95LmFwaS52Mi5jb3JlLkhlYWRlclZhbHVl",
            "T3B0aW9uEhEKCXVzZV9odHRwMhgHIAEoCBp/Cg5UY3BIZWFsdGhDaGVjaxI0",
            "CgRzZW5kGAEgASgLMiYuZW52b3kuYXBpLnYyLmNvcmUuSGVhbHRoQ2hlY2su",
            "UGF5bG9hZBI3CgdyZWNlaXZlGAIgAygLMiYuZW52b3kuYXBpLnYyLmNvcmUu",
            "SGVhbHRoQ2hlY2suUGF5bG9hZBofChBSZWRpc0hlYWx0aENoZWNrEgsKA2tl",
            "eRgBIAEoCRonCg9HcnBjSGVhbHRoQ2hlY2sSFAoMc2VydmljZV9uYW1lGAEg",
            "ASgJGlUKEUN1c3RvbUhlYWx0aENoZWNrEhcKBG5hbWUYASABKAlCCbrpwAME",
            "cgIgARInCgZjb25maWcYAiABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0",
            "QhcKDmhlYWx0aF9jaGVja2VyEgW46cADASpSCgxIZWFsdGhTdGF0dXMSCwoH",
            "VU5LTk9XThAAEgsKB0hFQUxUSFkQARINCglVTkhFQUxUSFkQAhIMCghEUkFJ",
            "TklORxADEgsKB1RJTUVPVVQQBEIEqOIeAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Api.V2.Core.BaseReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, global::Gogoproto.GogoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Envoy.Api.V2.Core.HealthStatus), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.Core.HealthCheck), global::Envoy.Api.V2.Core.HealthCheck.Parser, new[]{ "Timeout", "Interval", "IntervalJitter", "UnhealthyThreshold", "HealthyThreshold", "AltPort", "ReuseConnection", "HttpHealthCheck", "TcpHealthCheck", "RedisHealthCheck", "GrpcHealthCheck", "CustomHealthCheck", "NoTrafficInterval", "UnhealthyInterval", "UnhealthyEdgeInterval", "HealthyEdgeInterval" }, new[]{ "HealthChecker" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.Core.HealthCheck.Types.Payload), global::Envoy.Api.V2.Core.HealthCheck.Types.Payload.Parser, new[]{ "Text", "Binary" }, new[]{ "Payload" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.Core.HealthCheck.Types.HttpHealthCheck), global::Envoy.Api.V2.Core.HealthCheck.Types.HttpHealthCheck.Parser, new[]{ "Host", "Path", "Send", "Receive", "ServiceName", "RequestHeadersToAdd", "UseHttp2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.Core.HealthCheck.Types.TcpHealthCheck), global::Envoy.Api.V2.Core.HealthCheck.Types.TcpHealthCheck.Parser, new[]{ "Send", "Receive" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.Core.HealthCheck.Types.RedisHealthCheck), global::Envoy.Api.V2.Core.HealthCheck.Types.RedisHealthCheck.Parser, new[]{ "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.Core.HealthCheck.Types.GrpcHealthCheck), global::Envoy.Api.V2.Core.HealthCheck.Types.GrpcHealthCheck.Parser, new[]{ "ServiceName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.Core.HealthCheck.Types.CustomHealthCheck), global::Envoy.Api.V2.Core.HealthCheck.Types.CustomHealthCheck.Parser, new[]{ "Name", "Config" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Endpoint health status.
  /// </summary>
  public enum HealthStatus {
    /// <summary>
    /// The health status is not known. This is interpreted by Envoy as *HEALTHY*.
    /// </summary>
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    /// <summary>
    /// Healthy.
    /// </summary>
    [pbr::OriginalName("HEALTHY")] Healthy = 1,
    /// <summary>
    /// Unhealthy.
    /// </summary>
    [pbr::OriginalName("UNHEALTHY")] Unhealthy = 2,
    /// <summary>
    /// Connection draining in progress. E.g.,
    /// `&lt;https://aws.amazon.com/blogs/aws/elb-connection-draining-remove-instances-from-service-with-care/>`_
    /// or
    /// `&lt;https://cloud.google.com/compute/docs/load-balancing/enabling-connection-draining>`_.
    /// This is interpreted by Envoy as *UNHEALTHY*.
    /// </summary>
    [pbr::OriginalName("DRAINING")] Draining = 3,
    /// <summary>
    /// Health check timed out. This is part of HDS and is interpreted by Envoy as
    /// *UNHEALTHY*.
    /// </summary>
    [pbr::OriginalName("TIMEOUT")] Timeout = 4,
  }

  #endregion

  #region Messages
  public sealed partial class HealthCheck : pb::IMessage<HealthCheck> {
    private static readonly pb::MessageParser<HealthCheck> _parser = new pb::MessageParser<HealthCheck>(() => new HealthCheck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HealthCheck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V2.Core.HealthCheckReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthCheck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthCheck(HealthCheck other) : this() {
      Timeout = other.timeout_ != null ? other.Timeout.Clone() : null;
      Interval = other.interval_ != null ? other.Interval.Clone() : null;
      IntervalJitter = other.intervalJitter_ != null ? other.IntervalJitter.Clone() : null;
      UnhealthyThreshold = other.UnhealthyThreshold;
      HealthyThreshold = other.HealthyThreshold;
      AltPort = other.AltPort;
      ReuseConnection = other.ReuseConnection;
      NoTrafficInterval = other.noTrafficInterval_ != null ? other.NoTrafficInterval.Clone() : null;
      UnhealthyInterval = other.unhealthyInterval_ != null ? other.UnhealthyInterval.Clone() : null;
      UnhealthyEdgeInterval = other.unhealthyEdgeInterval_ != null ? other.UnhealthyEdgeInterval.Clone() : null;
      HealthyEdgeInterval = other.healthyEdgeInterval_ != null ? other.HealthyEdgeInterval.Clone() : null;
      switch (other.HealthCheckerCase) {
        case HealthCheckerOneofCase.HttpHealthCheck:
          HttpHealthCheck = other.HttpHealthCheck.Clone();
          break;
        case HealthCheckerOneofCase.TcpHealthCheck:
          TcpHealthCheck = other.TcpHealthCheck.Clone();
          break;
        case HealthCheckerOneofCase.RedisHealthCheck:
          RedisHealthCheck = other.RedisHealthCheck.Clone();
          break;
        case HealthCheckerOneofCase.GrpcHealthCheck:
          GrpcHealthCheck = other.GrpcHealthCheck.Clone();
          break;
        case HealthCheckerOneofCase.CustomHealthCheck:
          CustomHealthCheck = other.CustomHealthCheck.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthCheck Clone() {
      return new HealthCheck(this);
    }

    /// <summary>Field number for the "timeout" field.</summary>
    public const int TimeoutFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Duration timeout_;
    /// <summary>
    /// The time to wait for a health check response. If the timeout is reached the
    /// health check attempt will be considered a failure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration Timeout {
      get { return timeout_; }
      set {
        timeout_ = value;
      }
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Duration interval_;
    /// <summary>
    /// The interval between health checks.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration Interval {
      get { return interval_; }
      set {
        interval_ = value;
      }
    }

    /// <summary>Field number for the "interval_jitter" field.</summary>
    public const int IntervalJitterFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Duration intervalJitter_;
    /// <summary>
    /// An optional jitter amount in millseconds. If specified, during every
    /// internal Envoy will add 0 to interval_jitter to the wait time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration IntervalJitter {
      get { return intervalJitter_; }
      set {
        intervalJitter_ = value;
      }
    }

    /// <summary>Field number for the "unhealthy_threshold" field.</summary>
    public const int UnhealthyThresholdFieldNumber = 4;
    private static readonly pb::FieldCodec<uint?> _single_unhealthyThreshold_codec = pb::FieldCodec.ForStructWrapper<uint>(34);
    private uint? unhealthyThreshold_;
    /// <summary>
    /// The number of unhealthy health checks required before a host is marked
    /// unhealthy. Note that for *http* health checking if a host responds with 503
    /// this threshold is ignored and the host is considered unhealthy immediately.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? UnhealthyThreshold {
      get { return unhealthyThreshold_; }
      set {
        unhealthyThreshold_ = value;
      }
    }

    /// <summary>Field number for the "healthy_threshold" field.</summary>
    public const int HealthyThresholdFieldNumber = 5;
    private static readonly pb::FieldCodec<uint?> _single_healthyThreshold_codec = pb::FieldCodec.ForStructWrapper<uint>(42);
    private uint? healthyThreshold_;
    /// <summary>
    /// The number of healthy health checks required before a host is marked
    /// healthy. Note that during startup, only a single successful health check is
    /// required to mark a host healthy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? HealthyThreshold {
      get { return healthyThreshold_; }
      set {
        healthyThreshold_ = value;
      }
    }

    /// <summary>Field number for the "alt_port" field.</summary>
    public const int AltPortFieldNumber = 6;
    private static readonly pb::FieldCodec<uint?> _single_altPort_codec = pb::FieldCodec.ForStructWrapper<uint>(50);
    private uint? altPort_;
    /// <summary>
    /// [#not-implemented-hide:] Non-serving port for health checking.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? AltPort {
      get { return altPort_; }
      set {
        altPort_ = value;
      }
    }

    /// <summary>Field number for the "reuse_connection" field.</summary>
    public const int ReuseConnectionFieldNumber = 7;
    private static readonly pb::FieldCodec<bool?> _single_reuseConnection_codec = pb::FieldCodec.ForStructWrapper<bool>(58);
    private bool? reuseConnection_;
    /// <summary>
    /// Reuse health check connection between health checks. Default is true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? ReuseConnection {
      get { return reuseConnection_; }
      set {
        reuseConnection_ = value;
      }
    }

    /// <summary>Field number for the "http_health_check" field.</summary>
    public const int HttpHealthCheckFieldNumber = 8;
    /// <summary>
    /// HTTP health check.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.HealthCheck.Types.HttpHealthCheck HttpHealthCheck {
      get { return healthCheckerCase_ == HealthCheckerOneofCase.HttpHealthCheck ? (global::Envoy.Api.V2.Core.HealthCheck.Types.HttpHealthCheck) healthChecker_ : null; }
      set {
        healthChecker_ = value;
        healthCheckerCase_ = value == null ? HealthCheckerOneofCase.None : HealthCheckerOneofCase.HttpHealthCheck;
      }
    }

    /// <summary>Field number for the "tcp_health_check" field.</summary>
    public const int TcpHealthCheckFieldNumber = 9;
    /// <summary>
    /// TCP health check.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.HealthCheck.Types.TcpHealthCheck TcpHealthCheck {
      get { return healthCheckerCase_ == HealthCheckerOneofCase.TcpHealthCheck ? (global::Envoy.Api.V2.Core.HealthCheck.Types.TcpHealthCheck) healthChecker_ : null; }
      set {
        healthChecker_ = value;
        healthCheckerCase_ = value == null ? HealthCheckerOneofCase.None : HealthCheckerOneofCase.TcpHealthCheck;
      }
    }

    /// <summary>Field number for the "redis_health_check" field.</summary>
    public const int RedisHealthCheckFieldNumber = 10;
    /// <summary>
    /// Redis health check.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.HealthCheck.Types.RedisHealthCheck RedisHealthCheck {
      get { return healthCheckerCase_ == HealthCheckerOneofCase.RedisHealthCheck ? (global::Envoy.Api.V2.Core.HealthCheck.Types.RedisHealthCheck) healthChecker_ : null; }
      set {
        healthChecker_ = value;
        healthCheckerCase_ = value == null ? HealthCheckerOneofCase.None : HealthCheckerOneofCase.RedisHealthCheck;
      }
    }

    /// <summary>Field number for the "grpc_health_check" field.</summary>
    public const int GrpcHealthCheckFieldNumber = 11;
    /// <summary>
    /// gRPC health check.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.HealthCheck.Types.GrpcHealthCheck GrpcHealthCheck {
      get { return healthCheckerCase_ == HealthCheckerOneofCase.GrpcHealthCheck ? (global::Envoy.Api.V2.Core.HealthCheck.Types.GrpcHealthCheck) healthChecker_ : null; }
      set {
        healthChecker_ = value;
        healthCheckerCase_ = value == null ? HealthCheckerOneofCase.None : HealthCheckerOneofCase.GrpcHealthCheck;
      }
    }

    /// <summary>Field number for the "custom_health_check" field.</summary>
    public const int CustomHealthCheckFieldNumber = 13;
    /// <summary>
    /// Custom health check.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.HealthCheck.Types.CustomHealthCheck CustomHealthCheck {
      get { return healthCheckerCase_ == HealthCheckerOneofCase.CustomHealthCheck ? (global::Envoy.Api.V2.Core.HealthCheck.Types.CustomHealthCheck) healthChecker_ : null; }
      set {
        healthChecker_ = value;
        healthCheckerCase_ = value == null ? HealthCheckerOneofCase.None : HealthCheckerOneofCase.CustomHealthCheck;
      }
    }

    /// <summary>Field number for the "no_traffic_interval" field.</summary>
    public const int NoTrafficIntervalFieldNumber = 12;
    private global::Google.Protobuf.WellKnownTypes.Duration noTrafficInterval_;
    /// <summary>
    /// The "no traffic interval" is a special health check interval that is used when a cluster has
    /// never had traffic routed to it. This lower interval allows cluster information to be kept up to
    /// date, without sending a potentially large amount of active health checking traffic for no
    /// reason. Once a cluster has been used for traffic routing, Envoy will shift back to using the
    /// standard health check interval that is defined. Note that this interval takes precedence over
    /// any other.
    ///
    /// The default value for "no traffic interval" is 60 seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration NoTrafficInterval {
      get { return noTrafficInterval_; }
      set {
        noTrafficInterval_ = value;
      }
    }

    /// <summary>Field number for the "unhealthy_interval" field.</summary>
    public const int UnhealthyIntervalFieldNumber = 14;
    private global::Google.Protobuf.WellKnownTypes.Duration unhealthyInterval_;
    /// <summary>
    /// The "unhealthy interval" is a health check interval that is used for hosts that are marked as
    /// unhealthy. As soon as the host is marked as healthy, Envoy will shift back to using the
    /// standard health check interval that is defined.
    ///
    /// The default value for "unhealthy interval" is the same as "interval".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration UnhealthyInterval {
      get { return unhealthyInterval_; }
      set {
        unhealthyInterval_ = value;
      }
    }

    /// <summary>Field number for the "unhealthy_edge_interval" field.</summary>
    public const int UnhealthyEdgeIntervalFieldNumber = 15;
    private global::Google.Protobuf.WellKnownTypes.Duration unhealthyEdgeInterval_;
    /// <summary>
    /// The "unhealthy edge interval" is a special health check interval that is used for the first
    /// health check right after a host is marked as unhealthy. For subsequent health checks
    /// Envoy will shift back to using either "unhealthy interval" if present or the standard health
    /// check interval that is defined.
    ///
    /// The default value for "unhealthy edge interval" is the same as "unhealthy interval".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration UnhealthyEdgeInterval {
      get { return unhealthyEdgeInterval_; }
      set {
        unhealthyEdgeInterval_ = value;
      }
    }

    /// <summary>Field number for the "healthy_edge_interval" field.</summary>
    public const int HealthyEdgeIntervalFieldNumber = 16;
    private global::Google.Protobuf.WellKnownTypes.Duration healthyEdgeInterval_;
    /// <summary>
    /// The "healthy edge interval" is a special health check interval that is used for the first
    /// health check right after a host is marked as healthy. For subsequent health checks
    /// Envoy will shift back to using the standard health check interval that is defined.
    ///
    /// The default value for "healthy edge interval" is the same as the default interval.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration HealthyEdgeInterval {
      get { return healthyEdgeInterval_; }
      set {
        healthyEdgeInterval_ = value;
      }
    }

    private object healthChecker_;
    /// <summary>Enum of possible cases for the "health_checker" oneof.</summary>
    public enum HealthCheckerOneofCase {
      None = 0,
      HttpHealthCheck = 8,
      TcpHealthCheck = 9,
      RedisHealthCheck = 10,
      GrpcHealthCheck = 11,
      CustomHealthCheck = 13,
    }
    private HealthCheckerOneofCase healthCheckerCase_ = HealthCheckerOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthCheckerOneofCase HealthCheckerCase {
      get { return healthCheckerCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHealthChecker() {
      healthCheckerCase_ = HealthCheckerOneofCase.None;
      healthChecker_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HealthCheck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HealthCheck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timeout, other.Timeout)) return false;
      if (!object.Equals(Interval, other.Interval)) return false;
      if (!object.Equals(IntervalJitter, other.IntervalJitter)) return false;
      if (UnhealthyThreshold != other.UnhealthyThreshold) return false;
      if (HealthyThreshold != other.HealthyThreshold) return false;
      if (AltPort != other.AltPort) return false;
      if (ReuseConnection != other.ReuseConnection) return false;
      if (!object.Equals(HttpHealthCheck, other.HttpHealthCheck)) return false;
      if (!object.Equals(TcpHealthCheck, other.TcpHealthCheck)) return false;
      if (!object.Equals(RedisHealthCheck, other.RedisHealthCheck)) return false;
      if (!object.Equals(GrpcHealthCheck, other.GrpcHealthCheck)) return false;
      if (!object.Equals(CustomHealthCheck, other.CustomHealthCheck)) return false;
      if (!object.Equals(NoTrafficInterval, other.NoTrafficInterval)) return false;
      if (!object.Equals(UnhealthyInterval, other.UnhealthyInterval)) return false;
      if (!object.Equals(UnhealthyEdgeInterval, other.UnhealthyEdgeInterval)) return false;
      if (!object.Equals(HealthyEdgeInterval, other.HealthyEdgeInterval)) return false;
      if (HealthCheckerCase != other.HealthCheckerCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timeout_ != null) hash ^= Timeout.GetHashCode();
      if (interval_ != null) hash ^= Interval.GetHashCode();
      if (intervalJitter_ != null) hash ^= IntervalJitter.GetHashCode();
      if (unhealthyThreshold_ != null) hash ^= UnhealthyThreshold.GetHashCode();
      if (healthyThreshold_ != null) hash ^= HealthyThreshold.GetHashCode();
      if (altPort_ != null) hash ^= AltPort.GetHashCode();
      if (reuseConnection_ != null) hash ^= ReuseConnection.GetHashCode();
      if (healthCheckerCase_ == HealthCheckerOneofCase.HttpHealthCheck) hash ^= HttpHealthCheck.GetHashCode();
      if (healthCheckerCase_ == HealthCheckerOneofCase.TcpHealthCheck) hash ^= TcpHealthCheck.GetHashCode();
      if (healthCheckerCase_ == HealthCheckerOneofCase.RedisHealthCheck) hash ^= RedisHealthCheck.GetHashCode();
      if (healthCheckerCase_ == HealthCheckerOneofCase.GrpcHealthCheck) hash ^= GrpcHealthCheck.GetHashCode();
      if (healthCheckerCase_ == HealthCheckerOneofCase.CustomHealthCheck) hash ^= CustomHealthCheck.GetHashCode();
      if (noTrafficInterval_ != null) hash ^= NoTrafficInterval.GetHashCode();
      if (unhealthyInterval_ != null) hash ^= UnhealthyInterval.GetHashCode();
      if (unhealthyEdgeInterval_ != null) hash ^= UnhealthyEdgeInterval.GetHashCode();
      if (healthyEdgeInterval_ != null) hash ^= HealthyEdgeInterval.GetHashCode();
      hash ^= (int) healthCheckerCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timeout_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timeout);
      }
      if (interval_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Interval);
      }
      if (intervalJitter_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(IntervalJitter);
      }
      if (unhealthyThreshold_ != null) {
        _single_unhealthyThreshold_codec.WriteTagAndValue(output, UnhealthyThreshold);
      }
      if (healthyThreshold_ != null) {
        _single_healthyThreshold_codec.WriteTagAndValue(output, HealthyThreshold);
      }
      if (altPort_ != null) {
        _single_altPort_codec.WriteTagAndValue(output, AltPort);
      }
      if (reuseConnection_ != null) {
        _single_reuseConnection_codec.WriteTagAndValue(output, ReuseConnection);
      }
      if (healthCheckerCase_ == HealthCheckerOneofCase.HttpHealthCheck) {
        output.WriteRawTag(66);
        output.WriteMessage(HttpHealthCheck);
      }
      if (healthCheckerCase_ == HealthCheckerOneofCase.TcpHealthCheck) {
        output.WriteRawTag(74);
        output.WriteMessage(TcpHealthCheck);
      }
      if (healthCheckerCase_ == HealthCheckerOneofCase.RedisHealthCheck) {
        output.WriteRawTag(82);
        output.WriteMessage(RedisHealthCheck);
      }
      if (healthCheckerCase_ == HealthCheckerOneofCase.GrpcHealthCheck) {
        output.WriteRawTag(90);
        output.WriteMessage(GrpcHealthCheck);
      }
      if (noTrafficInterval_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(NoTrafficInterval);
      }
      if (healthCheckerCase_ == HealthCheckerOneofCase.CustomHealthCheck) {
        output.WriteRawTag(106);
        output.WriteMessage(CustomHealthCheck);
      }
      if (unhealthyInterval_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(UnhealthyInterval);
      }
      if (unhealthyEdgeInterval_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(UnhealthyEdgeInterval);
      }
      if (healthyEdgeInterval_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(HealthyEdgeInterval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timeout_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timeout);
      }
      if (interval_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Interval);
      }
      if (intervalJitter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IntervalJitter);
      }
      if (unhealthyThreshold_ != null) {
        size += _single_unhealthyThreshold_codec.CalculateSizeWithTag(UnhealthyThreshold);
      }
      if (healthyThreshold_ != null) {
        size += _single_healthyThreshold_codec.CalculateSizeWithTag(HealthyThreshold);
      }
      if (altPort_ != null) {
        size += _single_altPort_codec.CalculateSizeWithTag(AltPort);
      }
      if (reuseConnection_ != null) {
        size += _single_reuseConnection_codec.CalculateSizeWithTag(ReuseConnection);
      }
      if (healthCheckerCase_ == HealthCheckerOneofCase.HttpHealthCheck) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HttpHealthCheck);
      }
      if (healthCheckerCase_ == HealthCheckerOneofCase.TcpHealthCheck) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TcpHealthCheck);
      }
      if (healthCheckerCase_ == HealthCheckerOneofCase.RedisHealthCheck) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RedisHealthCheck);
      }
      if (healthCheckerCase_ == HealthCheckerOneofCase.GrpcHealthCheck) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GrpcHealthCheck);
      }
      if (healthCheckerCase_ == HealthCheckerOneofCase.CustomHealthCheck) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CustomHealthCheck);
      }
      if (noTrafficInterval_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NoTrafficInterval);
      }
      if (unhealthyInterval_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnhealthyInterval);
      }
      if (unhealthyEdgeInterval_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnhealthyEdgeInterval);
      }
      if (healthyEdgeInterval_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HealthyEdgeInterval);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HealthCheck other) {
      if (other == null) {
        return;
      }
      if (other.timeout_ != null) {
        if (timeout_ == null) {
          timeout_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        Timeout.MergeFrom(other.Timeout);
      }
      if (other.interval_ != null) {
        if (interval_ == null) {
          interval_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        Interval.MergeFrom(other.Interval);
      }
      if (other.intervalJitter_ != null) {
        if (intervalJitter_ == null) {
          intervalJitter_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        IntervalJitter.MergeFrom(other.IntervalJitter);
      }
      if (other.unhealthyThreshold_ != null) {
        if (unhealthyThreshold_ == null || other.UnhealthyThreshold != 0) {
          UnhealthyThreshold = other.UnhealthyThreshold;
        }
      }
      if (other.healthyThreshold_ != null) {
        if (healthyThreshold_ == null || other.HealthyThreshold != 0) {
          HealthyThreshold = other.HealthyThreshold;
        }
      }
      if (other.altPort_ != null) {
        if (altPort_ == null || other.AltPort != 0) {
          AltPort = other.AltPort;
        }
      }
      if (other.reuseConnection_ != null) {
        if (reuseConnection_ == null || other.ReuseConnection != false) {
          ReuseConnection = other.ReuseConnection;
        }
      }
      if (other.noTrafficInterval_ != null) {
        if (noTrafficInterval_ == null) {
          noTrafficInterval_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        NoTrafficInterval.MergeFrom(other.NoTrafficInterval);
      }
      if (other.unhealthyInterval_ != null) {
        if (unhealthyInterval_ == null) {
          unhealthyInterval_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        UnhealthyInterval.MergeFrom(other.UnhealthyInterval);
      }
      if (other.unhealthyEdgeInterval_ != null) {
        if (unhealthyEdgeInterval_ == null) {
          unhealthyEdgeInterval_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        UnhealthyEdgeInterval.MergeFrom(other.UnhealthyEdgeInterval);
      }
      if (other.healthyEdgeInterval_ != null) {
        if (healthyEdgeInterval_ == null) {
          healthyEdgeInterval_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        HealthyEdgeInterval.MergeFrom(other.HealthyEdgeInterval);
      }
      switch (other.HealthCheckerCase) {
        case HealthCheckerOneofCase.HttpHealthCheck:
          if (HttpHealthCheck == null) {
            HttpHealthCheck = new global::Envoy.Api.V2.Core.HealthCheck.Types.HttpHealthCheck();
          }
          HttpHealthCheck.MergeFrom(other.HttpHealthCheck);
          break;
        case HealthCheckerOneofCase.TcpHealthCheck:
          if (TcpHealthCheck == null) {
            TcpHealthCheck = new global::Envoy.Api.V2.Core.HealthCheck.Types.TcpHealthCheck();
          }
          TcpHealthCheck.MergeFrom(other.TcpHealthCheck);
          break;
        case HealthCheckerOneofCase.RedisHealthCheck:
          if (RedisHealthCheck == null) {
            RedisHealthCheck = new global::Envoy.Api.V2.Core.HealthCheck.Types.RedisHealthCheck();
          }
          RedisHealthCheck.MergeFrom(other.RedisHealthCheck);
          break;
        case HealthCheckerOneofCase.GrpcHealthCheck:
          if (GrpcHealthCheck == null) {
            GrpcHealthCheck = new global::Envoy.Api.V2.Core.HealthCheck.Types.GrpcHealthCheck();
          }
          GrpcHealthCheck.MergeFrom(other.GrpcHealthCheck);
          break;
        case HealthCheckerOneofCase.CustomHealthCheck:
          if (CustomHealthCheck == null) {
            CustomHealthCheck = new global::Envoy.Api.V2.Core.HealthCheck.Types.CustomHealthCheck();
          }
          CustomHealthCheck.MergeFrom(other.CustomHealthCheck);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timeout_ == null) {
              timeout_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(timeout_);
            break;
          }
          case 18: {
            if (interval_ == null) {
              interval_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(interval_);
            break;
          }
          case 26: {
            if (intervalJitter_ == null) {
              intervalJitter_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(intervalJitter_);
            break;
          }
          case 34: {
            uint? value = _single_unhealthyThreshold_codec.Read(input);
            if (unhealthyThreshold_ == null || value != 0) {
              UnhealthyThreshold = value;
            }
            break;
          }
          case 42: {
            uint? value = _single_healthyThreshold_codec.Read(input);
            if (healthyThreshold_ == null || value != 0) {
              HealthyThreshold = value;
            }
            break;
          }
          case 50: {
            uint? value = _single_altPort_codec.Read(input);
            if (altPort_ == null || value != 0) {
              AltPort = value;
            }
            break;
          }
          case 58: {
            bool? value = _single_reuseConnection_codec.Read(input);
            if (reuseConnection_ == null || value != false) {
              ReuseConnection = value;
            }
            break;
          }
          case 66: {
            global::Envoy.Api.V2.Core.HealthCheck.Types.HttpHealthCheck subBuilder = new global::Envoy.Api.V2.Core.HealthCheck.Types.HttpHealthCheck();
            if (healthCheckerCase_ == HealthCheckerOneofCase.HttpHealthCheck) {
              subBuilder.MergeFrom(HttpHealthCheck);
            }
            input.ReadMessage(subBuilder);
            HttpHealthCheck = subBuilder;
            break;
          }
          case 74: {
            global::Envoy.Api.V2.Core.HealthCheck.Types.TcpHealthCheck subBuilder = new global::Envoy.Api.V2.Core.HealthCheck.Types.TcpHealthCheck();
            if (healthCheckerCase_ == HealthCheckerOneofCase.TcpHealthCheck) {
              subBuilder.MergeFrom(TcpHealthCheck);
            }
            input.ReadMessage(subBuilder);
            TcpHealthCheck = subBuilder;
            break;
          }
          case 82: {
            global::Envoy.Api.V2.Core.HealthCheck.Types.RedisHealthCheck subBuilder = new global::Envoy.Api.V2.Core.HealthCheck.Types.RedisHealthCheck();
            if (healthCheckerCase_ == HealthCheckerOneofCase.RedisHealthCheck) {
              subBuilder.MergeFrom(RedisHealthCheck);
            }
            input.ReadMessage(subBuilder);
            RedisHealthCheck = subBuilder;
            break;
          }
          case 90: {
            global::Envoy.Api.V2.Core.HealthCheck.Types.GrpcHealthCheck subBuilder = new global::Envoy.Api.V2.Core.HealthCheck.Types.GrpcHealthCheck();
            if (healthCheckerCase_ == HealthCheckerOneofCase.GrpcHealthCheck) {
              subBuilder.MergeFrom(GrpcHealthCheck);
            }
            input.ReadMessage(subBuilder);
            GrpcHealthCheck = subBuilder;
            break;
          }
          case 98: {
            if (noTrafficInterval_ == null) {
              noTrafficInterval_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(noTrafficInterval_);
            break;
          }
          case 106: {
            global::Envoy.Api.V2.Core.HealthCheck.Types.CustomHealthCheck subBuilder = new global::Envoy.Api.V2.Core.HealthCheck.Types.CustomHealthCheck();
            if (healthCheckerCase_ == HealthCheckerOneofCase.CustomHealthCheck) {
              subBuilder.MergeFrom(CustomHealthCheck);
            }
            input.ReadMessage(subBuilder);
            CustomHealthCheck = subBuilder;
            break;
          }
          case 114: {
            if (unhealthyInterval_ == null) {
              unhealthyInterval_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(unhealthyInterval_);
            break;
          }
          case 122: {
            if (unhealthyEdgeInterval_ == null) {
              unhealthyEdgeInterval_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(unhealthyEdgeInterval_);
            break;
          }
          case 130: {
            if (healthyEdgeInterval_ == null) {
              healthyEdgeInterval_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(healthyEdgeInterval_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the HealthCheck message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Describes the encoding of the payload bytes in the payload.
      /// </summary>
      public sealed partial class Payload : pb::IMessage<Payload> {
        private static readonly pb::MessageParser<Payload> _parser = new pb::MessageParser<Payload>(() => new Payload());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Payload> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Api.V2.Core.HealthCheck.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Payload() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Payload(Payload other) : this() {
          switch (other.PayloadCase) {
            case PayloadOneofCase.Text:
              Text = other.Text;
              break;
            case PayloadOneofCase.Binary:
              Binary = other.Binary;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Payload Clone() {
          return new Payload(this);
        }

        /// <summary>Field number for the "text" field.</summary>
        public const int TextFieldNumber = 1;
        /// <summary>
        /// Hex encoded payload. E.g., "000000FF".
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Text {
          get { return payloadCase_ == PayloadOneofCase.Text ? (string) payload_ : ""; }
          set {
            payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            payloadCase_ = PayloadOneofCase.Text;
          }
        }

        /// <summary>Field number for the "binary" field.</summary>
        public const int BinaryFieldNumber = 2;
        /// <summary>
        /// [#not-implemented-hide:] Binary payload.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Binary {
          get { return payloadCase_ == PayloadOneofCase.Binary ? (pb::ByteString) payload_ : pb::ByteString.Empty; }
          set {
            payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            payloadCase_ = PayloadOneofCase.Binary;
          }
        }

        private object payload_;
        /// <summary>Enum of possible cases for the "payload" oneof.</summary>
        public enum PayloadOneofCase {
          None = 0,
          Text = 1,
          Binary = 2,
        }
        private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PayloadOneofCase PayloadCase {
          get { return payloadCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPayload() {
          payloadCase_ = PayloadOneofCase.None;
          payload_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Payload);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Payload other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Text != other.Text) return false;
          if (Binary != other.Binary) return false;
          if (PayloadCase != other.PayloadCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (payloadCase_ == PayloadOneofCase.Text) hash ^= Text.GetHashCode();
          if (payloadCase_ == PayloadOneofCase.Binary) hash ^= Binary.GetHashCode();
          hash ^= (int) payloadCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (payloadCase_ == PayloadOneofCase.Text) {
            output.WriteRawTag(10);
            output.WriteString(Text);
          }
          if (payloadCase_ == PayloadOneofCase.Binary) {
            output.WriteRawTag(18);
            output.WriteBytes(Binary);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (payloadCase_ == PayloadOneofCase.Text) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
          }
          if (payloadCase_ == PayloadOneofCase.Binary) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Binary);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Payload other) {
          if (other == null) {
            return;
          }
          switch (other.PayloadCase) {
            case PayloadOneofCase.Text:
              Text = other.Text;
              break;
            case PayloadOneofCase.Binary:
              Binary = other.Binary;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Text = input.ReadString();
                break;
              }
              case 18: {
                Binary = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

      public sealed partial class HttpHealthCheck : pb::IMessage<HttpHealthCheck> {
        private static readonly pb::MessageParser<HttpHealthCheck> _parser = new pb::MessageParser<HttpHealthCheck>(() => new HttpHealthCheck());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<HttpHealthCheck> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Api.V2.Core.HealthCheck.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HttpHealthCheck() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HttpHealthCheck(HttpHealthCheck other) : this() {
          host_ = other.host_;
          path_ = other.path_;
          Send = other.send_ != null ? other.Send.Clone() : null;
          Receive = other.receive_ != null ? other.Receive.Clone() : null;
          serviceName_ = other.serviceName_;
          requestHeadersToAdd_ = other.requestHeadersToAdd_.Clone();
          useHttp2_ = other.useHttp2_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HttpHealthCheck Clone() {
          return new HttpHealthCheck(this);
        }

        /// <summary>Field number for the "host" field.</summary>
        public const int HostFieldNumber = 1;
        private string host_ = "";
        /// <summary>
        /// The value of the host header in the HTTP health check request. If
        /// left empty (default value), the name of the cluster this health check is associated
        /// with will be used.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Host {
          get { return host_; }
          set {
            host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "path" field.</summary>
        public const int PathFieldNumber = 2;
        private string path_ = "";
        /// <summary>
        /// Specifies the HTTP path that will be requested during health checking. For example
        /// */healthcheck*.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Path {
          get { return path_; }
          set {
            path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "send" field.</summary>
        public const int SendFieldNumber = 3;
        private global::Envoy.Api.V2.Core.HealthCheck.Types.Payload send_;
        /// <summary>
        /// [#not-implemented-hide:] HTTP specific payload.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Envoy.Api.V2.Core.HealthCheck.Types.Payload Send {
          get { return send_; }
          set {
            send_ = value;
          }
        }

        /// <summary>Field number for the "receive" field.</summary>
        public const int ReceiveFieldNumber = 4;
        private global::Envoy.Api.V2.Core.HealthCheck.Types.Payload receive_;
        /// <summary>
        /// [#not-implemented-hide:] HTTP specific response.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Envoy.Api.V2.Core.HealthCheck.Types.Payload Receive {
          get { return receive_; }
          set {
            receive_ = value;
          }
        }

        /// <summary>Field number for the "service_name" field.</summary>
        public const int ServiceNameFieldNumber = 5;
        private string serviceName_ = "";
        /// <summary>
        /// An optional service name parameter which is used to validate the identity of
        /// the health checked cluster. See the :ref:`architecture overview
        /// &lt;arch_overview_health_checking_identity>` for more information.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ServiceName {
          get { return serviceName_; }
          set {
            serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "request_headers_to_add" field.</summary>
        public const int RequestHeadersToAddFieldNumber = 6;
        private static readonly pb::FieldCodec<global::Envoy.Api.V2.Core.HeaderValueOption> _repeated_requestHeadersToAdd_codec
            = pb::FieldCodec.ForMessage(50, global::Envoy.Api.V2.Core.HeaderValueOption.Parser);
        private readonly pbc::RepeatedField<global::Envoy.Api.V2.Core.HeaderValueOption> requestHeadersToAdd_ = new pbc::RepeatedField<global::Envoy.Api.V2.Core.HeaderValueOption>();
        /// <summary>
        /// Specifies a list of HTTP headers that should be added to each request that is sent to the
        /// health checked cluster.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Envoy.Api.V2.Core.HeaderValueOption> RequestHeadersToAdd {
          get { return requestHeadersToAdd_; }
        }

        /// <summary>Field number for the "use_http2" field.</summary>
        public const int UseHttp2FieldNumber = 7;
        private bool useHttp2_;
        /// <summary>
        /// If set, health checks will be made using http/2.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool UseHttp2 {
          get { return useHttp2_; }
          set {
            useHttp2_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as HttpHealthCheck);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(HttpHealthCheck other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Host != other.Host) return false;
          if (Path != other.Path) return false;
          if (!object.Equals(Send, other.Send)) return false;
          if (!object.Equals(Receive, other.Receive)) return false;
          if (ServiceName != other.ServiceName) return false;
          if(!requestHeadersToAdd_.Equals(other.requestHeadersToAdd_)) return false;
          if (UseHttp2 != other.UseHttp2) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Host.Length != 0) hash ^= Host.GetHashCode();
          if (Path.Length != 0) hash ^= Path.GetHashCode();
          if (send_ != null) hash ^= Send.GetHashCode();
          if (receive_ != null) hash ^= Receive.GetHashCode();
          if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
          hash ^= requestHeadersToAdd_.GetHashCode();
          if (UseHttp2 != false) hash ^= UseHttp2.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Host.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Host);
          }
          if (Path.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Path);
          }
          if (send_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Send);
          }
          if (receive_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Receive);
          }
          if (ServiceName.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(ServiceName);
          }
          requestHeadersToAdd_.WriteTo(output, _repeated_requestHeadersToAdd_codec);
          if (UseHttp2 != false) {
            output.WriteRawTag(56);
            output.WriteBool(UseHttp2);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Host.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
          }
          if (Path.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
          }
          if (send_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Send);
          }
          if (receive_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Receive);
          }
          if (ServiceName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
          }
          size += requestHeadersToAdd_.CalculateSize(_repeated_requestHeadersToAdd_codec);
          if (UseHttp2 != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(HttpHealthCheck other) {
          if (other == null) {
            return;
          }
          if (other.Host.Length != 0) {
            Host = other.Host;
          }
          if (other.Path.Length != 0) {
            Path = other.Path;
          }
          if (other.send_ != null) {
            if (send_ == null) {
              send_ = new global::Envoy.Api.V2.Core.HealthCheck.Types.Payload();
            }
            Send.MergeFrom(other.Send);
          }
          if (other.receive_ != null) {
            if (receive_ == null) {
              receive_ = new global::Envoy.Api.V2.Core.HealthCheck.Types.Payload();
            }
            Receive.MergeFrom(other.Receive);
          }
          if (other.ServiceName.Length != 0) {
            ServiceName = other.ServiceName;
          }
          requestHeadersToAdd_.Add(other.requestHeadersToAdd_);
          if (other.UseHttp2 != false) {
            UseHttp2 = other.UseHttp2;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Host = input.ReadString();
                break;
              }
              case 18: {
                Path = input.ReadString();
                break;
              }
              case 26: {
                if (send_ == null) {
                  send_ = new global::Envoy.Api.V2.Core.HealthCheck.Types.Payload();
                }
                input.ReadMessage(send_);
                break;
              }
              case 34: {
                if (receive_ == null) {
                  receive_ = new global::Envoy.Api.V2.Core.HealthCheck.Types.Payload();
                }
                input.ReadMessage(receive_);
                break;
              }
              case 42: {
                ServiceName = input.ReadString();
                break;
              }
              case 50: {
                requestHeadersToAdd_.AddEntriesFrom(input, _repeated_requestHeadersToAdd_codec);
                break;
              }
              case 56: {
                UseHttp2 = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class TcpHealthCheck : pb::IMessage<TcpHealthCheck> {
        private static readonly pb::MessageParser<TcpHealthCheck> _parser = new pb::MessageParser<TcpHealthCheck>(() => new TcpHealthCheck());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TcpHealthCheck> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Api.V2.Core.HealthCheck.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TcpHealthCheck() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TcpHealthCheck(TcpHealthCheck other) : this() {
          Send = other.send_ != null ? other.Send.Clone() : null;
          receive_ = other.receive_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TcpHealthCheck Clone() {
          return new TcpHealthCheck(this);
        }

        /// <summary>Field number for the "send" field.</summary>
        public const int SendFieldNumber = 1;
        private global::Envoy.Api.V2.Core.HealthCheck.Types.Payload send_;
        /// <summary>
        /// Empty payloads imply a connect-only health check.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Envoy.Api.V2.Core.HealthCheck.Types.Payload Send {
          get { return send_; }
          set {
            send_ = value;
          }
        }

        /// <summary>Field number for the "receive" field.</summary>
        public const int ReceiveFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Envoy.Api.V2.Core.HealthCheck.Types.Payload> _repeated_receive_codec
            = pb::FieldCodec.ForMessage(18, global::Envoy.Api.V2.Core.HealthCheck.Types.Payload.Parser);
        private readonly pbc::RepeatedField<global::Envoy.Api.V2.Core.HealthCheck.Types.Payload> receive_ = new pbc::RepeatedField<global::Envoy.Api.V2.Core.HealthCheck.Types.Payload>();
        /// <summary>
        /// When checking the response, “fuzzy” matching is performed such that each
        /// binary block must be found, and in the order specified, but not
        /// necessarily contiguous.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Envoy.Api.V2.Core.HealthCheck.Types.Payload> Receive {
          get { return receive_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TcpHealthCheck);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TcpHealthCheck other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Send, other.Send)) return false;
          if(!receive_.Equals(other.receive_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (send_ != null) hash ^= Send.GetHashCode();
          hash ^= receive_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (send_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Send);
          }
          receive_.WriteTo(output, _repeated_receive_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (send_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Send);
          }
          size += receive_.CalculateSize(_repeated_receive_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TcpHealthCheck other) {
          if (other == null) {
            return;
          }
          if (other.send_ != null) {
            if (send_ == null) {
              send_ = new global::Envoy.Api.V2.Core.HealthCheck.Types.Payload();
            }
            Send.MergeFrom(other.Send);
          }
          receive_.Add(other.receive_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (send_ == null) {
                  send_ = new global::Envoy.Api.V2.Core.HealthCheck.Types.Payload();
                }
                input.ReadMessage(send_);
                break;
              }
              case 18: {
                receive_.AddEntriesFrom(input, _repeated_receive_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class RedisHealthCheck : pb::IMessage<RedisHealthCheck> {
        private static readonly pb::MessageParser<RedisHealthCheck> _parser = new pb::MessageParser<RedisHealthCheck>(() => new RedisHealthCheck());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RedisHealthCheck> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Api.V2.Core.HealthCheck.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RedisHealthCheck() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RedisHealthCheck(RedisHealthCheck other) : this() {
          key_ = other.key_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RedisHealthCheck Clone() {
          return new RedisHealthCheck(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private string key_ = "";
        /// <summary>
        /// If set, optionally perform ``EXISTS &lt;key>`` instead of ``PING``. A return value
        /// from Redis of 0 (does not exist) is considered a passing healthcheck. A return value other
        /// than 0 is considered a failure. This allows the user to mark a Redis instance for maintenance
        /// by setting the specified key to any value and waiting for traffic to drain.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Key {
          get { return key_; }
          set {
            key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RedisHealthCheck);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RedisHealthCheck other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Key != other.Key) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Key.Length != 0) hash ^= Key.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Key.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Key);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Key.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RedisHealthCheck other) {
          if (other == null) {
            return;
          }
          if (other.Key.Length != 0) {
            Key = other.Key;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Key = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// `grpc.health.v1.Health
      /// &lt;https://github.com/grpc/grpc/blob/master/src/proto/grpc/health/v1/health.proto>`_-based
      /// healthcheck. See `gRPC doc &lt;https://github.com/grpc/grpc/blob/master/doc/health-checking.md>`_
      /// for details.
      /// </summary>
      public sealed partial class GrpcHealthCheck : pb::IMessage<GrpcHealthCheck> {
        private static readonly pb::MessageParser<GrpcHealthCheck> _parser = new pb::MessageParser<GrpcHealthCheck>(() => new GrpcHealthCheck());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GrpcHealthCheck> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Api.V2.Core.HealthCheck.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GrpcHealthCheck() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GrpcHealthCheck(GrpcHealthCheck other) : this() {
          serviceName_ = other.serviceName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GrpcHealthCheck Clone() {
          return new GrpcHealthCheck(this);
        }

        /// <summary>Field number for the "service_name" field.</summary>
        public const int ServiceNameFieldNumber = 1;
        private string serviceName_ = "";
        /// <summary>
        /// An optional service name parameter which will be sent to gRPC service in
        /// `grpc.health.v1.HealthCheckRequest
        /// &lt;https://github.com/grpc/grpc/blob/master/src/proto/grpc/health/v1/health.proto#L20>`_.
        /// message. See `gRPC health-checking overview
        /// &lt;https://github.com/grpc/grpc/blob/master/doc/health-checking.md>`_ for more information.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ServiceName {
          get { return serviceName_; }
          set {
            serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GrpcHealthCheck);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GrpcHealthCheck other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ServiceName != other.ServiceName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ServiceName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ServiceName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ServiceName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GrpcHealthCheck other) {
          if (other == null) {
            return;
          }
          if (other.ServiceName.Length != 0) {
            ServiceName = other.ServiceName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ServiceName = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Custom health check.
      /// </summary>
      public sealed partial class CustomHealthCheck : pb::IMessage<CustomHealthCheck> {
        private static readonly pb::MessageParser<CustomHealthCheck> _parser = new pb::MessageParser<CustomHealthCheck>(() => new CustomHealthCheck());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CustomHealthCheck> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Api.V2.Core.HealthCheck.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CustomHealthCheck() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CustomHealthCheck(CustomHealthCheck other) : this() {
          name_ = other.name_;
          Config = other.config_ != null ? other.Config.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CustomHealthCheck Clone() {
          return new CustomHealthCheck(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        /// <summary>
        /// The registered name of the custom health checker.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "config" field.</summary>
        public const int ConfigFieldNumber = 2;
        private global::Google.Protobuf.WellKnownTypes.Struct config_;
        /// <summary>
        /// A custom health checker specific configuration which depends on the custom health checker
        /// being instantiated. See :api:`envoy/config/health_checker` for reference.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Struct Config {
          get { return config_; }
          set {
            config_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CustomHealthCheck);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CustomHealthCheck other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (!object.Equals(Config, other.Config)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (config_ != null) hash ^= Config.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (config_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Config);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (config_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CustomHealthCheck other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.config_ != null) {
            if (config_ == null) {
              config_ = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            Config.MergeFrom(other.Config);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                if (config_ == null) {
                  config_ = new global::Google.Protobuf.WellKnownTypes.Struct();
                }
                input.ReadMessage(config_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
