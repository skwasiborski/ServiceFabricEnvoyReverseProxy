// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/api/v2/core/base.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Api.V2.Core {

  /// <summary>Holder for reflection information generated from envoy/api/v2/core/base.proto</summary>
  public static partial class BaseReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/api/v2/core/base.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BaseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxlbnZveS9hcGkvdjIvY29yZS9iYXNlLnByb3RvEhFlbnZveS5hcGkudjIu",
            "Y29yZRocZ29vZ2xlL3Byb3RvYnVmL3N0cnVjdC5wcm90bxoeZ29vZ2xlL3By",
            "b3RvYnVmL3dyYXBwZXJzLnByb3RvGhd2YWxpZGF0ZS92YWxpZGF0ZS5wcm90",
            "bxoUZ29nb3Byb3RvL2dvZ28ucHJvdG8iOgoITG9jYWxpdHkSDgoGcmVnaW9u",
            "GAEgASgJEgwKBHpvbmUYAiABKAkSEAoIc3ViX3pvbmUYAyABKAkilAEKBE5v",
            "ZGUSCgoCaWQYASABKAkSDwoHY2x1c3RlchgCIAEoCRIpCghtZXRhZGF0YRgD",
            "IAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3QSLQoIbG9jYWxpdHkYBCAB",
            "KAsyGy5lbnZveS5hcGkudjIuY29yZS5Mb2NhbGl0eRIVCg1idWlsZF92ZXJz",
            "aW9uGAUgASgJIqQBCghNZXRhZGF0YRJICg9maWx0ZXJfbWV0YWRhdGEYASAD",
            "KAsyLy5lbnZveS5hcGkudjIuY29yZS5NZXRhZGF0YS5GaWx0ZXJNZXRhZGF0",
            "YUVudHJ5Gk4KE0ZpbHRlck1ldGFkYXRhRW50cnkSCwoDa2V5GAEgASgJEiYK",
            "BXZhbHVlGAIgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdDoCOAEiRgoN",
            "UnVudGltZVVJbnQzMhIVCg1kZWZhdWx0X3ZhbHVlGAIgASgNEh4KC3J1bnRp",
            "bWVfa2V5GAMgASgJQgm66cADBHICIAEiKQoLSGVhZGVyVmFsdWUSCwoDa2V5",
            "GAEgASgJEg0KBXZhbHVlGAIgASgJIm8KEUhlYWRlclZhbHVlT3B0aW9uEi4K",
            "BmhlYWRlchgBIAEoCzIeLmVudm95LmFwaS52Mi5jb3JlLkhlYWRlclZhbHVl",
            "EioKBmFwcGVuZBgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUi",
            "hgEKCkRhdGFTb3VyY2USHQoIZmlsZW5hbWUYASABKAlCCbrpwAMEcgIgAUgA",
            "EiEKDGlubGluZV9ieXRlcxgCIAEoDEIJuunAAwR6AhABSAASIgoNaW5saW5l",
            "X3N0cmluZxgDIAEoCUIJuunAAwRyAiABSABCEgoJc3BlY2lmaWVyEgW46cAD",
            "ASJTCg9UcmFuc3BvcnRTb2NrZXQSFwoEbmFtZRgBIAEoCUIJuunAAwRyAiAB",
            "EicKBmNvbmZpZxgCIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3QqKAoP",
            "Um91dGluZ1ByaW9yaXR5EgsKB0RFRkFVTFQQABIICgRISUdIEAEqhAEKDVJl",
            "cXVlc3RNZXRob2QSFgoSTUVUSE9EX1VOU1BFQ0lGSUVEEAASBwoDR0VUEAES",
            "CAoESEVBRBACEggKBFBPU1QQAxIHCgNQVVQQBBIKCgZERUxFVEUQBRILCgdD",
            "T05ORUNUEAYSCwoHT1BUSU9OUxAHEgkKBVRSQUNFEAgaBIijHgBCCloEY29y",
            "ZajiHgFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, global::Gogoproto.GogoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Envoy.Api.V2.Core.RoutingPriority), typeof(global::Envoy.Api.V2.Core.RequestMethod), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.Core.Locality), global::Envoy.Api.V2.Core.Locality.Parser, new[]{ "Region", "Zone", "SubZone" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.Core.Node), global::Envoy.Api.V2.Core.Node.Parser, new[]{ "Id", "Cluster", "Metadata", "Locality", "BuildVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.Core.Metadata), global::Envoy.Api.V2.Core.Metadata.Parser, new[]{ "FilterMetadata" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.Core.RuntimeUInt32), global::Envoy.Api.V2.Core.RuntimeUInt32.Parser, new[]{ "DefaultValue", "RuntimeKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.Core.HeaderValue), global::Envoy.Api.V2.Core.HeaderValue.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.Core.HeaderValueOption), global::Envoy.Api.V2.Core.HeaderValueOption.Parser, new[]{ "Header", "Append" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.Core.DataSource), global::Envoy.Api.V2.Core.DataSource.Parser, new[]{ "Filename", "InlineBytes", "InlineString" }, new[]{ "Specifier" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.Core.TransportSocket), global::Envoy.Api.V2.Core.TransportSocket.Parser, new[]{ "Name", "Config" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Envoy supports :ref:`upstream priority routing
  /// &lt;arch_overview_http_routing_priority>` both at the route and the virtual
  /// cluster level. The current priority implementation uses different connection
  /// pool and circuit breaking settings for each priority level. This means that
  /// even for HTTP/2 requests, two physical connections will be used to an
  /// upstream host. In the future Envoy will likely support true HTTP/2 priority
  /// over a single upstream connection.
  /// </summary>
  public enum RoutingPriority {
    [pbr::OriginalName("DEFAULT")] Default = 0,
    [pbr::OriginalName("HIGH")] High = 1,
  }

  /// <summary>
  /// HTTP request method.
  /// </summary>
  public enum RequestMethod {
    [pbr::OriginalName("METHOD_UNSPECIFIED")] MethodUnspecified = 0,
    [pbr::OriginalName("GET")] Get = 1,
    [pbr::OriginalName("HEAD")] Head = 2,
    [pbr::OriginalName("POST")] Post = 3,
    [pbr::OriginalName("PUT")] Put = 4,
    [pbr::OriginalName("DELETE")] Delete = 5,
    [pbr::OriginalName("CONNECT")] Connect = 6,
    [pbr::OriginalName("OPTIONS")] Options = 7,
    [pbr::OriginalName("TRACE")] Trace = 8,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Identifies location of where either Envoy runs or where upstream hosts run.
  /// </summary>
  public sealed partial class Locality : pb::IMessage<Locality> {
    private static readonly pb::MessageParser<Locality> _parser = new pb::MessageParser<Locality>(() => new Locality());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Locality> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V2.Core.BaseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Locality() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Locality(Locality other) : this() {
      region_ = other.region_;
      zone_ = other.zone_;
      subZone_ = other.subZone_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Locality Clone() {
      return new Locality(this);
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 1;
    private string region_ = "";
    /// <summary>
    /// Region this :ref:`zone &lt;envoy_api_field_core.Locality.zone>` belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "zone" field.</summary>
    public const int ZoneFieldNumber = 2;
    private string zone_ = "";
    /// <summary>
    /// Defines the local service zone where Envoy is running. Though optional, it
    /// should be set if discovery service routing is used and the discovery
    /// service exposes :ref:`zone data &lt;config_cluster_manager_sds_api_host_az>`,
    /// either in this message or via :option:`--service-zone`. The meaning of zone
    /// is context dependent, e.g. `Availability Zone (AZ)
    /// &lt;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html>`_
    /// on AWS, `Zone &lt;https://cloud.google.com/compute/docs/regions-zones/>`_ on
    /// GCP, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Zone {
      get { return zone_; }
      set {
        zone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sub_zone" field.</summary>
    public const int SubZoneFieldNumber = 3;
    private string subZone_ = "";
    /// <summary>
    /// When used for locality of upstream hosts, this field further splits zone
    /// into smaller chunks of sub-zones so they can be load balanced
    /// independently.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubZone {
      get { return subZone_; }
      set {
        subZone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Locality);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Locality other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Region != other.Region) return false;
      if (Zone != other.Zone) return false;
      if (SubZone != other.SubZone) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (Zone.Length != 0) hash ^= Zone.GetHashCode();
      if (SubZone.Length != 0) hash ^= SubZone.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Region.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Region);
      }
      if (Zone.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Zone);
      }
      if (SubZone.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SubZone);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (Zone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Zone);
      }
      if (SubZone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubZone);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Locality other) {
      if (other == null) {
        return;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      if (other.Zone.Length != 0) {
        Zone = other.Zone;
      }
      if (other.SubZone.Length != 0) {
        SubZone = other.SubZone;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Region = input.ReadString();
            break;
          }
          case 18: {
            Zone = input.ReadString();
            break;
          }
          case 26: {
            SubZone = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Identifies a specific Envoy instance. The node identifier is presented to the
  /// management server, which may use this identifier to distinguish per Envoy
  /// configuration for serving.
  /// </summary>
  public sealed partial class Node : pb::IMessage<Node> {
    private static readonly pb::MessageParser<Node> _parser = new pb::MessageParser<Node>(() => new Node());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Node> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V2.Core.BaseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node(Node other) : this() {
      id_ = other.id_;
      cluster_ = other.cluster_;
      Metadata = other.metadata_ != null ? other.Metadata.Clone() : null;
      Locality = other.locality_ != null ? other.Locality.Clone() : null;
      buildVersion_ = other.buildVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node Clone() {
      return new Node(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// An opaque node identifier for the Envoy node. This also provides the local
    /// service node name. It should be set if any of the following features are
    /// used: :ref:`statsd &lt;arch_overview_statistics>`, :ref:`CDS
    /// &lt;config_cluster_manager_cds>`, and :ref:`HTTP tracing
    /// &lt;arch_overview_tracing>`, either in this message or via
    /// :option:`--service-node`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cluster" field.</summary>
    public const int ClusterFieldNumber = 2;
    private string cluster_ = "";
    /// <summary>
    /// Defines the local service cluster name where Envoy is running. Though
    /// optional, it should be set if any of the following features are used:
    /// :ref:`statsd &lt;arch_overview_statistics>`, :ref:`health check cluster
    /// verification &lt;config_cluster_manager_cluster_hc_service_name>`,
    /// :ref:`runtime override directory &lt;config_runtime_override_subdirectory>`,
    /// :ref:`user agent addition &lt;config_http_conn_man_add_user_agent>`,
    /// :ref:`HTTP global rate limiting &lt;config_http_filters_rate_limit>`,
    /// :ref:`CDS &lt;config_cluster_manager_cds>`, and :ref:`HTTP tracing
    /// &lt;arch_overview_tracing>`, either in this message or via
    /// :option:`--service-cluster`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cluster {
      get { return cluster_; }
      set {
        cluster_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Struct metadata_;
    /// <summary>
    /// Opaque metadata extending the node identifier. Envoy will pass this
    /// directly to the management server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "locality" field.</summary>
    public const int LocalityFieldNumber = 4;
    private global::Envoy.Api.V2.Core.Locality locality_;
    /// <summary>
    /// Locality specifying where the Envoy instance is running.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.Locality Locality {
      get { return locality_; }
      set {
        locality_ = value;
      }
    }

    /// <summary>Field number for the "build_version" field.</summary>
    public const int BuildVersionFieldNumber = 5;
    private string buildVersion_ = "";
    /// <summary>
    /// This is motivated by informing a management server during canary which
    /// version of Envoy is being tested in a heterogeneous fleet. This will be set
    /// by Envoy in management server RPCs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuildVersion {
      get { return buildVersion_; }
      set {
        buildVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Node);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Node other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Cluster != other.Cluster) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (!object.Equals(Locality, other.Locality)) return false;
      if (BuildVersion != other.BuildVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Cluster.Length != 0) hash ^= Cluster.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (locality_ != null) hash ^= Locality.GetHashCode();
      if (BuildVersion.Length != 0) hash ^= BuildVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Cluster.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Cluster);
      }
      if (metadata_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Metadata);
      }
      if (locality_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Locality);
      }
      if (BuildVersion.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BuildVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Cluster.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cluster);
      }
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (locality_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Locality);
      }
      if (BuildVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BuildVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Node other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Cluster.Length != 0) {
        Cluster = other.Cluster;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.locality_ != null) {
        if (locality_ == null) {
          locality_ = new global::Envoy.Api.V2.Core.Locality();
        }
        Locality.MergeFrom(other.Locality);
      }
      if (other.BuildVersion.Length != 0) {
        BuildVersion = other.BuildVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Cluster = input.ReadString();
            break;
          }
          case 26: {
            if (metadata_ == null) {
              metadata_ = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(metadata_);
            break;
          }
          case 34: {
            if (locality_ == null) {
              locality_ = new global::Envoy.Api.V2.Core.Locality();
            }
            input.ReadMessage(locality_);
            break;
          }
          case 42: {
            BuildVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Metadata provides additional inputs to filters based on matched listeners,
  /// filter chains, routes and endpoints. It is structured as a map from filter
  /// name (in reverse DNS format) to metadata specific to the filter. Metadata
  /// key-values for a filter are merged as connection and request handling occurs,
  /// with later values for the same key overriding earlier values.
  ///
  /// An example use of metadata is providing additional values to
  /// http_connection_manager in the envoy.http_connection_manager.access_log
  /// namespace.
  ///
  /// For load balancing, Metadata provides a means to subset cluster endpoints.
  /// Endpoints have a Metadata object associated and routes contain a Metadata
  /// object to match against. There are some well defined metadata used today for
  /// this purpose:
  ///
  /// * ``{"envoy.lb": {"canary": &lt;bool> }}`` This indicates the canary status of an
  ///   endpoint and is also used during header processing
  ///   (x-envoy-upstream-canary) and for stats purposes.
  /// </summary>
  public sealed partial class Metadata : pb::IMessage<Metadata> {
    private static readonly pb::MessageParser<Metadata> _parser = new pb::MessageParser<Metadata>(() => new Metadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Metadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V2.Core.BaseReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metadata(Metadata other) : this() {
      filterMetadata_ = other.filterMetadata_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metadata Clone() {
      return new Metadata(this);
    }

    /// <summary>Field number for the "filter_metadata" field.</summary>
    public const int FilterMetadataFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Struct>.Codec _map_filterMetadata_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Struct>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Struct.Parser), 10);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Struct> filterMetadata_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Struct>();
    /// <summary>
    /// Key is the reverse DNS filter name, e.g. com.acme.widget. The envoy.*
    /// namespace is reserved for Envoy's built-in filters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Struct> FilterMetadata {
      get { return filterMetadata_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Metadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Metadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!FilterMetadata.Equals(other.FilterMetadata)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= FilterMetadata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      filterMetadata_.WriteTo(output, _map_filterMetadata_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += filterMetadata_.CalculateSize(_map_filterMetadata_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Metadata other) {
      if (other == null) {
        return;
      }
      filterMetadata_.Add(other.filterMetadata_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            filterMetadata_.AddEntriesFrom(input, _map_filterMetadata_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Runtime derived uint32 with a default when not specified.
  /// </summary>
  public sealed partial class RuntimeUInt32 : pb::IMessage<RuntimeUInt32> {
    private static readonly pb::MessageParser<RuntimeUInt32> _parser = new pb::MessageParser<RuntimeUInt32>(() => new RuntimeUInt32());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RuntimeUInt32> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V2.Core.BaseReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuntimeUInt32() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuntimeUInt32(RuntimeUInt32 other) : this() {
      defaultValue_ = other.defaultValue_;
      runtimeKey_ = other.runtimeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuntimeUInt32 Clone() {
      return new RuntimeUInt32(this);
    }

    /// <summary>Field number for the "default_value" field.</summary>
    public const int DefaultValueFieldNumber = 2;
    private uint defaultValue_;
    /// <summary>
    /// Default value if runtime value is not available.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DefaultValue {
      get { return defaultValue_; }
      set {
        defaultValue_ = value;
      }
    }

    /// <summary>Field number for the "runtime_key" field.</summary>
    public const int RuntimeKeyFieldNumber = 3;
    private string runtimeKey_ = "";
    /// <summary>
    /// Runtime key to get value for comparison. This value is used if defined.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RuntimeKey {
      get { return runtimeKey_; }
      set {
        runtimeKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RuntimeUInt32);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RuntimeUInt32 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DefaultValue != other.DefaultValue) return false;
      if (RuntimeKey != other.RuntimeKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DefaultValue != 0) hash ^= DefaultValue.GetHashCode();
      if (RuntimeKey.Length != 0) hash ^= RuntimeKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DefaultValue != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DefaultValue);
      }
      if (RuntimeKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RuntimeKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DefaultValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DefaultValue);
      }
      if (RuntimeKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RuntimeKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RuntimeUInt32 other) {
      if (other == null) {
        return;
      }
      if (other.DefaultValue != 0) {
        DefaultValue = other.DefaultValue;
      }
      if (other.RuntimeKey.Length != 0) {
        RuntimeKey = other.RuntimeKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            DefaultValue = input.ReadUInt32();
            break;
          }
          case 26: {
            RuntimeKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Header name/value pair.
  /// </summary>
  public sealed partial class HeaderValue : pb::IMessage<HeaderValue> {
    private static readonly pb::MessageParser<HeaderValue> _parser = new pb::MessageParser<HeaderValue>(() => new HeaderValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeaderValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V2.Core.BaseReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeaderValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeaderValue(HeaderValue other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeaderValue Clone() {
      return new HeaderValue(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    /// <summary>
    /// Header name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    /// <summary>
    /// Header value.
    ///
    /// The same :ref:`format specifier &lt;config_access_log_format>` as used for
    /// :ref:`HTTP access logging &lt;config_access_log>` applies here, however
    /// unknown header values are replaced with the empty string instead of `-`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeaderValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeaderValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeaderValue other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Header name/value pair plus option to control append behavior.
  /// </summary>
  public sealed partial class HeaderValueOption : pb::IMessage<HeaderValueOption> {
    private static readonly pb::MessageParser<HeaderValueOption> _parser = new pb::MessageParser<HeaderValueOption>(() => new HeaderValueOption());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeaderValueOption> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V2.Core.BaseReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeaderValueOption() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeaderValueOption(HeaderValueOption other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      Append = other.Append;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeaderValueOption Clone() {
      return new HeaderValueOption(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Envoy.Api.V2.Core.HeaderValue header_;
    /// <summary>
    /// Header name/value pair that this option applies to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.HeaderValue Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "append" field.</summary>
    public const int AppendFieldNumber = 2;
    private static readonly pb::FieldCodec<bool?> _single_append_codec = pb::FieldCodec.ForStructWrapper<bool>(18);
    private bool? append_;
    /// <summary>
    /// Should the value be appended? If true (default), the value is appended to
    /// existing values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? Append {
      get { return append_; }
      set {
        append_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeaderValueOption);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeaderValueOption other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Append != other.Append) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (append_ != null) hash ^= Append.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (append_ != null) {
        _single_append_codec.WriteTagAndValue(output, Append);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (append_ != null) {
        size += _single_append_codec.CalculateSizeWithTag(Append);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeaderValueOption other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Envoy.Api.V2.Core.HeaderValue();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.append_ != null) {
        if (append_ == null || other.Append != false) {
          Append = other.Append;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Envoy.Api.V2.Core.HeaderValue();
            }
            input.ReadMessage(header_);
            break;
          }
          case 18: {
            bool? value = _single_append_codec.Read(input);
            if (append_ == null || value != false) {
              Append = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Data source consisting of either a file or an inline value.
  /// </summary>
  public sealed partial class DataSource : pb::IMessage<DataSource> {
    private static readonly pb::MessageParser<DataSource> _parser = new pb::MessageParser<DataSource>(() => new DataSource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataSource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V2.Core.BaseReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSource(DataSource other) : this() {
      switch (other.SpecifierCase) {
        case SpecifierOneofCase.Filename:
          Filename = other.Filename;
          break;
        case SpecifierOneofCase.InlineBytes:
          InlineBytes = other.InlineBytes;
          break;
        case SpecifierOneofCase.InlineString:
          InlineString = other.InlineString;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSource Clone() {
      return new DataSource(this);
    }

    /// <summary>Field number for the "filename" field.</summary>
    public const int FilenameFieldNumber = 1;
    /// <summary>
    /// Local filesystem data source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filename {
      get { return specifierCase_ == SpecifierOneofCase.Filename ? (string) specifier_ : ""; }
      set {
        specifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        specifierCase_ = SpecifierOneofCase.Filename;
      }
    }

    /// <summary>Field number for the "inline_bytes" field.</summary>
    public const int InlineBytesFieldNumber = 2;
    /// <summary>
    /// Bytes inlined in the configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString InlineBytes {
      get { return specifierCase_ == SpecifierOneofCase.InlineBytes ? (pb::ByteString) specifier_ : pb::ByteString.Empty; }
      set {
        specifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        specifierCase_ = SpecifierOneofCase.InlineBytes;
      }
    }

    /// <summary>Field number for the "inline_string" field.</summary>
    public const int InlineStringFieldNumber = 3;
    /// <summary>
    /// String inlined in the configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InlineString {
      get { return specifierCase_ == SpecifierOneofCase.InlineString ? (string) specifier_ : ""; }
      set {
        specifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        specifierCase_ = SpecifierOneofCase.InlineString;
      }
    }

    private object specifier_;
    /// <summary>Enum of possible cases for the "specifier" oneof.</summary>
    public enum SpecifierOneofCase {
      None = 0,
      Filename = 1,
      InlineBytes = 2,
      InlineString = 3,
    }
    private SpecifierOneofCase specifierCase_ = SpecifierOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecifierOneofCase SpecifierCase {
      get { return specifierCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSpecifier() {
      specifierCase_ = SpecifierOneofCase.None;
      specifier_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataSource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataSource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Filename != other.Filename) return false;
      if (InlineBytes != other.InlineBytes) return false;
      if (InlineString != other.InlineString) return false;
      if (SpecifierCase != other.SpecifierCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (specifierCase_ == SpecifierOneofCase.Filename) hash ^= Filename.GetHashCode();
      if (specifierCase_ == SpecifierOneofCase.InlineBytes) hash ^= InlineBytes.GetHashCode();
      if (specifierCase_ == SpecifierOneofCase.InlineString) hash ^= InlineString.GetHashCode();
      hash ^= (int) specifierCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (specifierCase_ == SpecifierOneofCase.Filename) {
        output.WriteRawTag(10);
        output.WriteString(Filename);
      }
      if (specifierCase_ == SpecifierOneofCase.InlineBytes) {
        output.WriteRawTag(18);
        output.WriteBytes(InlineBytes);
      }
      if (specifierCase_ == SpecifierOneofCase.InlineString) {
        output.WriteRawTag(26);
        output.WriteString(InlineString);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (specifierCase_ == SpecifierOneofCase.Filename) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filename);
      }
      if (specifierCase_ == SpecifierOneofCase.InlineBytes) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(InlineBytes);
      }
      if (specifierCase_ == SpecifierOneofCase.InlineString) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InlineString);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataSource other) {
      if (other == null) {
        return;
      }
      switch (other.SpecifierCase) {
        case SpecifierOneofCase.Filename:
          Filename = other.Filename;
          break;
        case SpecifierOneofCase.InlineBytes:
          InlineBytes = other.InlineBytes;
          break;
        case SpecifierOneofCase.InlineString:
          InlineString = other.InlineString;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Filename = input.ReadString();
            break;
          }
          case 18: {
            InlineBytes = input.ReadBytes();
            break;
          }
          case 26: {
            InlineString = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Configuration for transport socket in :ref:`listeners &lt;config_listeners>` and
  /// :ref:`clusters &lt;config_cluster_manager_cluster>`. If the configuration is
  /// empty, a default transport socket implementation and configuration will be
  /// chosen based on the platform and existence of tls_context.
  /// </summary>
  public sealed partial class TransportSocket : pb::IMessage<TransportSocket> {
    private static readonly pb::MessageParser<TransportSocket> _parser = new pb::MessageParser<TransportSocket>(() => new TransportSocket());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransportSocket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V2.Core.BaseReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransportSocket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransportSocket(TransportSocket other) : this() {
      name_ = other.name_;
      Config = other.config_ != null ? other.Config.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransportSocket Clone() {
      return new TransportSocket(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the transport socket to instantiate. The name must match a supported transport
    /// socket implementation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Struct config_;
    /// <summary>
    /// Implementation specific configuration which depends on the implementation being instantiated.
    /// See the supported transport socket implementations for further documentation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransportSocket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransportSocket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Config, other.Config)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (config_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Config);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransportSocket other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          config_ = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Config.MergeFrom(other.Config);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (config_ == null) {
              config_ = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(config_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
