// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/api/v2/core/config_source.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Api.V2.Core {

  /// <summary>Holder for reflection information generated from envoy/api/v2/core/config_source.proto</summary>
  public static partial class ConfigSourceReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/api/v2/core/config_source.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigSourceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVlbnZveS9hcGkvdjIvY29yZS9jb25maWdfc291cmNlLnByb3RvEhFlbnZv",
            "eS5hcGkudjIuY29yZRokZW52b3kvYXBpL3YyL2NvcmUvZ3JwY19zZXJ2aWNl",
            "LnByb3RvGh5nb29nbGUvcHJvdG9idWYvZHVyYXRpb24ucHJvdG8aF3ZhbGlk",
            "YXRlL3ZhbGlkYXRlLnByb3RvGhRnb2dvcHJvdG8vZ29nby5wcm90byKRAgoP",
            "QXBpQ29uZmlnU291cmNlEkgKCGFwaV90eXBlGAEgASgOMiouZW52b3kuYXBp",
            "LnYyLmNvcmUuQXBpQ29uZmlnU291cmNlLkFwaVR5cGVCCrrpwAMFggECEAES",
            "FQoNY2x1c3Rlcl9uYW1lcxgCIAMoCRI1Cg1ncnBjX3NlcnZpY2VzGAQgAygL",
            "Mh4uZW52b3kuYXBpLnYyLmNvcmUuR3JwY1NlcnZpY2USNgoNcmVmcmVzaF9k",
            "ZWxheRgDIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbkIEmN8fASIu",
            "CgdBcGlUeXBlEg8KC1JFU1RfTEVHQUNZEAASCAoEUkVTVBABEggKBEdSUEMQ",
            "AiIYChZBZ2dyZWdhdGVkQ29uZmlnU291cmNlIrsBCgxDb25maWdTb3VyY2US",
            "DgoEcGF0aBgBIAEoCUgAEj8KEWFwaV9jb25maWdfc291cmNlGAIgASgLMiIu",
            "ZW52b3kuYXBpLnYyLmNvcmUuQXBpQ29uZmlnU291cmNlSAASOAoDYWRzGAMg",
            "ASgLMikuZW52b3kuYXBpLnYyLmNvcmUuQWdncmVnYXRlZENvbmZpZ1NvdXJj",
            "ZUgAQiAKF2NvbmZpZ19zb3VyY2Vfc3BlY2lmaWVyEgW46cADAUIEqOIeAWIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Api.V2.Core.GrpcServiceReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, global::Gogoproto.GogoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.Core.ApiConfigSource), global::Envoy.Api.V2.Core.ApiConfigSource.Parser, new[]{ "ApiType", "ClusterNames", "GrpcServices", "RefreshDelay" }, null, new[]{ typeof(global::Envoy.Api.V2.Core.ApiConfigSource.Types.ApiType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.Core.AggregatedConfigSource), global::Envoy.Api.V2.Core.AggregatedConfigSource.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.Core.ConfigSource), global::Envoy.Api.V2.Core.ConfigSource.Parser, new[]{ "Path", "ApiConfigSource", "Ads" }, new[]{ "ConfigSourceSpecifier" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// API configuration source. This identifies the API type and cluster that Envoy
  /// will use to fetch an xDS API.
  /// </summary>
  public sealed partial class ApiConfigSource : pb::IMessage<ApiConfigSource> {
    private static readonly pb::MessageParser<ApiConfigSource> _parser = new pb::MessageParser<ApiConfigSource>(() => new ApiConfigSource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApiConfigSource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V2.Core.ConfigSourceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiConfigSource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiConfigSource(ApiConfigSource other) : this() {
      apiType_ = other.apiType_;
      clusterNames_ = other.clusterNames_.Clone();
      grpcServices_ = other.grpcServices_.Clone();
      RefreshDelay = other.refreshDelay_ != null ? other.RefreshDelay.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiConfigSource Clone() {
      return new ApiConfigSource(this);
    }

    /// <summary>Field number for the "api_type" field.</summary>
    public const int ApiTypeFieldNumber = 1;
    private global::Envoy.Api.V2.Core.ApiConfigSource.Types.ApiType apiType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.ApiConfigSource.Types.ApiType ApiType {
      get { return apiType_; }
      set {
        apiType_ = value;
      }
    }

    /// <summary>Field number for the "cluster_names" field.</summary>
    public const int ClusterNamesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_clusterNames_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> clusterNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Multiple cluster names may be provided for REST_LEGACY/REST. If > 1
    /// cluster is defined, clusters will be cycled through if any kind of failure
    /// occurs.
    ///
    /// .. note::
    ///
    ///  The cluster with name ``cluster_name`` must be statically defined and its
    ///  type must not be ``EDS``.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ClusterNames {
      get { return clusterNames_; }
    }

    /// <summary>Field number for the "grpc_services" field.</summary>
    public const int GrpcServicesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Envoy.Api.V2.Core.GrpcService> _repeated_grpcServices_codec
        = pb::FieldCodec.ForMessage(34, global::Envoy.Api.V2.Core.GrpcService.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Api.V2.Core.GrpcService> grpcServices_ = new pbc::RepeatedField<global::Envoy.Api.V2.Core.GrpcService>();
    /// <summary>
    /// Multiple gRPC services be provided for GRPC. If > 1 cluster is defined,
    /// services will be cycled through if any kind of failure occurs.
    ///
    /// .. note::
    ///
    ///  If a gRPC service points to a ``cluster_name``, it must be statically
    ///  defined and its type must not be ``EDS``.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Envoy.Api.V2.Core.GrpcService> GrpcServices {
      get { return grpcServices_; }
    }

    /// <summary>Field number for the "refresh_delay" field.</summary>
    public const int RefreshDelayFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Duration refreshDelay_;
    /// <summary>
    /// For REST APIs, the delay between successive polls.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration RefreshDelay {
      get { return refreshDelay_; }
      set {
        refreshDelay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApiConfigSource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApiConfigSource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ApiType != other.ApiType) return false;
      if(!clusterNames_.Equals(other.clusterNames_)) return false;
      if(!grpcServices_.Equals(other.grpcServices_)) return false;
      if (!object.Equals(RefreshDelay, other.RefreshDelay)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ApiType != 0) hash ^= ApiType.GetHashCode();
      hash ^= clusterNames_.GetHashCode();
      hash ^= grpcServices_.GetHashCode();
      if (refreshDelay_ != null) hash ^= RefreshDelay.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ApiType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ApiType);
      }
      clusterNames_.WriteTo(output, _repeated_clusterNames_codec);
      if (refreshDelay_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RefreshDelay);
      }
      grpcServices_.WriteTo(output, _repeated_grpcServices_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ApiType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ApiType);
      }
      size += clusterNames_.CalculateSize(_repeated_clusterNames_codec);
      size += grpcServices_.CalculateSize(_repeated_grpcServices_codec);
      if (refreshDelay_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RefreshDelay);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApiConfigSource other) {
      if (other == null) {
        return;
      }
      if (other.ApiType != 0) {
        ApiType = other.ApiType;
      }
      clusterNames_.Add(other.clusterNames_);
      grpcServices_.Add(other.grpcServices_);
      if (other.refreshDelay_ != null) {
        if (refreshDelay_ == null) {
          refreshDelay_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        RefreshDelay.MergeFrom(other.RefreshDelay);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            apiType_ = (global::Envoy.Api.V2.Core.ApiConfigSource.Types.ApiType) input.ReadEnum();
            break;
          }
          case 18: {
            clusterNames_.AddEntriesFrom(input, _repeated_clusterNames_codec);
            break;
          }
          case 26: {
            if (refreshDelay_ == null) {
              refreshDelay_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(refreshDelay_);
            break;
          }
          case 34: {
            grpcServices_.AddEntriesFrom(input, _repeated_grpcServices_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ApiConfigSource message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// APIs may be fetched via either REST or gRPC.
      /// </summary>
      public enum ApiType {
        /// <summary>
        /// REST-JSON legacy corresponds to the v1 API.
        /// </summary>
        [pbr::OriginalName("REST_LEGACY")] RestLegacy = 0,
        /// <summary>
        /// REST-JSON v2 API. The `canonical JSON encoding
        /// &lt;https://developers.google.com/protocol-buffers/docs/proto3#json>`_ for
        /// the v2 protos is used.
        /// </summary>
        [pbr::OriginalName("REST")] Rest = 1,
        /// <summary>
        /// gRPC v2 API.
        /// </summary>
        [pbr::OriginalName("GRPC")] Grpc = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Aggregated Discovery Service (ADS) options. This is currently empty, but when
  /// set in :ref:`ConfigSource &lt;envoy_api_msg_core.ConfigSource>` can be used to
  /// specify that ADS is to be used.
  /// </summary>
  public sealed partial class AggregatedConfigSource : pb::IMessage<AggregatedConfigSource> {
    private static readonly pb::MessageParser<AggregatedConfigSource> _parser = new pb::MessageParser<AggregatedConfigSource>(() => new AggregatedConfigSource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AggregatedConfigSource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V2.Core.ConfigSourceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AggregatedConfigSource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AggregatedConfigSource(AggregatedConfigSource other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AggregatedConfigSource Clone() {
      return new AggregatedConfigSource(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AggregatedConfigSource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AggregatedConfigSource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AggregatedConfigSource other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Configuration for :ref:`listeners &lt;config_listeners>`, :ref:`clusters
  /// &lt;config_cluster_manager_cluster>`, :ref:`routes
  /// &lt;config_http_conn_man_route_table>`, :ref:`endpoints
  /// &lt;arch_overview_service_discovery>` etc. may either be sourced from the
  /// filesystem or from an xDS API source. Filesystem configs are watched with
  /// inotify for updates.
  /// </summary>
  public sealed partial class ConfigSource : pb::IMessage<ConfigSource> {
    private static readonly pb::MessageParser<ConfigSource> _parser = new pb::MessageParser<ConfigSource>(() => new ConfigSource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigSource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V2.Core.ConfigSourceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigSource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigSource(ConfigSource other) : this() {
      switch (other.ConfigSourceSpecifierCase) {
        case ConfigSourceSpecifierOneofCase.Path:
          Path = other.Path;
          break;
        case ConfigSourceSpecifierOneofCase.ApiConfigSource:
          ApiConfigSource = other.ApiConfigSource.Clone();
          break;
        case ConfigSourceSpecifierOneofCase.Ads:
          Ads = other.Ads.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigSource Clone() {
      return new ConfigSource(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    /// <summary>
    /// Path on the filesystem to source and watch for configuration updates.
    ///
    /// .. note::
    ///
    ///  The path to the source must exist at config load time.
    ///
    /// .. note::
    ///
    ///   Envoy will only watch the file path for *moves.* This is because in general only moves
    ///   are atomic. The same method of swapping files as is demonstrated in the
    ///   :ref:`runtime documentation &lt;config_runtime_symbolic_link_swap>` can be used here also.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return configSourceSpecifierCase_ == ConfigSourceSpecifierOneofCase.Path ? (string) configSourceSpecifier_ : ""; }
      set {
        configSourceSpecifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        configSourceSpecifierCase_ = ConfigSourceSpecifierOneofCase.Path;
      }
    }

    /// <summary>Field number for the "api_config_source" field.</summary>
    public const int ApiConfigSourceFieldNumber = 2;
    /// <summary>
    /// API configuration source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.ApiConfigSource ApiConfigSource {
      get { return configSourceSpecifierCase_ == ConfigSourceSpecifierOneofCase.ApiConfigSource ? (global::Envoy.Api.V2.Core.ApiConfigSource) configSourceSpecifier_ : null; }
      set {
        configSourceSpecifier_ = value;
        configSourceSpecifierCase_ = value == null ? ConfigSourceSpecifierOneofCase.None : ConfigSourceSpecifierOneofCase.ApiConfigSource;
      }
    }

    /// <summary>Field number for the "ads" field.</summary>
    public const int AdsFieldNumber = 3;
    /// <summary>
    /// When set, ADS will be used to fetch resources. The ADS API configuration
    /// source in the bootstrap configuration is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.AggregatedConfigSource Ads {
      get { return configSourceSpecifierCase_ == ConfigSourceSpecifierOneofCase.Ads ? (global::Envoy.Api.V2.Core.AggregatedConfigSource) configSourceSpecifier_ : null; }
      set {
        configSourceSpecifier_ = value;
        configSourceSpecifierCase_ = value == null ? ConfigSourceSpecifierOneofCase.None : ConfigSourceSpecifierOneofCase.Ads;
      }
    }

    private object configSourceSpecifier_;
    /// <summary>Enum of possible cases for the "config_source_specifier" oneof.</summary>
    public enum ConfigSourceSpecifierOneofCase {
      None = 0,
      Path = 1,
      ApiConfigSource = 2,
      Ads = 3,
    }
    private ConfigSourceSpecifierOneofCase configSourceSpecifierCase_ = ConfigSourceSpecifierOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigSourceSpecifierOneofCase ConfigSourceSpecifierCase {
      get { return configSourceSpecifierCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConfigSourceSpecifier() {
      configSourceSpecifierCase_ = ConfigSourceSpecifierOneofCase.None;
      configSourceSpecifier_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigSource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigSource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Path != other.Path) return false;
      if (!object.Equals(ApiConfigSource, other.ApiConfigSource)) return false;
      if (!object.Equals(Ads, other.Ads)) return false;
      if (ConfigSourceSpecifierCase != other.ConfigSourceSpecifierCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (configSourceSpecifierCase_ == ConfigSourceSpecifierOneofCase.Path) hash ^= Path.GetHashCode();
      if (configSourceSpecifierCase_ == ConfigSourceSpecifierOneofCase.ApiConfigSource) hash ^= ApiConfigSource.GetHashCode();
      if (configSourceSpecifierCase_ == ConfigSourceSpecifierOneofCase.Ads) hash ^= Ads.GetHashCode();
      hash ^= (int) configSourceSpecifierCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (configSourceSpecifierCase_ == ConfigSourceSpecifierOneofCase.Path) {
        output.WriteRawTag(10);
        output.WriteString(Path);
      }
      if (configSourceSpecifierCase_ == ConfigSourceSpecifierOneofCase.ApiConfigSource) {
        output.WriteRawTag(18);
        output.WriteMessage(ApiConfigSource);
      }
      if (configSourceSpecifierCase_ == ConfigSourceSpecifierOneofCase.Ads) {
        output.WriteRawTag(26);
        output.WriteMessage(Ads);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (configSourceSpecifierCase_ == ConfigSourceSpecifierOneofCase.Path) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (configSourceSpecifierCase_ == ConfigSourceSpecifierOneofCase.ApiConfigSource) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApiConfigSource);
      }
      if (configSourceSpecifierCase_ == ConfigSourceSpecifierOneofCase.Ads) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ads);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigSource other) {
      if (other == null) {
        return;
      }
      switch (other.ConfigSourceSpecifierCase) {
        case ConfigSourceSpecifierOneofCase.Path:
          Path = other.Path;
          break;
        case ConfigSourceSpecifierOneofCase.ApiConfigSource:
          if (ApiConfigSource == null) {
            ApiConfigSource = new global::Envoy.Api.V2.Core.ApiConfigSource();
          }
          ApiConfigSource.MergeFrom(other.ApiConfigSource);
          break;
        case ConfigSourceSpecifierOneofCase.Ads:
          if (Ads == null) {
            Ads = new global::Envoy.Api.V2.Core.AggregatedConfigSource();
          }
          Ads.MergeFrom(other.Ads);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Path = input.ReadString();
            break;
          }
          case 18: {
            global::Envoy.Api.V2.Core.ApiConfigSource subBuilder = new global::Envoy.Api.V2.Core.ApiConfigSource();
            if (configSourceSpecifierCase_ == ConfigSourceSpecifierOneofCase.ApiConfigSource) {
              subBuilder.MergeFrom(ApiConfigSource);
            }
            input.ReadMessage(subBuilder);
            ApiConfigSource = subBuilder;
            break;
          }
          case 26: {
            global::Envoy.Api.V2.Core.AggregatedConfigSource subBuilder = new global::Envoy.Api.V2.Core.AggregatedConfigSource();
            if (configSourceSpecifierCase_ == ConfigSourceSpecifierOneofCase.Ads) {
              subBuilder.MergeFrom(Ads);
            }
            input.ReadMessage(subBuilder);
            Ads = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
