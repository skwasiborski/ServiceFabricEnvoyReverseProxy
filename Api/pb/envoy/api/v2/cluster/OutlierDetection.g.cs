// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/api/v2/cluster/outlier_detection.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Api.V2.ClusterNS {

  /// <summary>Holder for reflection information generated from envoy/api/v2/cluster/outlier_detection.proto</summary>
  public static partial class OutlierDetectionReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/api/v2/cluster/outlier_detection.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OutlierDetectionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CixlbnZveS9hcGkvdjIvY2x1c3Rlci9vdXRsaWVyX2RldGVjdGlvbi5wcm90",
            "bxIUZW52b3kuYXBpLnYyLmNsdXN0ZXIaHmdvb2dsZS9wcm90b2J1Zi9kdXJh",
            "dGlvbi5wcm90bxoeZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvGhd2",
            "YWxpZGF0ZS92YWxpZGF0ZS5wcm90bxoUZ29nb3Byb3RvL2dvZ28ucHJvdG8i",
            "ggYKEE91dGxpZXJEZXRlY3Rpb24SNQoPY29uc2VjdXRpdmVfNXh4GAEgASgL",
            "MhwuZ29vZ2xlLnByb3RvYnVmLlVJbnQzMlZhbHVlEjcKCGludGVydmFsGAIg",
            "ASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uQgq66cADBaoBAioAEkEK",
            "EmJhc2VfZWplY3Rpb25fdGltZRgDIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5E",
            "dXJhdGlvbkIKuunAAwWqAQIqABJFChRtYXhfZWplY3Rpb25fcGVyY2VudBgE",
            "IAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5VSW50MzJWYWx1ZUIJuunAAwQqAhhk",
            "EkoKGWVuZm9yY2luZ19jb25zZWN1dGl2ZV81eHgYBSABKAsyHC5nb29nbGUu",
            "cHJvdG9idWYuVUludDMyVmFsdWVCCbrpwAMEKgIYZBJHChZlbmZvcmNpbmdf",
            "c3VjY2Vzc19yYXRlGAYgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlVJbnQzMlZh",
            "bHVlQgm66cADBCoCGGQSQAoac3VjY2Vzc19yYXRlX21pbmltdW1faG9zdHMY",
            "ByABKAsyHC5nb29nbGUucHJvdG9idWYuVUludDMyVmFsdWUSQQobc3VjY2Vz",
            "c19yYXRlX3JlcXVlc3Rfdm9sdW1lGAggASgLMhwuZ29vZ2xlLnByb3RvYnVm",
            "LlVJbnQzMlZhbHVlEj8KGXN1Y2Nlc3NfcmF0ZV9zdGRldl9mYWN0b3IYCSAB",
            "KAsyHC5nb29nbGUucHJvdG9idWYuVUludDMyVmFsdWUSQQobY29uc2VjdXRp",
            "dmVfZ2F0ZXdheV9mYWlsdXJlGAogASgLMhwuZ29vZ2xlLnByb3RvYnVmLlVJ",
            "bnQzMlZhbHVlElYKJWVuZm9yY2luZ19jb25zZWN1dGl2ZV9nYXRld2F5X2Zh",
            "aWx1cmUYCyABKAsyHC5nb29nbGUucHJvdG9idWYuVUludDMyVmFsdWVCCbrp",
            "wAMEKgIYZEIdqgIWRW52b3kuQXBpLlYyLkNsdXN0ZXJOU6jiHgFiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, global::Gogoproto.GogoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.ClusterNS.OutlierDetection), global::Envoy.Api.V2.ClusterNS.OutlierDetection.Parser, new[]{ "Consecutive5Xx", "Interval", "BaseEjectionTime", "MaxEjectionPercent", "EnforcingConsecutive5Xx", "EnforcingSuccessRate", "SuccessRateMinimumHosts", "SuccessRateRequestVolume", "SuccessRateStdevFactor", "ConsecutiveGatewayFailure", "EnforcingConsecutiveGatewayFailure" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// See the :ref:`architecture overview &lt;arch_overview_outlier_detection>` for
  /// more information on outlier detection.
  /// </summary>
  public sealed partial class OutlierDetection : pb::IMessage<OutlierDetection> {
    private static readonly pb::MessageParser<OutlierDetection> _parser = new pb::MessageParser<OutlierDetection>(() => new OutlierDetection());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OutlierDetection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V2.ClusterNS.OutlierDetectionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutlierDetection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutlierDetection(OutlierDetection other) : this() {
      Consecutive5Xx = other.Consecutive5Xx;
      Interval = other.interval_ != null ? other.Interval.Clone() : null;
      BaseEjectionTime = other.baseEjectionTime_ != null ? other.BaseEjectionTime.Clone() : null;
      MaxEjectionPercent = other.MaxEjectionPercent;
      EnforcingConsecutive5Xx = other.EnforcingConsecutive5Xx;
      EnforcingSuccessRate = other.EnforcingSuccessRate;
      SuccessRateMinimumHosts = other.SuccessRateMinimumHosts;
      SuccessRateRequestVolume = other.SuccessRateRequestVolume;
      SuccessRateStdevFactor = other.SuccessRateStdevFactor;
      ConsecutiveGatewayFailure = other.ConsecutiveGatewayFailure;
      EnforcingConsecutiveGatewayFailure = other.EnforcingConsecutiveGatewayFailure;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutlierDetection Clone() {
      return new OutlierDetection(this);
    }

    /// <summary>Field number for the "consecutive_5xx" field.</summary>
    public const int Consecutive5XxFieldNumber = 1;
    private static readonly pb::FieldCodec<uint?> _single_consecutive5Xx_codec = pb::FieldCodec.ForStructWrapper<uint>(10);
    private uint? consecutive5Xx_;
    /// <summary>
    /// The number of consecutive 5xx responses before a consecutive 5xx ejection
    /// occurs. Defaults to 5.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? Consecutive5Xx {
      get { return consecutive5Xx_; }
      set {
        consecutive5Xx_ = value;
      }
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Duration interval_;
    /// <summary>
    /// The time interval between ejection analysis sweeps. This can result in
    /// both new ejections as well as hosts being returned to service. Defaults
    /// to 10000ms or 10s.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration Interval {
      get { return interval_; }
      set {
        interval_ = value;
      }
    }

    /// <summary>Field number for the "base_ejection_time" field.</summary>
    public const int BaseEjectionTimeFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Duration baseEjectionTime_;
    /// <summary>
    /// The base time that a host is ejected for. The real time is equal to the
    /// base time multiplied by the number of times the host has been ejected.
    /// Defaults to 30000ms or 30s.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration BaseEjectionTime {
      get { return baseEjectionTime_; }
      set {
        baseEjectionTime_ = value;
      }
    }

    /// <summary>Field number for the "max_ejection_percent" field.</summary>
    public const int MaxEjectionPercentFieldNumber = 4;
    private static readonly pb::FieldCodec<uint?> _single_maxEjectionPercent_codec = pb::FieldCodec.ForStructWrapper<uint>(34);
    private uint? maxEjectionPercent_;
    /// <summary>
    /// The maximum % of an upstream cluster that can be ejected due to outlier
    /// detection. Defaults to 10% but will eject at least one host regardless of the value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? MaxEjectionPercent {
      get { return maxEjectionPercent_; }
      set {
        maxEjectionPercent_ = value;
      }
    }

    /// <summary>Field number for the "enforcing_consecutive_5xx" field.</summary>
    public const int EnforcingConsecutive5XxFieldNumber = 5;
    private static readonly pb::FieldCodec<uint?> _single_enforcingConsecutive5Xx_codec = pb::FieldCodec.ForStructWrapper<uint>(42);
    private uint? enforcingConsecutive5Xx_;
    /// <summary>
    /// The % chance that a host will be actually ejected when an outlier status
    /// is detected through consecutive 5xx. This setting can be used to disable
    /// ejection or to ramp it up slowly. Defaults to 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? EnforcingConsecutive5Xx {
      get { return enforcingConsecutive5Xx_; }
      set {
        enforcingConsecutive5Xx_ = value;
      }
    }

    /// <summary>Field number for the "enforcing_success_rate" field.</summary>
    public const int EnforcingSuccessRateFieldNumber = 6;
    private static readonly pb::FieldCodec<uint?> _single_enforcingSuccessRate_codec = pb::FieldCodec.ForStructWrapper<uint>(50);
    private uint? enforcingSuccessRate_;
    /// <summary>
    /// The % chance that a host will be actually ejected when an outlier status
    /// is detected through success rate statistics. This setting can be used to
    /// disable ejection or to ramp it up slowly. Defaults to 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? EnforcingSuccessRate {
      get { return enforcingSuccessRate_; }
      set {
        enforcingSuccessRate_ = value;
      }
    }

    /// <summary>Field number for the "success_rate_minimum_hosts" field.</summary>
    public const int SuccessRateMinimumHostsFieldNumber = 7;
    private static readonly pb::FieldCodec<uint?> _single_successRateMinimumHosts_codec = pb::FieldCodec.ForStructWrapper<uint>(58);
    private uint? successRateMinimumHosts_;
    /// <summary>
    /// The number of hosts in a cluster that must have enough request volume to
    /// detect success rate outliers. If the number of hosts is less than this
    /// setting, outlier detection via success rate statistics is not performed
    /// for any host in the cluster. Defaults to 5.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? SuccessRateMinimumHosts {
      get { return successRateMinimumHosts_; }
      set {
        successRateMinimumHosts_ = value;
      }
    }

    /// <summary>Field number for the "success_rate_request_volume" field.</summary>
    public const int SuccessRateRequestVolumeFieldNumber = 8;
    private static readonly pb::FieldCodec<uint?> _single_successRateRequestVolume_codec = pb::FieldCodec.ForStructWrapper<uint>(66);
    private uint? successRateRequestVolume_;
    /// <summary>
    /// The minimum number of total requests that must be collected in one
    /// interval (as defined by the interval duration above) to include this host
    /// in success rate based outlier detection. If the volume is lower than this
    /// setting, outlier detection via success rate statistics is not performed
    /// for that host. Defaults to 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? SuccessRateRequestVolume {
      get { return successRateRequestVolume_; }
      set {
        successRateRequestVolume_ = value;
      }
    }

    /// <summary>Field number for the "success_rate_stdev_factor" field.</summary>
    public const int SuccessRateStdevFactorFieldNumber = 9;
    private static readonly pb::FieldCodec<uint?> _single_successRateStdevFactor_codec = pb::FieldCodec.ForStructWrapper<uint>(74);
    private uint? successRateStdevFactor_;
    /// <summary>
    /// This factor is used to determine the ejection threshold for success rate
    /// outlier ejection. The ejection threshold is the difference between the
    /// mean success rate, and the product of this factor and the standard
    /// deviation of the mean success rate: mean - (stdev *
    /// success_rate_stdev_factor). This factor is divided by a thousand to get a
    /// double. That is, if the desired factor is 1.9, the runtime value should
    /// be 1900. Defaults to 1900.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? SuccessRateStdevFactor {
      get { return successRateStdevFactor_; }
      set {
        successRateStdevFactor_ = value;
      }
    }

    /// <summary>Field number for the "consecutive_gateway_failure" field.</summary>
    public const int ConsecutiveGatewayFailureFieldNumber = 10;
    private static readonly pb::FieldCodec<uint?> _single_consecutiveGatewayFailure_codec = pb::FieldCodec.ForStructWrapper<uint>(82);
    private uint? consecutiveGatewayFailure_;
    /// <summary>
    /// The number of consecutive gateway failures (502, 503, 504 status or
    /// connection errors that are mapped to one of those status codes) before a
    /// consecutive gateway failure ejection occurs. Defaults to 5.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? ConsecutiveGatewayFailure {
      get { return consecutiveGatewayFailure_; }
      set {
        consecutiveGatewayFailure_ = value;
      }
    }

    /// <summary>Field number for the "enforcing_consecutive_gateway_failure" field.</summary>
    public const int EnforcingConsecutiveGatewayFailureFieldNumber = 11;
    private static readonly pb::FieldCodec<uint?> _single_enforcingConsecutiveGatewayFailure_codec = pb::FieldCodec.ForStructWrapper<uint>(90);
    private uint? enforcingConsecutiveGatewayFailure_;
    /// <summary>
    /// The % chance that a host will be actually ejected when an outlier status
    /// is detected through consecutive gateway failures. This setting can be
    /// used to disable ejection or to ramp it up slowly. Defaults to 0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? EnforcingConsecutiveGatewayFailure {
      get { return enforcingConsecutiveGatewayFailure_; }
      set {
        enforcingConsecutiveGatewayFailure_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OutlierDetection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OutlierDetection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Consecutive5Xx != other.Consecutive5Xx) return false;
      if (!object.Equals(Interval, other.Interval)) return false;
      if (!object.Equals(BaseEjectionTime, other.BaseEjectionTime)) return false;
      if (MaxEjectionPercent != other.MaxEjectionPercent) return false;
      if (EnforcingConsecutive5Xx != other.EnforcingConsecutive5Xx) return false;
      if (EnforcingSuccessRate != other.EnforcingSuccessRate) return false;
      if (SuccessRateMinimumHosts != other.SuccessRateMinimumHosts) return false;
      if (SuccessRateRequestVolume != other.SuccessRateRequestVolume) return false;
      if (SuccessRateStdevFactor != other.SuccessRateStdevFactor) return false;
      if (ConsecutiveGatewayFailure != other.ConsecutiveGatewayFailure) return false;
      if (EnforcingConsecutiveGatewayFailure != other.EnforcingConsecutiveGatewayFailure) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (consecutive5Xx_ != null) hash ^= Consecutive5Xx.GetHashCode();
      if (interval_ != null) hash ^= Interval.GetHashCode();
      if (baseEjectionTime_ != null) hash ^= BaseEjectionTime.GetHashCode();
      if (maxEjectionPercent_ != null) hash ^= MaxEjectionPercent.GetHashCode();
      if (enforcingConsecutive5Xx_ != null) hash ^= EnforcingConsecutive5Xx.GetHashCode();
      if (enforcingSuccessRate_ != null) hash ^= EnforcingSuccessRate.GetHashCode();
      if (successRateMinimumHosts_ != null) hash ^= SuccessRateMinimumHosts.GetHashCode();
      if (successRateRequestVolume_ != null) hash ^= SuccessRateRequestVolume.GetHashCode();
      if (successRateStdevFactor_ != null) hash ^= SuccessRateStdevFactor.GetHashCode();
      if (consecutiveGatewayFailure_ != null) hash ^= ConsecutiveGatewayFailure.GetHashCode();
      if (enforcingConsecutiveGatewayFailure_ != null) hash ^= EnforcingConsecutiveGatewayFailure.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (consecutive5Xx_ != null) {
        _single_consecutive5Xx_codec.WriteTagAndValue(output, Consecutive5Xx);
      }
      if (interval_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Interval);
      }
      if (baseEjectionTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BaseEjectionTime);
      }
      if (maxEjectionPercent_ != null) {
        _single_maxEjectionPercent_codec.WriteTagAndValue(output, MaxEjectionPercent);
      }
      if (enforcingConsecutive5Xx_ != null) {
        _single_enforcingConsecutive5Xx_codec.WriteTagAndValue(output, EnforcingConsecutive5Xx);
      }
      if (enforcingSuccessRate_ != null) {
        _single_enforcingSuccessRate_codec.WriteTagAndValue(output, EnforcingSuccessRate);
      }
      if (successRateMinimumHosts_ != null) {
        _single_successRateMinimumHosts_codec.WriteTagAndValue(output, SuccessRateMinimumHosts);
      }
      if (successRateRequestVolume_ != null) {
        _single_successRateRequestVolume_codec.WriteTagAndValue(output, SuccessRateRequestVolume);
      }
      if (successRateStdevFactor_ != null) {
        _single_successRateStdevFactor_codec.WriteTagAndValue(output, SuccessRateStdevFactor);
      }
      if (consecutiveGatewayFailure_ != null) {
        _single_consecutiveGatewayFailure_codec.WriteTagAndValue(output, ConsecutiveGatewayFailure);
      }
      if (enforcingConsecutiveGatewayFailure_ != null) {
        _single_enforcingConsecutiveGatewayFailure_codec.WriteTagAndValue(output, EnforcingConsecutiveGatewayFailure);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (consecutive5Xx_ != null) {
        size += _single_consecutive5Xx_codec.CalculateSizeWithTag(Consecutive5Xx);
      }
      if (interval_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Interval);
      }
      if (baseEjectionTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseEjectionTime);
      }
      if (maxEjectionPercent_ != null) {
        size += _single_maxEjectionPercent_codec.CalculateSizeWithTag(MaxEjectionPercent);
      }
      if (enforcingConsecutive5Xx_ != null) {
        size += _single_enforcingConsecutive5Xx_codec.CalculateSizeWithTag(EnforcingConsecutive5Xx);
      }
      if (enforcingSuccessRate_ != null) {
        size += _single_enforcingSuccessRate_codec.CalculateSizeWithTag(EnforcingSuccessRate);
      }
      if (successRateMinimumHosts_ != null) {
        size += _single_successRateMinimumHosts_codec.CalculateSizeWithTag(SuccessRateMinimumHosts);
      }
      if (successRateRequestVolume_ != null) {
        size += _single_successRateRequestVolume_codec.CalculateSizeWithTag(SuccessRateRequestVolume);
      }
      if (successRateStdevFactor_ != null) {
        size += _single_successRateStdevFactor_codec.CalculateSizeWithTag(SuccessRateStdevFactor);
      }
      if (consecutiveGatewayFailure_ != null) {
        size += _single_consecutiveGatewayFailure_codec.CalculateSizeWithTag(ConsecutiveGatewayFailure);
      }
      if (enforcingConsecutiveGatewayFailure_ != null) {
        size += _single_enforcingConsecutiveGatewayFailure_codec.CalculateSizeWithTag(EnforcingConsecutiveGatewayFailure);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OutlierDetection other) {
      if (other == null) {
        return;
      }
      if (other.consecutive5Xx_ != null) {
        if (consecutive5Xx_ == null || other.Consecutive5Xx != 0) {
          Consecutive5Xx = other.Consecutive5Xx;
        }
      }
      if (other.interval_ != null) {
        if (interval_ == null) {
          interval_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        Interval.MergeFrom(other.Interval);
      }
      if (other.baseEjectionTime_ != null) {
        if (baseEjectionTime_ == null) {
          baseEjectionTime_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        BaseEjectionTime.MergeFrom(other.BaseEjectionTime);
      }
      if (other.maxEjectionPercent_ != null) {
        if (maxEjectionPercent_ == null || other.MaxEjectionPercent != 0) {
          MaxEjectionPercent = other.MaxEjectionPercent;
        }
      }
      if (other.enforcingConsecutive5Xx_ != null) {
        if (enforcingConsecutive5Xx_ == null || other.EnforcingConsecutive5Xx != 0) {
          EnforcingConsecutive5Xx = other.EnforcingConsecutive5Xx;
        }
      }
      if (other.enforcingSuccessRate_ != null) {
        if (enforcingSuccessRate_ == null || other.EnforcingSuccessRate != 0) {
          EnforcingSuccessRate = other.EnforcingSuccessRate;
        }
      }
      if (other.successRateMinimumHosts_ != null) {
        if (successRateMinimumHosts_ == null || other.SuccessRateMinimumHosts != 0) {
          SuccessRateMinimumHosts = other.SuccessRateMinimumHosts;
        }
      }
      if (other.successRateRequestVolume_ != null) {
        if (successRateRequestVolume_ == null || other.SuccessRateRequestVolume != 0) {
          SuccessRateRequestVolume = other.SuccessRateRequestVolume;
        }
      }
      if (other.successRateStdevFactor_ != null) {
        if (successRateStdevFactor_ == null || other.SuccessRateStdevFactor != 0) {
          SuccessRateStdevFactor = other.SuccessRateStdevFactor;
        }
      }
      if (other.consecutiveGatewayFailure_ != null) {
        if (consecutiveGatewayFailure_ == null || other.ConsecutiveGatewayFailure != 0) {
          ConsecutiveGatewayFailure = other.ConsecutiveGatewayFailure;
        }
      }
      if (other.enforcingConsecutiveGatewayFailure_ != null) {
        if (enforcingConsecutiveGatewayFailure_ == null || other.EnforcingConsecutiveGatewayFailure != 0) {
          EnforcingConsecutiveGatewayFailure = other.EnforcingConsecutiveGatewayFailure;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            uint? value = _single_consecutive5Xx_codec.Read(input);
            if (consecutive5Xx_ == null || value != 0) {
              Consecutive5Xx = value;
            }
            break;
          }
          case 18: {
            if (interval_ == null) {
              interval_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(interval_);
            break;
          }
          case 26: {
            if (baseEjectionTime_ == null) {
              baseEjectionTime_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(baseEjectionTime_);
            break;
          }
          case 34: {
            uint? value = _single_maxEjectionPercent_codec.Read(input);
            if (maxEjectionPercent_ == null || value != 0) {
              MaxEjectionPercent = value;
            }
            break;
          }
          case 42: {
            uint? value = _single_enforcingConsecutive5Xx_codec.Read(input);
            if (enforcingConsecutive5Xx_ == null || value != 0) {
              EnforcingConsecutive5Xx = value;
            }
            break;
          }
          case 50: {
            uint? value = _single_enforcingSuccessRate_codec.Read(input);
            if (enforcingSuccessRate_ == null || value != 0) {
              EnforcingSuccessRate = value;
            }
            break;
          }
          case 58: {
            uint? value = _single_successRateMinimumHosts_codec.Read(input);
            if (successRateMinimumHosts_ == null || value != 0) {
              SuccessRateMinimumHosts = value;
            }
            break;
          }
          case 66: {
            uint? value = _single_successRateRequestVolume_codec.Read(input);
            if (successRateRequestVolume_ == null || value != 0) {
              SuccessRateRequestVolume = value;
            }
            break;
          }
          case 74: {
            uint? value = _single_successRateStdevFactor_codec.Read(input);
            if (successRateStdevFactor_ == null || value != 0) {
              SuccessRateStdevFactor = value;
            }
            break;
          }
          case 82: {
            uint? value = _single_consecutiveGatewayFailure_codec.Read(input);
            if (consecutiveGatewayFailure_ == null || value != 0) {
              ConsecutiveGatewayFailure = value;
            }
            break;
          }
          case 90: {
            uint? value = _single_enforcingConsecutiveGatewayFailure_codec.Read(input);
            if (enforcingConsecutiveGatewayFailure_ == null || value != 0) {
              EnforcingConsecutiveGatewayFailure = value;
            }
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
