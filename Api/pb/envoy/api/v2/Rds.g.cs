// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/api/v2/rds.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Api.V2 {

  /// <summary>Holder for reflection information generated from envoy/api/v2/rds.proto</summary>
  public static partial class RdsReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/api/v2/rds.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RdsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZlbnZveS9hcGkvdjIvcmRzLnByb3RvEgxlbnZveS5hcGkudjIaHGVudm95",
            "L2FwaS92Mi9jb3JlL2Jhc2UucHJvdG8aHGVudm95L2FwaS92Mi9kaXNjb3Zl",
            "cnkucHJvdG8aHmVudm95L2FwaS92Mi9yb3V0ZS9yb3V0ZS5wcm90bxocZ29v",
            "Z2xlL2FwaS9hbm5vdGF0aW9ucy5wcm90bxoeZ29vZ2xlL3Byb3RvYnVmL3dy",
            "YXBwZXJzLnByb3RvGhRnb2dvcHJvdG8vZ29nby5wcm90byLnAgoSUm91dGVD",
            "b25maWd1cmF0aW9uEgwKBG5hbWUYASABKAkSPAoNdmlydHVhbF9ob3N0cxgC",
            "IAMoCzIfLmVudm95LmFwaS52Mi5yb3V0ZS5WaXJ0dWFsSG9zdEIEyN4fABId",
            "ChVpbnRlcm5hbF9vbmx5X2hlYWRlcnMYAyADKAkSRQoXcmVzcG9uc2VfaGVh",
            "ZGVyc190b19hZGQYBCADKAsyJC5lbnZveS5hcGkudjIuY29yZS5IZWFkZXJW",
            "YWx1ZU9wdGlvbhIiChpyZXNwb25zZV9oZWFkZXJzX3RvX3JlbW92ZRgFIAMo",
            "CRJEChZyZXF1ZXN0X2hlYWRlcnNfdG9fYWRkGAYgAygLMiQuZW52b3kuYXBp",
            "LnYyLmNvcmUuSGVhZGVyVmFsdWVPcHRpb24SNQoRdmFsaWRhdGVfY2x1c3Rl",
            "cnMYByABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlMt8BChVSb3V0",
            "ZURpc2NvdmVyeVNlcnZpY2USVQoMU3RyZWFtUm91dGVzEh4uZW52b3kuYXBp",
            "LnYyLkRpc2NvdmVyeVJlcXVlc3QaHy5lbnZveS5hcGkudjIuRGlzY292ZXJ5",
            "UmVzcG9uc2UiACgBMAESbwoLRmV0Y2hSb3V0ZXMSHi5lbnZveS5hcGkudjIu",
            "RGlzY292ZXJ5UmVxdWVzdBofLmVudm95LmFwaS52Mi5EaXNjb3ZlcnlSZXNw",
            "b25zZSIfgtPkkwIZIhQvdjIvZGlzY292ZXJ5OnJvdXRlczoBKkIHiAEBqOIe",
            "AWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Api.V2.Core.BaseReflection.Descriptor, global::Envoy.Api.V2.DiscoveryReflection.Descriptor, global::Envoy.Api.V2.Route.RouteReflection.Descriptor, global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Gogoproto.GogoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.RouteConfiguration), global::Envoy.Api.V2.RouteConfiguration.Parser, new[]{ "Name", "VirtualHosts", "InternalOnlyHeaders", "ResponseHeadersToAdd", "ResponseHeadersToRemove", "RequestHeadersToAdd", "ValidateClusters" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RouteConfiguration : pb::IMessage<RouteConfiguration> {
    private static readonly pb::MessageParser<RouteConfiguration> _parser = new pb::MessageParser<RouteConfiguration>(() => new RouteConfiguration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RouteConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V2.RdsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouteConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouteConfiguration(RouteConfiguration other) : this() {
      name_ = other.name_;
      virtualHosts_ = other.virtualHosts_.Clone();
      internalOnlyHeaders_ = other.internalOnlyHeaders_.Clone();
      responseHeadersToAdd_ = other.responseHeadersToAdd_.Clone();
      responseHeadersToRemove_ = other.responseHeadersToRemove_.Clone();
      requestHeadersToAdd_ = other.requestHeadersToAdd_.Clone();
      ValidateClusters = other.ValidateClusters;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouteConfiguration Clone() {
      return new RouteConfiguration(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the route configuration. For example, it might match
    /// :ref:`route_config_name
    /// &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.Rds.route_config_name>` in
    /// :ref:`envoy_api_msg_config.filter.network.http_connection_manager.v2.Rds`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "virtual_hosts" field.</summary>
    public const int VirtualHostsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Envoy.Api.V2.Route.VirtualHost> _repeated_virtualHosts_codec
        = pb::FieldCodec.ForMessage(18, global::Envoy.Api.V2.Route.VirtualHost.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Api.V2.Route.VirtualHost> virtualHosts_ = new pbc::RepeatedField<global::Envoy.Api.V2.Route.VirtualHost>();
    /// <summary>
    /// An array of virtual hosts that make up the route table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Envoy.Api.V2.Route.VirtualHost> VirtualHosts {
      get { return virtualHosts_; }
    }

    /// <summary>Field number for the "internal_only_headers" field.</summary>
    public const int InternalOnlyHeadersFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_internalOnlyHeaders_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> internalOnlyHeaders_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Optionally specifies a list of HTTP headers that the connection manager
    /// will consider to be internal only. If they are found on external requests they will be cleaned
    /// prior to filter invocation. See :ref:`config_http_conn_man_headers_x-envoy-internal` for more
    /// information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> InternalOnlyHeaders {
      get { return internalOnlyHeaders_; }
    }

    /// <summary>Field number for the "response_headers_to_add" field.</summary>
    public const int ResponseHeadersToAddFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Envoy.Api.V2.Core.HeaderValueOption> _repeated_responseHeadersToAdd_codec
        = pb::FieldCodec.ForMessage(34, global::Envoy.Api.V2.Core.HeaderValueOption.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Api.V2.Core.HeaderValueOption> responseHeadersToAdd_ = new pbc::RepeatedField<global::Envoy.Api.V2.Core.HeaderValueOption>();
    /// <summary>
    /// Specifies a list of HTTP headers that should be added to each response that
    /// the connection manager encodes. Headers specified at this level are applied
    /// after headers from any enclosed :ref:`envoy_api_msg_route.VirtualHost` or
    /// :ref:`envoy_api_msg_route.RouteAction`. For more information, including details on
    /// header value syntax, see the documentation on :ref:`custom request headers
    /// &lt;config_http_conn_man_headers_custom_request_headers>`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Envoy.Api.V2.Core.HeaderValueOption> ResponseHeadersToAdd {
      get { return responseHeadersToAdd_; }
    }

    /// <summary>Field number for the "response_headers_to_remove" field.</summary>
    public const int ResponseHeadersToRemoveFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_responseHeadersToRemove_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> responseHeadersToRemove_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Specifies a list of HTTP headers that should be removed from each response
    /// that the connection manager encodes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ResponseHeadersToRemove {
      get { return responseHeadersToRemove_; }
    }

    /// <summary>Field number for the "request_headers_to_add" field.</summary>
    public const int RequestHeadersToAddFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Envoy.Api.V2.Core.HeaderValueOption> _repeated_requestHeadersToAdd_codec
        = pb::FieldCodec.ForMessage(50, global::Envoy.Api.V2.Core.HeaderValueOption.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Api.V2.Core.HeaderValueOption> requestHeadersToAdd_ = new pbc::RepeatedField<global::Envoy.Api.V2.Core.HeaderValueOption>();
    /// <summary>
    /// Specifies a list of HTTP headers that should be added to each request
    /// routed by the HTTP connection manager. Headers specified at this level are
    /// applied after headers from any enclosed :ref:`envoy_api_msg_route.VirtualHost` or
    /// :ref:`envoy_api_msg_route.RouteAction`. For more information, including details on
    /// header value syntax, see the documentation on :ref:`custom request headers
    /// &lt;config_http_conn_man_headers_custom_request_headers>`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Envoy.Api.V2.Core.HeaderValueOption> RequestHeadersToAdd {
      get { return requestHeadersToAdd_; }
    }

    /// <summary>Field number for the "validate_clusters" field.</summary>
    public const int ValidateClustersFieldNumber = 7;
    private static readonly pb::FieldCodec<bool?> _single_validateClusters_codec = pb::FieldCodec.ForStructWrapper<bool>(58);
    private bool? validateClusters_;
    /// <summary>
    /// An optional boolean that specifies whether the clusters that the route
    /// table refers to will be validated by the cluster manager. If set to true
    /// and a route refers to a non-existent cluster, the route table will not
    /// load. If set to false and a route refers to a non-existent cluster, the
    /// route table will load and the router filter will return a 404 if the route
    /// is selected at runtime. This setting defaults to true if the route table
    /// is statically defined via the :ref:`route_config
    /// &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.route_config>`
    /// option. This setting default to false if the route table is loaded dynamically via the
    /// :ref:`rds
    /// &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.rds>`
    /// option. Users may which to override the default behavior in certain cases (for example when
    /// using CDS with a static route table).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? ValidateClusters {
      get { return validateClusters_; }
      set {
        validateClusters_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RouteConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RouteConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!virtualHosts_.Equals(other.virtualHosts_)) return false;
      if(!internalOnlyHeaders_.Equals(other.internalOnlyHeaders_)) return false;
      if(!responseHeadersToAdd_.Equals(other.responseHeadersToAdd_)) return false;
      if(!responseHeadersToRemove_.Equals(other.responseHeadersToRemove_)) return false;
      if(!requestHeadersToAdd_.Equals(other.requestHeadersToAdd_)) return false;
      if (ValidateClusters != other.ValidateClusters) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= virtualHosts_.GetHashCode();
      hash ^= internalOnlyHeaders_.GetHashCode();
      hash ^= responseHeadersToAdd_.GetHashCode();
      hash ^= responseHeadersToRemove_.GetHashCode();
      hash ^= requestHeadersToAdd_.GetHashCode();
      if (validateClusters_ != null) hash ^= ValidateClusters.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      virtualHosts_.WriteTo(output, _repeated_virtualHosts_codec);
      internalOnlyHeaders_.WriteTo(output, _repeated_internalOnlyHeaders_codec);
      responseHeadersToAdd_.WriteTo(output, _repeated_responseHeadersToAdd_codec);
      responseHeadersToRemove_.WriteTo(output, _repeated_responseHeadersToRemove_codec);
      requestHeadersToAdd_.WriteTo(output, _repeated_requestHeadersToAdd_codec);
      if (validateClusters_ != null) {
        _single_validateClusters_codec.WriteTagAndValue(output, ValidateClusters);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += virtualHosts_.CalculateSize(_repeated_virtualHosts_codec);
      size += internalOnlyHeaders_.CalculateSize(_repeated_internalOnlyHeaders_codec);
      size += responseHeadersToAdd_.CalculateSize(_repeated_responseHeadersToAdd_codec);
      size += responseHeadersToRemove_.CalculateSize(_repeated_responseHeadersToRemove_codec);
      size += requestHeadersToAdd_.CalculateSize(_repeated_requestHeadersToAdd_codec);
      if (validateClusters_ != null) {
        size += _single_validateClusters_codec.CalculateSizeWithTag(ValidateClusters);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RouteConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      virtualHosts_.Add(other.virtualHosts_);
      internalOnlyHeaders_.Add(other.internalOnlyHeaders_);
      responseHeadersToAdd_.Add(other.responseHeadersToAdd_);
      responseHeadersToRemove_.Add(other.responseHeadersToRemove_);
      requestHeadersToAdd_.Add(other.requestHeadersToAdd_);
      if (other.validateClusters_ != null) {
        if (validateClusters_ == null || other.ValidateClusters != false) {
          ValidateClusters = other.ValidateClusters;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            virtualHosts_.AddEntriesFrom(input, _repeated_virtualHosts_codec);
            break;
          }
          case 26: {
            internalOnlyHeaders_.AddEntriesFrom(input, _repeated_internalOnlyHeaders_codec);
            break;
          }
          case 34: {
            responseHeadersToAdd_.AddEntriesFrom(input, _repeated_responseHeadersToAdd_codec);
            break;
          }
          case 42: {
            responseHeadersToRemove_.AddEntriesFrom(input, _repeated_responseHeadersToRemove_codec);
            break;
          }
          case 50: {
            requestHeadersToAdd_.AddEntriesFrom(input, _repeated_requestHeadersToAdd_codec);
            break;
          }
          case 58: {
            bool? value = _single_validateClusters_codec.Read(input);
            if (validateClusters_ == null || value != false) {
              ValidateClusters = value;
            }
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
