// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/service/discovery/v2/hds.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Envoy.Service.Discovery.V2 {
  /// <summary>
  /// [#proto-status: experimental]
  /// HDS is Health Discovery Service. It compliments Envoy’s health checking
  /// service by designating this Envoy to be a healthchecker for a subset of hosts
  /// in the cluster. The status of these health checks will be reported to the
  /// management server, where it can be aggregated etc and redistributed back to
  /// Envoy through EDS.
  /// </summary>
  public static partial class HealthDiscoveryService
  {
    static readonly string __ServiceName = "envoy.service.discovery.v2.HealthDiscoveryService";

    static readonly grpc::Marshaller<global::Envoy.Service.Discovery.V2.HealthCheckRequestOrEndpointHealthResponse> __Marshaller_HealthCheckRequestOrEndpointHealthResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Envoy.Service.Discovery.V2.HealthCheckRequestOrEndpointHealthResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Envoy.Service.Discovery.V2.HealthCheckSpecifier> __Marshaller_HealthCheckSpecifier = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Envoy.Service.Discovery.V2.HealthCheckSpecifier.Parser.ParseFrom);

    static readonly grpc::Method<global::Envoy.Service.Discovery.V2.HealthCheckRequestOrEndpointHealthResponse, global::Envoy.Service.Discovery.V2.HealthCheckSpecifier> __Method_StreamHealthCheck = new grpc::Method<global::Envoy.Service.Discovery.V2.HealthCheckRequestOrEndpointHealthResponse, global::Envoy.Service.Discovery.V2.HealthCheckSpecifier>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "StreamHealthCheck",
        __Marshaller_HealthCheckRequestOrEndpointHealthResponse,
        __Marshaller_HealthCheckSpecifier);

    static readonly grpc::Method<global::Envoy.Service.Discovery.V2.HealthCheckRequestOrEndpointHealthResponse, global::Envoy.Service.Discovery.V2.HealthCheckSpecifier> __Method_FetchHealthCheck = new grpc::Method<global::Envoy.Service.Discovery.V2.HealthCheckRequestOrEndpointHealthResponse, global::Envoy.Service.Discovery.V2.HealthCheckSpecifier>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FetchHealthCheck",
        __Marshaller_HealthCheckRequestOrEndpointHealthResponse,
        __Marshaller_HealthCheckSpecifier);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Envoy.Service.Discovery.V2.HdsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of HealthDiscoveryService</summary>
    public abstract partial class HealthDiscoveryServiceBase
    {
      /// <summary>
      /// 1. Envoy starts up and if its can_healthcheck option in the static
      ///    bootstrap config is enabled, sends HealthCheckRequest to the management
      ///    server. It supplies its capabilities (which protocol it can health check
      ///    with, what zone it resides in, etc.).
      /// 2. In response to (1), the management server designates this Envoy as a
      ///    healthchecker to health check a subset of all upstream hosts for a given
      ///    cluster (for example upstream Host 1 and Host 2). It streams
      ///    HealthCheckSpecifier messages with cluster related configuration for all
      ///    clusters this Envoy is designated to health check. Subsequent
      ///    HealthCheckSpecifier message will be sent on changes to:
      ///    a. Endpoints to health checks
      ///    b. Per cluster configuration change
      /// 3. Envoy creates a health probe based on the HealthCheck config and sends
      ///    it to endpoint(ip:port) of Host 1 and 2. Based on the HealthCheck
      ///    configuration Envoy waits upon the arrival of the probe response and
      ///    looks at the content of the response to decide whether the endpoint is
      ///    healthy or not. If a response hasn’t been received within the timeout
      ///    interval, the endpoint health status is considered TIMEOUT.
      /// 4. Envoy reports results back in an EndpointHealthResponse message.
      ///    Envoy streams responses as often as the interval configured by the
      ///    management server in HealthCheckSpecifier.
      /// 5. The management Server collects health statuses for all endpoints in the
      ///    cluster (for all clusters) and uses this information to construct
      ///    EndpointDiscoveryResponse messages.
      /// 6. Once Envoy has a list of upstream endpoints to send traffic to, it load
      ///    balances traffic to them without additional health checking. It may
      ///    use inline healthcheck (i.e. consider endpoint UNHEALTHY if connection
      ///    failed to a particular endpoint to account for health status propagation
      ///    delay between HDS and EDS).
      /// By default, can_healthcheck is true. If can_healthcheck is false, Cluster
      /// configuration may not contain HealthCheck message.
      /// TODO(htuch): How is can_healthcheck communicated to CDS to ensure the above
      /// invariant?
      /// TODO(htuch): Add @amb67's diagram.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task StreamHealthCheck(grpc::IAsyncStreamReader<global::Envoy.Service.Discovery.V2.HealthCheckRequestOrEndpointHealthResponse> requestStream, grpc::IServerStreamWriter<global::Envoy.Service.Discovery.V2.HealthCheckSpecifier> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// TODO(htuch): Unlike the gRPC version, there is no stream-based binding of
      /// request/response. Should we add an identifier to the HealthCheckSpecifier
      /// to bind with the response?
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Envoy.Service.Discovery.V2.HealthCheckSpecifier> FetchHealthCheck(global::Envoy.Service.Discovery.V2.HealthCheckRequestOrEndpointHealthResponse request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for HealthDiscoveryService</summary>
    public partial class HealthDiscoveryServiceClient : grpc::ClientBase<HealthDiscoveryServiceClient>
    {
      /// <summary>Creates a new client for HealthDiscoveryService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public HealthDiscoveryServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for HealthDiscoveryService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public HealthDiscoveryServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected HealthDiscoveryServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected HealthDiscoveryServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// 1. Envoy starts up and if its can_healthcheck option in the static
      ///    bootstrap config is enabled, sends HealthCheckRequest to the management
      ///    server. It supplies its capabilities (which protocol it can health check
      ///    with, what zone it resides in, etc.).
      /// 2. In response to (1), the management server designates this Envoy as a
      ///    healthchecker to health check a subset of all upstream hosts for a given
      ///    cluster (for example upstream Host 1 and Host 2). It streams
      ///    HealthCheckSpecifier messages with cluster related configuration for all
      ///    clusters this Envoy is designated to health check. Subsequent
      ///    HealthCheckSpecifier message will be sent on changes to:
      ///    a. Endpoints to health checks
      ///    b. Per cluster configuration change
      /// 3. Envoy creates a health probe based on the HealthCheck config and sends
      ///    it to endpoint(ip:port) of Host 1 and 2. Based on the HealthCheck
      ///    configuration Envoy waits upon the arrival of the probe response and
      ///    looks at the content of the response to decide whether the endpoint is
      ///    healthy or not. If a response hasn’t been received within the timeout
      ///    interval, the endpoint health status is considered TIMEOUT.
      /// 4. Envoy reports results back in an EndpointHealthResponse message.
      ///    Envoy streams responses as often as the interval configured by the
      ///    management server in HealthCheckSpecifier.
      /// 5. The management Server collects health statuses for all endpoints in the
      ///    cluster (for all clusters) and uses this information to construct
      ///    EndpointDiscoveryResponse messages.
      /// 6. Once Envoy has a list of upstream endpoints to send traffic to, it load
      ///    balances traffic to them without additional health checking. It may
      ///    use inline healthcheck (i.e. consider endpoint UNHEALTHY if connection
      ///    failed to a particular endpoint to account for health status propagation
      ///    delay between HDS and EDS).
      /// By default, can_healthcheck is true. If can_healthcheck is false, Cluster
      /// configuration may not contain HealthCheck message.
      /// TODO(htuch): How is can_healthcheck communicated to CDS to ensure the above
      /// invariant?
      /// TODO(htuch): Add @amb67's diagram.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Envoy.Service.Discovery.V2.HealthCheckRequestOrEndpointHealthResponse, global::Envoy.Service.Discovery.V2.HealthCheckSpecifier> StreamHealthCheck(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamHealthCheck(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 1. Envoy starts up and if its can_healthcheck option in the static
      ///    bootstrap config is enabled, sends HealthCheckRequest to the management
      ///    server. It supplies its capabilities (which protocol it can health check
      ///    with, what zone it resides in, etc.).
      /// 2. In response to (1), the management server designates this Envoy as a
      ///    healthchecker to health check a subset of all upstream hosts for a given
      ///    cluster (for example upstream Host 1 and Host 2). It streams
      ///    HealthCheckSpecifier messages with cluster related configuration for all
      ///    clusters this Envoy is designated to health check. Subsequent
      ///    HealthCheckSpecifier message will be sent on changes to:
      ///    a. Endpoints to health checks
      ///    b. Per cluster configuration change
      /// 3. Envoy creates a health probe based on the HealthCheck config and sends
      ///    it to endpoint(ip:port) of Host 1 and 2. Based on the HealthCheck
      ///    configuration Envoy waits upon the arrival of the probe response and
      ///    looks at the content of the response to decide whether the endpoint is
      ///    healthy or not. If a response hasn’t been received within the timeout
      ///    interval, the endpoint health status is considered TIMEOUT.
      /// 4. Envoy reports results back in an EndpointHealthResponse message.
      ///    Envoy streams responses as often as the interval configured by the
      ///    management server in HealthCheckSpecifier.
      /// 5. The management Server collects health statuses for all endpoints in the
      ///    cluster (for all clusters) and uses this information to construct
      ///    EndpointDiscoveryResponse messages.
      /// 6. Once Envoy has a list of upstream endpoints to send traffic to, it load
      ///    balances traffic to them without additional health checking. It may
      ///    use inline healthcheck (i.e. consider endpoint UNHEALTHY if connection
      ///    failed to a particular endpoint to account for health status propagation
      ///    delay between HDS and EDS).
      /// By default, can_healthcheck is true. If can_healthcheck is false, Cluster
      /// configuration may not contain HealthCheck message.
      /// TODO(htuch): How is can_healthcheck communicated to CDS to ensure the above
      /// invariant?
      /// TODO(htuch): Add @amb67's diagram.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Envoy.Service.Discovery.V2.HealthCheckRequestOrEndpointHealthResponse, global::Envoy.Service.Discovery.V2.HealthCheckSpecifier> StreamHealthCheck(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_StreamHealthCheck, null, options);
      }
      /// <summary>
      /// TODO(htuch): Unlike the gRPC version, there is no stream-based binding of
      /// request/response. Should we add an identifier to the HealthCheckSpecifier
      /// to bind with the response?
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Envoy.Service.Discovery.V2.HealthCheckSpecifier FetchHealthCheck(global::Envoy.Service.Discovery.V2.HealthCheckRequestOrEndpointHealthResponse request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchHealthCheck(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TODO(htuch): Unlike the gRPC version, there is no stream-based binding of
      /// request/response. Should we add an identifier to the HealthCheckSpecifier
      /// to bind with the response?
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Envoy.Service.Discovery.V2.HealthCheckSpecifier FetchHealthCheck(global::Envoy.Service.Discovery.V2.HealthCheckRequestOrEndpointHealthResponse request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FetchHealthCheck, null, options, request);
      }
      /// <summary>
      /// TODO(htuch): Unlike the gRPC version, there is no stream-based binding of
      /// request/response. Should we add an identifier to the HealthCheckSpecifier
      /// to bind with the response?
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Envoy.Service.Discovery.V2.HealthCheckSpecifier> FetchHealthCheckAsync(global::Envoy.Service.Discovery.V2.HealthCheckRequestOrEndpointHealthResponse request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchHealthCheckAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TODO(htuch): Unlike the gRPC version, there is no stream-based binding of
      /// request/response. Should we add an identifier to the HealthCheckSpecifier
      /// to bind with the response?
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Envoy.Service.Discovery.V2.HealthCheckSpecifier> FetchHealthCheckAsync(global::Envoy.Service.Discovery.V2.HealthCheckRequestOrEndpointHealthResponse request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FetchHealthCheck, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override HealthDiscoveryServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new HealthDiscoveryServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(HealthDiscoveryServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_StreamHealthCheck, serviceImpl.StreamHealthCheck)
          .AddMethod(__Method_FetchHealthCheck, serviceImpl.FetchHealthCheck).Build();
    }

  }
}
#endregion
