// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/service/load_stats/v2/lrs.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Envoy.Service.LoadStats.V2 {
  public static partial class LoadReportingService
  {
    static readonly string __ServiceName = "envoy.service.load_stats.v2.LoadReportingService";

    static readonly grpc::Marshaller<global::Envoy.Service.LoadStats.V2.LoadStatsRequest> __Marshaller_LoadStatsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Envoy.Service.LoadStats.V2.LoadStatsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Envoy.Service.LoadStats.V2.LoadStatsResponse> __Marshaller_LoadStatsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Envoy.Service.LoadStats.V2.LoadStatsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Envoy.Service.LoadStats.V2.LoadStatsRequest, global::Envoy.Service.LoadStats.V2.LoadStatsResponse> __Method_StreamLoadStats = new grpc::Method<global::Envoy.Service.LoadStats.V2.LoadStatsRequest, global::Envoy.Service.LoadStats.V2.LoadStatsResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "StreamLoadStats",
        __Marshaller_LoadStatsRequest,
        __Marshaller_LoadStatsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Envoy.Service.LoadStats.V2.LrsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of LoadReportingService</summary>
    public abstract partial class LoadReportingServiceBase
    {
      /// <summary>
      /// Advanced API to allow for multi-dimensional load balancing by remote
      /// server. For receiving LB assignments, the steps are:
      /// 1, The management server is configured with per cluster/zone/load metric
      ///    capacity configuration. The capacity configuration definition is
      ///    outside of the scope of this document.
      /// 2. Envoy issues a standard {Stream,Fetch}Endpoints request for the clusters
      ///    to balance.
      ///
      /// Independently, Envoy will initiate a StreamLoadStats bidi stream with a
      /// management server:
      /// 1. Once a connection establishes, the management server publishes a
      ///    LoadStatsResponse for all clusters it is interested in learning load
      ///    stats about.
      /// 2. For each cluster, Envoy load balances incoming traffic to upstream hosts
      ///    based on per-zone weights and/or per-instance weights (if specified)
      ///    based on intra-zone LbPolicy. This information comes from the above
      ///    {Stream,Fetch}Endpoints.
      /// 3. When upstream hosts reply, they optionally add header &lt;define header
      ///    name> with ASCII representation of EndpointLoadMetricStats.
      /// 4. Envoy aggregates load reports over the period of time given to it in
      ///    LoadStatsResponse.load_reporting_interval. This includes aggregation
      ///    stats Envoy maintains by itself (total_requests, rpc_errors etc.) as
      ///    well as load metrics from upstream hosts.
      /// 5. When the timer of load_reporting_interval expires, Envoy sends new
      ///    LoadStatsRequest filled with load reports for each cluster.
      /// 6. The management server uses the load reports from all reported Envoys
      ///    from around the world, computes global assignment and prepares traffic
      ///    assignment destined for each zone Envoys are located in. Goto 2.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task StreamLoadStats(grpc::IAsyncStreamReader<global::Envoy.Service.LoadStats.V2.LoadStatsRequest> requestStream, grpc::IServerStreamWriter<global::Envoy.Service.LoadStats.V2.LoadStatsResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for LoadReportingService</summary>
    public partial class LoadReportingServiceClient : grpc::ClientBase<LoadReportingServiceClient>
    {
      /// <summary>Creates a new client for LoadReportingService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public LoadReportingServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for LoadReportingService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public LoadReportingServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected LoadReportingServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected LoadReportingServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Advanced API to allow for multi-dimensional load balancing by remote
      /// server. For receiving LB assignments, the steps are:
      /// 1, The management server is configured with per cluster/zone/load metric
      ///    capacity configuration. The capacity configuration definition is
      ///    outside of the scope of this document.
      /// 2. Envoy issues a standard {Stream,Fetch}Endpoints request for the clusters
      ///    to balance.
      ///
      /// Independently, Envoy will initiate a StreamLoadStats bidi stream with a
      /// management server:
      /// 1. Once a connection establishes, the management server publishes a
      ///    LoadStatsResponse for all clusters it is interested in learning load
      ///    stats about.
      /// 2. For each cluster, Envoy load balances incoming traffic to upstream hosts
      ///    based on per-zone weights and/or per-instance weights (if specified)
      ///    based on intra-zone LbPolicy. This information comes from the above
      ///    {Stream,Fetch}Endpoints.
      /// 3. When upstream hosts reply, they optionally add header &lt;define header
      ///    name> with ASCII representation of EndpointLoadMetricStats.
      /// 4. Envoy aggregates load reports over the period of time given to it in
      ///    LoadStatsResponse.load_reporting_interval. This includes aggregation
      ///    stats Envoy maintains by itself (total_requests, rpc_errors etc.) as
      ///    well as load metrics from upstream hosts.
      /// 5. When the timer of load_reporting_interval expires, Envoy sends new
      ///    LoadStatsRequest filled with load reports for each cluster.
      /// 6. The management server uses the load reports from all reported Envoys
      ///    from around the world, computes global assignment and prepares traffic
      ///    assignment destined for each zone Envoys are located in. Goto 2.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Envoy.Service.LoadStats.V2.LoadStatsRequest, global::Envoy.Service.LoadStats.V2.LoadStatsResponse> StreamLoadStats(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamLoadStats(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Advanced API to allow for multi-dimensional load balancing by remote
      /// server. For receiving LB assignments, the steps are:
      /// 1, The management server is configured with per cluster/zone/load metric
      ///    capacity configuration. The capacity configuration definition is
      ///    outside of the scope of this document.
      /// 2. Envoy issues a standard {Stream,Fetch}Endpoints request for the clusters
      ///    to balance.
      ///
      /// Independently, Envoy will initiate a StreamLoadStats bidi stream with a
      /// management server:
      /// 1. Once a connection establishes, the management server publishes a
      ///    LoadStatsResponse for all clusters it is interested in learning load
      ///    stats about.
      /// 2. For each cluster, Envoy load balances incoming traffic to upstream hosts
      ///    based on per-zone weights and/or per-instance weights (if specified)
      ///    based on intra-zone LbPolicy. This information comes from the above
      ///    {Stream,Fetch}Endpoints.
      /// 3. When upstream hosts reply, they optionally add header &lt;define header
      ///    name> with ASCII representation of EndpointLoadMetricStats.
      /// 4. Envoy aggregates load reports over the period of time given to it in
      ///    LoadStatsResponse.load_reporting_interval. This includes aggregation
      ///    stats Envoy maintains by itself (total_requests, rpc_errors etc.) as
      ///    well as load metrics from upstream hosts.
      /// 5. When the timer of load_reporting_interval expires, Envoy sends new
      ///    LoadStatsRequest filled with load reports for each cluster.
      /// 6. The management server uses the load reports from all reported Envoys
      ///    from around the world, computes global assignment and prepares traffic
      ///    assignment destined for each zone Envoys are located in. Goto 2.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Envoy.Service.LoadStats.V2.LoadStatsRequest, global::Envoy.Service.LoadStats.V2.LoadStatsResponse> StreamLoadStats(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_StreamLoadStats, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override LoadReportingServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new LoadReportingServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(LoadReportingServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_StreamLoadStats, serviceImpl.StreamLoadStats).Build();
    }

  }
}
#endregion
