// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/service/auth/v2alpha/attribute_context.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Service.Auth.V2Alpha {

  /// <summary>Holder for reflection information generated from envoy/service/auth/v2alpha/attribute_context.proto</summary>
  public static partial class AttributeContextReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/service/auth/v2alpha/attribute_context.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AttributeContextReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjJlbnZveS9zZXJ2aWNlL2F1dGgvdjJhbHBoYS9hdHRyaWJ1dGVfY29udGV4",
            "dC5wcm90bxIaZW52b3kuc2VydmljZS5hdXRoLnYyYWxwaGEaH2Vudm95L2Fw",
            "aS92Mi9jb3JlL2FkZHJlc3MucHJvdG8aH2dvb2dsZS9wcm90b2J1Zi90aW1l",
            "c3RhbXAucHJvdG8i9QcKEEF0dHJpYnV0ZUNvbnRleHQSQQoGc291cmNlGAEg",
            "ASgLMjEuZW52b3kuc2VydmljZS5hdXRoLnYyYWxwaGEuQXR0cmlidXRlQ29u",
            "dGV4dC5QZWVyEkYKC2Rlc3RpbmF0aW9uGAIgASgLMjEuZW52b3kuc2Vydmlj",
            "ZS5hdXRoLnYyYWxwaGEuQXR0cmlidXRlQ29udGV4dC5QZWVyEkUKB3JlcXVl",
            "c3QYBCABKAsyNC5lbnZveS5zZXJ2aWNlLmF1dGgudjJhbHBoYS5BdHRyaWJ1",
            "dGVDb250ZXh0LlJlcXVlc3QSXwoSY29udGV4dF9leHRlbnNpb25zGAogAygL",
            "MkMuZW52b3kuc2VydmljZS5hdXRoLnYyYWxwaGEuQXR0cmlidXRlQ29udGV4",
            "dC5Db250ZXh0RXh0ZW5zaW9uc0VudHJ5GtUBCgRQZWVyEisKB2FkZHJlc3MY",
            "ASABKAsyGi5lbnZveS5hcGkudjIuY29yZS5BZGRyZXNzEg8KB3NlcnZpY2UY",
            "AiABKAkSTQoGbGFiZWxzGAMgAygLMj0uZW52b3kuc2VydmljZS5hdXRoLnYy",
            "YWxwaGEuQXR0cmlidXRlQ29udGV4dC5QZWVyLkxhYmVsc0VudHJ5EhEKCXBy",
            "aW5jaXBhbBgEIAEoCRotCgtMYWJlbHNFbnRyeRILCgNrZXkYASABKAkSDQoF",
            "dmFsdWUYAiABKAk6AjgBGnsKB1JlcXVlc3QSKAoEdGltZRgBIAEoCzIaLmdv",
            "b2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASRgoEaHR0cBgCIAEoCzI4LmVudm95",
            "LnNlcnZpY2UuYXV0aC52MmFscGhhLkF0dHJpYnV0ZUNvbnRleHQuSHR0cFJl",
            "cXVlc3QangIKC0h0dHBSZXF1ZXN0EgoKAmlkGAEgASgJEg4KBm1ldGhvZBgC",
            "IAEoCRJWCgdoZWFkZXJzGAMgAygLMkUuZW52b3kuc2VydmljZS5hdXRoLnYy",
            "YWxwaGEuQXR0cmlidXRlQ29udGV4dC5IdHRwUmVxdWVzdC5IZWFkZXJzRW50",
            "cnkSDAoEcGF0aBgEIAEoCRIMCgRob3N0GAUgASgJEg4KBnNjaGVtZRgGIAEo",
            "CRINCgVxdWVyeRgHIAEoCRIQCghmcmFnbWVudBgIIAEoCRIMCgRzaXplGAkg",
            "ASgDEhAKCHByb3RvY29sGAogASgJGi4KDEhlYWRlcnNFbnRyeRILCgNrZXkY",
            "ASABKAkSDQoFdmFsdWUYAiABKAk6AjgBGjgKFkNvbnRleHRFeHRlbnNpb25z",
            "RW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4AWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Api.V2.Core.AddressReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Service.Auth.V2Alpha.AttributeContext), global::Envoy.Service.Auth.V2Alpha.AttributeContext.Parser, new[]{ "Source", "Destination", "Request", "ContextExtensions" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Service.Auth.V2Alpha.AttributeContext.Types.Peer), global::Envoy.Service.Auth.V2Alpha.AttributeContext.Types.Peer.Parser, new[]{ "Address", "Service", "Labels", "Principal" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Service.Auth.V2Alpha.AttributeContext.Types.Request), global::Envoy.Service.Auth.V2Alpha.AttributeContext.Types.Request.Parser, new[]{ "Time", "Http" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Service.Auth.V2Alpha.AttributeContext.Types.HttpRequest), global::Envoy.Service.Auth.V2Alpha.AttributeContext.Types.HttpRequest.Parser, new[]{ "Id", "Method", "Headers", "Path", "Host", "Scheme", "Query", "Fragment", "Size", "Protocol" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// An attribute is a piece of metadata that describes an activity on a network.
  /// For example, the size of an HTTP request, or the status code of an HTTP response.
  ///
  /// Each attribute has a type and a name, which is logically defined as a proto message field
  /// of the `AttributeContext`. The `AttributeContext` is a collection of individual attributes
  /// supported by Envoy authorization system.
  /// </summary>
  public sealed partial class AttributeContext : pb::IMessage<AttributeContext> {
    private static readonly pb::MessageParser<AttributeContext> _parser = new pb::MessageParser<AttributeContext>(() => new AttributeContext());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttributeContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Service.Auth.V2Alpha.AttributeContextReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeContext(AttributeContext other) : this() {
      Source = other.source_ != null ? other.Source.Clone() : null;
      Destination = other.destination_ != null ? other.Destination.Clone() : null;
      Request = other.request_ != null ? other.Request.Clone() : null;
      contextExtensions_ = other.contextExtensions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeContext Clone() {
      return new AttributeContext(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::Envoy.Service.Auth.V2Alpha.AttributeContext.Types.Peer source_;
    /// <summary>
    /// The source of a network activity, such as starting a TCP connection.
    /// In a multi hop network activity, the source represents the sender of the
    /// last hop.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Service.Auth.V2Alpha.AttributeContext.Types.Peer Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "destination" field.</summary>
    public const int DestinationFieldNumber = 2;
    private global::Envoy.Service.Auth.V2Alpha.AttributeContext.Types.Peer destination_;
    /// <summary>
    /// The destination of a network activity, such as accepting a TCP connection.
    /// In a multi hop network activity, the destination represents the receiver of
    /// the last hop.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Service.Auth.V2Alpha.AttributeContext.Types.Peer Destination {
      get { return destination_; }
      set {
        destination_ = value;
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 4;
    private global::Envoy.Service.Auth.V2Alpha.AttributeContext.Types.Request request_;
    /// <summary>
    /// Represents a network request, such as an HTTP request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Service.Auth.V2Alpha.AttributeContext.Types.Request Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    /// <summary>Field number for the "context_extensions" field.</summary>
    public const int ContextExtensionsFieldNumber = 10;
    private static readonly pbc::MapField<string, string>.Codec _map_contextExtensions_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 82);
    private readonly pbc::MapField<string, string> contextExtensions_ = new pbc::MapField<string, string>();
    /// <summary>
    /// This is analogous to http_request.headers, however these contents will not be sent to the
    /// upstream server. Context_extensions provide an extension mechanism for sending additional
    /// information to the auth server without modifying the proto definition. It maps to the
    /// internal opaque context in the filter chain.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> ContextExtensions {
      get { return contextExtensions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttributeContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttributeContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Destination, other.Destination)) return false;
      if (!object.Equals(Request, other.Request)) return false;
      if (!ContextExtensions.Equals(other.ContextExtensions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      if (destination_ != null) hash ^= Destination.GetHashCode();
      if (request_ != null) hash ^= Request.GetHashCode();
      hash ^= ContextExtensions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (destination_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Destination);
      }
      if (request_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Request);
      }
      contextExtensions_.WriteTo(output, _map_contextExtensions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (destination_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Destination);
      }
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      size += contextExtensions_.CalculateSize(_map_contextExtensions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttributeContext other) {
      if (other == null) {
        return;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::Envoy.Service.Auth.V2Alpha.AttributeContext.Types.Peer();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.destination_ != null) {
        if (destination_ == null) {
          destination_ = new global::Envoy.Service.Auth.V2Alpha.AttributeContext.Types.Peer();
        }
        Destination.MergeFrom(other.Destination);
      }
      if (other.request_ != null) {
        if (request_ == null) {
          request_ = new global::Envoy.Service.Auth.V2Alpha.AttributeContext.Types.Request();
        }
        Request.MergeFrom(other.Request);
      }
      contextExtensions_.Add(other.contextExtensions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (source_ == null) {
              source_ = new global::Envoy.Service.Auth.V2Alpha.AttributeContext.Types.Peer();
            }
            input.ReadMessage(source_);
            break;
          }
          case 18: {
            if (destination_ == null) {
              destination_ = new global::Envoy.Service.Auth.V2Alpha.AttributeContext.Types.Peer();
            }
            input.ReadMessage(destination_);
            break;
          }
          case 34: {
            if (request_ == null) {
              request_ = new global::Envoy.Service.Auth.V2Alpha.AttributeContext.Types.Request();
            }
            input.ReadMessage(request_);
            break;
          }
          case 82: {
            contextExtensions_.AddEntriesFrom(input, _map_contextExtensions_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AttributeContext message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// This message defines attributes for a node that handles a network request.
      /// The node can be either a service or an application that sends, forwards,
      /// or receives the request. Service peers should fill in the `service`,
      /// `principal`, and `labels` as appropriate.
      /// </summary>
      public sealed partial class Peer : pb::IMessage<Peer> {
        private static readonly pb::MessageParser<Peer> _parser = new pb::MessageParser<Peer>(() => new Peer());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Peer> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Service.Auth.V2Alpha.AttributeContext.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Peer() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Peer(Peer other) : this() {
          Address = other.address_ != null ? other.Address.Clone() : null;
          service_ = other.service_;
          labels_ = other.labels_.Clone();
          principal_ = other.principal_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Peer Clone() {
          return new Peer(this);
        }

        /// <summary>Field number for the "address" field.</summary>
        public const int AddressFieldNumber = 1;
        private global::Envoy.Api.V2.Core.Address address_;
        /// <summary>
        /// The address of the peer, this is typically the IP address.
        /// It can also be UDS path, or others.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Envoy.Api.V2.Core.Address Address {
          get { return address_; }
          set {
            address_ = value;
          }
        }

        /// <summary>Field number for the "service" field.</summary>
        public const int ServiceFieldNumber = 2;
        private string service_ = "";
        /// <summary>
        /// The canonical service name of the peer.
        /// It should be set to :ref:`the HTTP x-envoy-downstream-service-cluster
        /// &lt;config_http_conn_man_headers_downstream-service-cluster>`
        /// If a more trusted source of the service name is available through mTLS/secure naming, it
        /// should be used.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Service {
          get { return service_; }
          set {
            service_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "labels" field.</summary>
        public const int LabelsFieldNumber = 3;
        private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
            = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 26);
        private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
        /// <summary>
        /// The labels associated with the peer.
        /// These could be pod labels for Kubernetes or tags for VMs.
        /// The source of the labels could be an X.509 certificate or other configuration.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, string> Labels {
          get { return labels_; }
        }

        /// <summary>Field number for the "principal" field.</summary>
        public const int PrincipalFieldNumber = 4;
        private string principal_ = "";
        /// <summary>
        /// The authenticated identity of this peer.
        /// For example, the identity associated with the workload such as a service account.
        /// If an X.509 certificate is used to assert the identity this field should be sourced from
        /// `Subject` or `Subject Alternative Names`. The primary identity should be the principal.
        /// The principal format is issuer specific.
        ///
        /// Example:
        /// *    SPIFFE format is `spiffe://trust-domain/path`
        /// *    Google account format is `https://accounts.google.com/{userid}`
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Principal {
          get { return principal_; }
          set {
            principal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Peer);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Peer other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Address, other.Address)) return false;
          if (Service != other.Service) return false;
          if (!Labels.Equals(other.Labels)) return false;
          if (Principal != other.Principal) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (address_ != null) hash ^= Address.GetHashCode();
          if (Service.Length != 0) hash ^= Service.GetHashCode();
          hash ^= Labels.GetHashCode();
          if (Principal.Length != 0) hash ^= Principal.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (address_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Address);
          }
          if (Service.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Service);
          }
          labels_.WriteTo(output, _map_labels_codec);
          if (Principal.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Principal);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (address_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
          }
          if (Service.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Service);
          }
          size += labels_.CalculateSize(_map_labels_codec);
          if (Principal.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Principal);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Peer other) {
          if (other == null) {
            return;
          }
          if (other.address_ != null) {
            if (address_ == null) {
              address_ = new global::Envoy.Api.V2.Core.Address();
            }
            Address.MergeFrom(other.Address);
          }
          if (other.Service.Length != 0) {
            Service = other.Service;
          }
          labels_.Add(other.labels_);
          if (other.Principal.Length != 0) {
            Principal = other.Principal;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (address_ == null) {
                  address_ = new global::Envoy.Api.V2.Core.Address();
                }
                input.ReadMessage(address_);
                break;
              }
              case 18: {
                Service = input.ReadString();
                break;
              }
              case 26: {
                labels_.AddEntriesFrom(input, _map_labels_codec);
                break;
              }
              case 34: {
                Principal = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Represents a network request, such as an HTTP request.
      /// </summary>
      public sealed partial class Request : pb::IMessage<Request> {
        private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Request> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Service.Auth.V2Alpha.AttributeContext.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request(Request other) : this() {
          Time = other.time_ != null ? other.Time.Clone() : null;
          Http = other.http_ != null ? other.Http.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request Clone() {
          return new Request(this);
        }

        /// <summary>Field number for the "time" field.</summary>
        public const int TimeFieldNumber = 1;
        private global::Google.Protobuf.WellKnownTypes.Timestamp time_;
        /// <summary>
        /// The timestamp when the proxy receives the first byte of the request.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Timestamp Time {
          get { return time_; }
          set {
            time_ = value;
          }
        }

        /// <summary>Field number for the "http" field.</summary>
        public const int HttpFieldNumber = 2;
        private global::Envoy.Service.Auth.V2Alpha.AttributeContext.Types.HttpRequest http_;
        /// <summary>
        /// Represents an HTTP request or an HTTP-like request.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Envoy.Service.Auth.V2Alpha.AttributeContext.Types.HttpRequest Http {
          get { return http_; }
          set {
            http_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Request);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Request other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Time, other.Time)) return false;
          if (!object.Equals(Http, other.Http)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (time_ != null) hash ^= Time.GetHashCode();
          if (http_ != null) hash ^= Http.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (time_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Time);
          }
          if (http_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Http);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (time_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Time);
          }
          if (http_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Http);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Request other) {
          if (other == null) {
            return;
          }
          if (other.time_ != null) {
            if (time_ == null) {
              time_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            Time.MergeFrom(other.Time);
          }
          if (other.http_ != null) {
            if (http_ == null) {
              http_ = new global::Envoy.Service.Auth.V2Alpha.AttributeContext.Types.HttpRequest();
            }
            Http.MergeFrom(other.Http);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (time_ == null) {
                  time_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(time_);
                break;
              }
              case 18: {
                if (http_ == null) {
                  http_ = new global::Envoy.Service.Auth.V2Alpha.AttributeContext.Types.HttpRequest();
                }
                input.ReadMessage(http_);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// This message defines attributes for an HTTP request.
      /// HTTP/1.x, HTTP/2, gRPC are all considered as HTTP requests.
      /// </summary>
      public sealed partial class HttpRequest : pb::IMessage<HttpRequest> {
        private static readonly pb::MessageParser<HttpRequest> _parser = new pb::MessageParser<HttpRequest>(() => new HttpRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<HttpRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Service.Auth.V2Alpha.AttributeContext.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HttpRequest() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HttpRequest(HttpRequest other) : this() {
          id_ = other.id_;
          method_ = other.method_;
          headers_ = other.headers_.Clone();
          path_ = other.path_;
          host_ = other.host_;
          scheme_ = other.scheme_;
          query_ = other.query_;
          fragment_ = other.fragment_;
          size_ = other.size_;
          protocol_ = other.protocol_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HttpRequest Clone() {
          return new HttpRequest(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        /// <summary>
        /// The unique ID for a request, which can be propagated to downstream
        /// systems. The ID should have low probability of collision
        /// within a single day for a specific service.
        /// For HTTP requests, it should be X-Request-ID or equivalent.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "method" field.</summary>
        public const int MethodFieldNumber = 2;
        private string method_ = "";
        /// <summary>
        /// The HTTP request method, such as `GET`, `POST`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Method {
          get { return method_; }
          set {
            method_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "headers" field.</summary>
        public const int HeadersFieldNumber = 3;
        private static readonly pbc::MapField<string, string>.Codec _map_headers_codec
            = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 26);
        private readonly pbc::MapField<string, string> headers_ = new pbc::MapField<string, string>();
        /// <summary>
        /// The HTTP request headers. If multiple headers share the same key, they
        /// must be merged according to the HTTP spec. All header keys must be
        /// lowercased, because HTTP header keys are case-insensitive.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, string> Headers {
          get { return headers_; }
        }

        /// <summary>Field number for the "path" field.</summary>
        public const int PathFieldNumber = 4;
        private string path_ = "";
        /// <summary>
        /// The HTTP URL path.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Path {
          get { return path_; }
          set {
            path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "host" field.</summary>
        public const int HostFieldNumber = 5;
        private string host_ = "";
        /// <summary>
        /// The HTTP request `Host` or 'Authority` header value.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Host {
          get { return host_; }
          set {
            host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "scheme" field.</summary>
        public const int SchemeFieldNumber = 6;
        private string scheme_ = "";
        /// <summary>
        /// The HTTP URL scheme, such as `http` and `https`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Scheme {
          get { return scheme_; }
          set {
            scheme_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "query" field.</summary>
        public const int QueryFieldNumber = 7;
        private string query_ = "";
        /// <summary>
        /// The HTTP URL query in the format of `name1=value`&amp;name2=value2`, as it
        /// appears in the first line of the HTTP request. No decoding is performed.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Query {
          get { return query_; }
          set {
            query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "fragment" field.</summary>
        public const int FragmentFieldNumber = 8;
        private string fragment_ = "";
        /// <summary>
        /// The HTTP URL fragment, excluding leading `#`. No URL decoding is performed.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Fragment {
          get { return fragment_; }
          set {
            fragment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "size" field.</summary>
        public const int SizeFieldNumber = 9;
        private long size_;
        /// <summary>
        /// The HTTP request size in bytes. If unknown, it must be -1.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Size {
          get { return size_; }
          set {
            size_ = value;
          }
        }

        /// <summary>Field number for the "protocol" field.</summary>
        public const int ProtocolFieldNumber = 10;
        private string protocol_ = "";
        /// <summary>
        /// The network protocol used with the request, such as
        /// "http/1.1", "spdy/3", "h2", "h2c"
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Protocol {
          get { return protocol_; }
          set {
            protocol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as HttpRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(HttpRequest other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Method != other.Method) return false;
          if (!Headers.Equals(other.Headers)) return false;
          if (Path != other.Path) return false;
          if (Host != other.Host) return false;
          if (Scheme != other.Scheme) return false;
          if (Query != other.Query) return false;
          if (Fragment != other.Fragment) return false;
          if (Size != other.Size) return false;
          if (Protocol != other.Protocol) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (Method.Length != 0) hash ^= Method.GetHashCode();
          hash ^= Headers.GetHashCode();
          if (Path.Length != 0) hash ^= Path.GetHashCode();
          if (Host.Length != 0) hash ^= Host.GetHashCode();
          if (Scheme.Length != 0) hash ^= Scheme.GetHashCode();
          if (Query.Length != 0) hash ^= Query.GetHashCode();
          if (Fragment.Length != 0) hash ^= Fragment.GetHashCode();
          if (Size != 0L) hash ^= Size.GetHashCode();
          if (Protocol.Length != 0) hash ^= Protocol.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (Method.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Method);
          }
          headers_.WriteTo(output, _map_headers_codec);
          if (Path.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Path);
          }
          if (Host.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(Host);
          }
          if (Scheme.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(Scheme);
          }
          if (Query.Length != 0) {
            output.WriteRawTag(58);
            output.WriteString(Query);
          }
          if (Fragment.Length != 0) {
            output.WriteRawTag(66);
            output.WriteString(Fragment);
          }
          if (Size != 0L) {
            output.WriteRawTag(72);
            output.WriteInt64(Size);
          }
          if (Protocol.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(Protocol);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (Method.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Method);
          }
          size += headers_.CalculateSize(_map_headers_codec);
          if (Path.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
          }
          if (Host.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
          }
          if (Scheme.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Scheme);
          }
          if (Query.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
          }
          if (Fragment.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Fragment);
          }
          if (Size != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Size);
          }
          if (Protocol.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Protocol);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(HttpRequest other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.Method.Length != 0) {
            Method = other.Method;
          }
          headers_.Add(other.headers_);
          if (other.Path.Length != 0) {
            Path = other.Path;
          }
          if (other.Host.Length != 0) {
            Host = other.Host;
          }
          if (other.Scheme.Length != 0) {
            Scheme = other.Scheme;
          }
          if (other.Query.Length != 0) {
            Query = other.Query;
          }
          if (other.Fragment.Length != 0) {
            Fragment = other.Fragment;
          }
          if (other.Size != 0L) {
            Size = other.Size;
          }
          if (other.Protocol.Length != 0) {
            Protocol = other.Protocol;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                Method = input.ReadString();
                break;
              }
              case 26: {
                headers_.AddEntriesFrom(input, _map_headers_codec);
                break;
              }
              case 34: {
                Path = input.ReadString();
                break;
              }
              case 42: {
                Host = input.ReadString();
                break;
              }
              case 50: {
                Scheme = input.ReadString();
                break;
              }
              case 58: {
                Query = input.ReadString();
                break;
              }
              case 66: {
                Fragment = input.ReadString();
                break;
              }
              case 72: {
                Size = input.ReadInt64();
                break;
              }
              case 82: {
                Protocol = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
