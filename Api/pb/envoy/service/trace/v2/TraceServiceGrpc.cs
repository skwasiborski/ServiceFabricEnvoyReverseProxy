// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/service/trace/v2/trace_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Envoy.Service.Trace.V2 {
  /// <summary>
  /// Service for streaming traces to server that consumes the trace data. It
  /// uses OpenCensus data model as a standard to represent trace information.
  /// </summary>
  public static partial class TraceService
  {
    static readonly string __ServiceName = "envoy.service.trace.v2.TraceService";

    static readonly grpc::Marshaller<global::Envoy.Service.Trace.V2.StreamTracesMessage> __Marshaller_StreamTracesMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Envoy.Service.Trace.V2.StreamTracesMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Envoy.Service.Trace.V2.StreamTracesResponse> __Marshaller_StreamTracesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Envoy.Service.Trace.V2.StreamTracesResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Envoy.Service.Trace.V2.StreamTracesMessage, global::Envoy.Service.Trace.V2.StreamTracesResponse> __Method_StreamTraces = new grpc::Method<global::Envoy.Service.Trace.V2.StreamTracesMessage, global::Envoy.Service.Trace.V2.StreamTracesResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "StreamTraces",
        __Marshaller_StreamTracesMessage,
        __Marshaller_StreamTracesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Envoy.Service.Trace.V2.TraceServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of TraceService</summary>
    public abstract partial class TraceServiceBase
    {
      /// <summary>
      /// Envoy will connect and send StreamTracesMessage messages forever. It does
      /// not expect any response to be sent as nothing would be done in the case
      /// of failure.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Envoy.Service.Trace.V2.StreamTracesResponse> StreamTraces(grpc::IAsyncStreamReader<global::Envoy.Service.Trace.V2.StreamTracesMessage> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TraceService</summary>
    public partial class TraceServiceClient : grpc::ClientBase<TraceServiceClient>
    {
      /// <summary>Creates a new client for TraceService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TraceServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TraceService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TraceServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TraceServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TraceServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Envoy will connect and send StreamTracesMessage messages forever. It does
      /// not expect any response to be sent as nothing would be done in the case
      /// of failure.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::Envoy.Service.Trace.V2.StreamTracesMessage, global::Envoy.Service.Trace.V2.StreamTracesResponse> StreamTraces(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamTraces(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Envoy will connect and send StreamTracesMessage messages forever. It does
      /// not expect any response to be sent as nothing would be done in the case
      /// of failure.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::Envoy.Service.Trace.V2.StreamTracesMessage, global::Envoy.Service.Trace.V2.StreamTracesResponse> StreamTraces(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_StreamTraces, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TraceServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TraceServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TraceServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_StreamTraces, serviceImpl.StreamTraces).Build();
    }

  }
}
#endregion
