syntax = "proto3";

package envoy.config.filter.http.ext_authz.v2alpha;
option go_package = "v2alpha";

import "envoy/api/v2/core/grpc_service.proto";
import "envoy/api/v2/core/http_uri.proto";

// [#protodoc-title: HTTP External Authorization ]
// The external authorization HTTP service configuration
// :ref:`configuration overview <config_http_filters_ext_authz>`.

// [#not-implemented-hide:]
// [#comment: The HttpService is under development and will be supported soon.]
message HttpService {
  // Sets the HTTP server URI which the authorization requests must be sent to.
  envoy.api.v2.core.HttpUri server_uri = 1;

  // Sets an optional prefix to the value of authorization request header `path`.
  string path_prefix = 2;
}

// External Authorization filter calls out to an external service over the
// gRPC Authorization API defined by
// :ref:`CheckRequest <envoy_api_msg_service.auth.v2alpha.CheckRequest>`.
// A failed check will cause this filter to close the HTTP request with 403(Forbidden).
message ExtAuthz {

  oneof services {
    // The external authorization gRPC service configuration.
    // The default timeout is set to 200ms by this filter.
    envoy.api.v2.core.GrpcService grpc_service = 1;

    // The external authorization HTTP service configuration.
    // [#not-implemented-hide:]
    HttpService http_service = 3;
  }

  // The filter's behaviour in case the external authorization service does
  // not respond back. When it is set to true, Envoy will also allow traffic in case of
  // communication failure between authorization service and the proxy.
  // Defaults to false.
  bool failure_mode_allow = 2;
}
